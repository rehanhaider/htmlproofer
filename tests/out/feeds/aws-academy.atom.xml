<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>CloudBytes/dev&gt; - AWS Academy</title><link href="http://localhost:8080/" rel="alternate"></link><link href="http://localhost:8080/feeds/aws-academy.atom.xml" rel="self"></link><id>http://localhost:8080/</id><updated>2022-06-28T00:00:00+00:00</updated><entry><title>A brief introduction to AWS autoscaling</title><link href="http://localhost:8080/aws-academy/a-brief-introduction-to-aws-autoscaling" rel="alternate"></link><published>2022-06-28T00:00:00+00:00</published><updated>2022-06-28T00:00:00+00:00</updated><author><name>Rehan Haider</name></author><id>tag:localhost,2022-06-28:/aws-academy/a-brief-introduction-to-aws-autoscaling</id><summary type="html">&lt;p&gt;AWS Autoscaling - introduction, explanation and examples&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#what-is-autoscaling"&gt;What is autoscaling?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-does-aws-autoscaling-work"&gt;How does AWS Autoscaling work?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-to-create-an-autoscaling-group"&gt;How to create an autoscaling group?&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#create-autoscaling-groups-using-aws-console"&gt;Create Autoscaling groups using AWS Console&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#create-authoscaling-groups-using-aws-cli"&gt;Create Authoscaling groups using AWS CLI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;Amazon EC2 Autoscaling is a service that allows you to automatically scale your EC2 instances to meet fluctuating demand on your application.  &lt;/p&gt;
&lt;h2 id="what-is-autoscaling"&gt;What is autoscaling?&lt;/h2&gt;
&lt;p&gt;E.g. consider Uber's cab service. As shown in the image below, the demand for cab services is fluctuating and peaks between 5-8 PM. Compare that to the trough between 1-4 AM. From 10,000 bookings to 70,000 bookings, that represents a 7-fold increase in demand.&lt;/p&gt;
&lt;p&gt;&lt;img alt="3750000-01-uber-hour-of-day" src="http://localhost:8080/images/aws-academy/37500000-01-uber-hour-of-day.png"&gt;&lt;/p&gt;
&lt;p&gt;From a technical standpoint, it means Uber needs to have 7x more compute power in evening compared to night. So Uber could choose to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Plan for the peak demand&lt;/strong&gt;: 7x more compute power in evening compared to night means not fully utilising their extremely expensive servers 16-20 hours a day. That's a lot of wasted money.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Plan for the trough demand&lt;/strong&gt;: This would mean Uber can only  fulfill 10000 bookings an hour and refuse more than 250,000 bookings per day. That's a lot of lost revenue.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Plan for optimum capacity&lt;/strong&gt;: They could potentially keep capacity for 50,000 bookings an hour. That way they only need to refuse about 100,000 bookings per day while fully utilising the servers 20+ hours a day. This is still a lot of lost revenue.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So what if Uber had the ability to somehow magically have more compute power in the evening than night without having to pay for it during off-peak hours? This is made possible by the AWS Autoscaling service.&lt;/p&gt;
&lt;p&gt;&lt;img alt="37500000-autoscaling-process.gif" src="http://localhost:8080/images/aws-academy/37500000-autoscaling-process.gif"&gt;&lt;/p&gt;
&lt;h2 id="how-does-aws-autoscaling-work"&gt;How does AWS Autoscaling work?&lt;/h2&gt;
&lt;p&gt;Autoscaling requires the following components to be configured&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Autoscaling group&lt;/strong&gt;: This is the resource that defines the capacity of the EC2 instances.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Launch configuration&lt;/strong&gt;: This is the resource that defines the EC2 instance type and the AMI to use.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Scaling policy&lt;/strong&gt;: This is the resource that defines the scaling behavior.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Target Group&lt;/strong&gt;: Typically autoscaling works with a load balancer that requires a target group to be defined&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Autoscaling group&lt;/strong&gt; configuration helps define the minimum, maximum, and desired capacity of the EC2 instances that are needed for application and then the scaling policy scales out or in as needed.&lt;/p&gt;
&lt;p&gt;&lt;img alt="37500000-02-autoscaling-terms" src="http://localhost:8080/images/aws-academy/37500000-02-autoscaling-terms.png"&gt;&lt;/p&gt;
&lt;h2 id="how-to-create-an-autoscaling-group"&gt;How to create an autoscaling group?&lt;/h2&gt;
&lt;p&gt;We will use two methods to create autoscaling groups&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="#create-autoscaling-groups-using-aws-console"&gt;Using AWS Console&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#create-authoscaling-groups-using-aws-cli"&gt;Using the AWS CLI&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="create-autoscaling-groups-using-aws-console"&gt;Create Autoscaling groups using AWS Console&lt;/h3&gt;
&lt;h4 id="step-1-create-the-base-ec2-instance"&gt;Step 1: Create the base EC2 instance&lt;/h4&gt;
&lt;p&gt;This instance will be replicated to create other instances in the autoscaling group.&lt;/p&gt;
&lt;h3 id="create-authoscaling-groups-using-aws-cli"&gt;Create Authoscaling groups using AWS CLI&lt;/h3&gt;</content><category term="AWS Academy"></category><category term="aws"></category></entry><entry><title>Setup your dev environment for use with AWS</title><link href="http://localhost:8080/aws-academy/setup-your-dev-environment-for-use-with-aws" rel="alternate"></link><published>2022-06-26T00:00:00+00:00</published><updated>2022-06-26T00:00:00+00:00</updated><author><name>Rehan Haider</name></author><id>tag:localhost,2022-06-26:/aws-academy/setup-your-dev-environment-for-use-with-aws</id><summary type="html">&lt;p&gt;Instructions on how to setup the optimial development environment for use with AWS and this course&lt;/p&gt;</summary><content type="html">&lt;p&gt;To complete this course, configure your system as per the instructions below per your OS.&lt;/p&gt;
&lt;h2 id="windows-1011"&gt;Windows 10/11&lt;/h2&gt;
&lt;p&gt;Follow the below instructions to setup your dev environment for use with AWS.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install &lt;strong&gt;Windows Terminal&lt;/strong&gt; from &lt;strong&gt;&lt;a href="https://apps.microsoft.com/store/detail/windows-terminal/9N0DX20HK701?hl=en-us&amp;amp;gl=US"&gt;Microsoft Store&lt;/a&gt;&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Install &lt;strong&gt;WSL2 (Windows Subsystem for Linux 2)&lt;/strong&gt; on you PC by following &lt;strong&gt;&lt;a href="http://localhost:8080/snippets/how-to-install-wsl2-on-windows-1011"&gt;these instructions&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Open &lt;strong&gt;&lt;em&gt;Windows Terminal&lt;/em&gt;&lt;/strong&gt; and run &lt;code&gt;wsl&lt;/code&gt; to login to your &lt;strong&gt;WSL2 environment&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Follow &lt;strong&gt;&lt;a href="http://localhost:8080/aws-academy/how-to-install-and-configure-aws-cli-on-linux-with-autocompletion"&gt;these instructions&lt;/a&gt;&lt;/strong&gt; to install and configure &lt;strong&gt;AWS CLI&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Install VSCode from &lt;strong&gt;&lt;a href="https://code.visualstudio.com/download"&gt;Microsoft VSCode Website&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Install &lt;strong&gt;&lt;a href="https://www.docker.com/products/docker-desktop/"&gt;Docker for Desktop&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Then choose of the the below options as per your OS.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="#linux"&gt;Linux&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="#macos"&gt;Mac&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="#windows-1011"&gt;Windows&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="linux"&gt;Linux&lt;/h2&gt;
&lt;p&gt;Follow &lt;strong&gt;&lt;a href="http://localhost:8080/aws-academy/how-to-install-and-configure-aws-cli-on-linux-with-autocompletion"&gt;these instructions&lt;/a&gt;&lt;/strong&gt; to install and configure &lt;strong&gt;AWS CLI&lt;/strong&gt; on &lt;strong&gt;Ubuntu Linux&lt;/strong&gt;. &lt;/p&gt;
&lt;h2 id="macos"&gt;MacOS&lt;/h2&gt;
&lt;p&gt;To install &lt;strong&gt;AWS CLI&lt;/strong&gt; on &lt;strong&gt;MacOS&lt;/strong&gt;, first download the latest AWS CLI package from AWS by running&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;curl &lt;span class="s2"&gt;&amp;quot;https://awscli.amazonaws.com/AWSCLIV2.pkg&amp;quot;&lt;/span&gt; -o &lt;span class="s2"&gt;&amp;quot;AWSCLIV2.pkg&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Next, install the package by running&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo installer -pkg AWSCLIV2.pkg -target /
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Verify that AWS CLI has been installed &amp;amp; added to path by running&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;aws --version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="AWS Academy"></category><category term="aws"></category></entry><entry><title>Mount Amazon EFS Drive on EC2 Ubuntu Linux using NFS Utils</title><link href="http://localhost:8080/aws-academy/mount-amazon-efs-drive-on-ec2-ubuntu-linux-using-nfs-utils" rel="alternate"></link><published>2022-06-13T00:00:00+00:00</published><updated>2022-06-13T00:00:00+00:00</updated><author><name>Rehan Haider</name></author><id>tag:localhost,2022-06-13:/aws-academy/mount-amazon-efs-drive-on-ec2-ubuntu-linux-using-nfs-utils</id><summary type="html">&lt;p&gt;A comprehensive guide to mount Amazon Elastic File Storage (EFS) on Ubuntu Linux using NFS Utils and then use it to serve files from the EFS drive. The guided includes instructions for both AWS Console &amp;amp; CLI&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#what-is-amazon-efs"&gt;What is Amazon EFS?&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#efs-mount-on-ec2-how-it-works"&gt;EFS mount on EC2 - How it works?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#project-lab-setup"&gt;Project Lab Setup&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#objectives"&gt;Objectives&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#prerequisites"&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#how-to-mount-an-amazon-efs-to-ec2"&gt;How to Mount an Amazon EFS to EC2?&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#mount-amazon-efs-to-ec2-ubuntu-linux-using-aws-console"&gt;Mount Amazon EFS to EC2 Ubuntu Linux using AWS Console&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#mount-amazon-efs-to-ec2-ubuntu-linux-using-aws-cli"&gt;Mount Amazon EFS to EC2 Ubuntu Linux using AWS CLI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;The first question that you should be asking yourself is, why not use &lt;code&gt;amazon-efs-utils&lt;/code&gt; to &lt;a href="https://docs.aws.amazon.com/efs/latest/ug/installing-amazon-efs-utils.html"&gt;mount the EFS drive&lt;/a&gt;?&lt;/p&gt;
&lt;p&gt;In short, &lt;code&gt;amazon-efs-utils&lt;/code&gt; package is only available for Amazon Linux and other Linux versions require you to build it from scratch. Also the fact that EFS is supposed to act like a Network File System (NFS) and that almost all Linux versions have an already available &amp;amp; extensively tested NFS Utilities. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Even though EFS mount helper is comparatively easier to use, NFS is still preferred by most enterprises because they want to use proven and throughly tested utilities especially if they impact important services.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="what-is-amazon-efs"&gt;What is Amazon EFS?&lt;/h2&gt;
&lt;p&gt;Amazon Elastic File Storage (EFS) is a network mountable elastic shared drive. Which means, you can attach/mount it to your Linux machine as a network drive and it starts with a capacity of almost 0 and can easily grow into Petabytes of storage. &lt;/p&gt;
&lt;h3 id="efs-mount-on-ec2-how-it-works"&gt;EFS mount on EC2 - How it works?&lt;/h3&gt;
&lt;p&gt;The below architecture diagram explains a typical use case of how EFS is used with EC2.&lt;/p&gt;
&lt;p&gt;&lt;img alt="EFS EC2 Architecure diagram" src="http://localhost:8080/images/aws-academy/25000000-architecture-diagram.png"&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The VM(s) that will mount the drive  are typically in their own subnets and security groups. In the example above, a webserver is connected to internet using port 80 or 443 and kept in a publicly accessible subnet.&lt;/li&gt;
&lt;li&gt;The EFS drive could should ideally be kept in a separate subnet and security group.&lt;/li&gt;
&lt;li&gt;The two security groups DMZ SG (which contains the EC2 instance) and the NFS SG (which contains the EFS drive) are connected to allow traffic between them over port 2049&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="project-lab-setup"&gt;Project Lab Setup&lt;/h2&gt;
&lt;h3 id="objectives"&gt;Objectives&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;In this tutorial, we will &lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create an EC2 webserver with Apache installed&lt;/li&gt;
&lt;li&gt;Create an EFS drive &lt;/li&gt;
&lt;li&gt;Mount the EFS drive on the EC2 webserver&lt;/li&gt;
&lt;li&gt;Download a image file onto the EFS drive&lt;/li&gt;
&lt;li&gt;Create a basic HTML page that will display image&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="prerequisites"&gt;Prerequisites&lt;/h3&gt;
&lt;p&gt;You need an AWS Account and AWS CLI installed on your system. You can find the instructions on how to install AWS CLI &lt;a href="http://localhost:8080/aws-academy/how-to-install-and-configure-aws-cli-on-linux-with-autocompletion"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="how-to-mount-an-amazon-efs-to-ec2"&gt;How to Mount an Amazon EFS to EC2?&lt;/h2&gt;
&lt;p&gt;We will mount the EFS drive on EC2 using two methods:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Using AWS Management Console&lt;/li&gt;
&lt;li&gt;Using AWS CLI&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="mount-amazon-efs-to-ec2-ubuntu-linux-using-aws-console"&gt;Mount Amazon EFS to EC2 Ubuntu Linux using AWS Console&lt;/h3&gt;
&lt;h4 id="step-1-create-the-security-groups"&gt;Step 1) Create the security groups&lt;/h4&gt;
&lt;p&gt;We need to create two security groups as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;DMZ SG&lt;/strong&gt; - This SG is used to allow traffic from the internet to the EC2 instance, i.e. port 80 or 443.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NFS SG&lt;/strong&gt; - This SG is used to allow traffic from the members of the DMZ SG to the EFS drive over port 2049.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A) Logon to AWS Management Console:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Search for &lt;strong&gt;Security Groups&lt;/strong&gt; and click on &lt;strong&gt;Security Group&lt;/strong&gt; under features. &lt;/li&gt;
&lt;li&gt;Click on &lt;strong&gt;Create security group&lt;/strong&gt; on the top right.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;B) In the &lt;strong&gt;Create Security Group&lt;/strong&gt; dialog:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Enter &lt;code&gt;DMZ&lt;/code&gt; as the name, &lt;code&gt;Security group for DMZ&lt;/code&gt; as the description. &lt;/li&gt;
&lt;li&gt;In the &lt;strong&gt;inbound rules&lt;/strong&gt; section, click on &lt;strong&gt;Add Rule&lt;/strong&gt;, &lt;/li&gt;
&lt;li&gt;Under &lt;strong&gt;Type&lt;/strong&gt; select &lt;code&gt;http&lt;/code&gt; and under &lt;strong&gt;Source&lt;/strong&gt; select &lt;code&gt;Anywhere-IPv4&lt;/code&gt;. &lt;/li&gt;
&lt;li&gt;CLick on &lt;strong&gt;Add Rule&lt;/strong&gt; again, and under type search for &lt;code&gt;SSH&lt;/code&gt; and under &lt;strong&gt;Source&lt;/strong&gt; select &lt;code&gt;Anywhere-IPv4&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Then scroll to bottom and click on &lt;strong&gt;Create security group&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Create Security Group AWS Console" src="http://localhost:8080/images/aws-academy/25000000-create-dmz-security-console.png"&gt;&lt;/p&gt;
&lt;p&gt;C) Next, Go back to &lt;strong&gt;Security Groups&lt;/strong&gt; page and click on &lt;strong&gt;Create security group&lt;/strong&gt; again. In the &lt;strong&gt;Create Security Group&lt;/strong&gt; dialog:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Enter &lt;code&gt;NFS&lt;/code&gt; as the name, &lt;code&gt;Security group for NFS&lt;/code&gt; as the description. &lt;/li&gt;
&lt;li&gt;In the &lt;strong&gt;inbound rules&lt;/strong&gt; section, under &lt;strong&gt;Type&lt;/strong&gt; select &lt;code&gt;NFS&lt;/code&gt; and under &lt;strong&gt;Source&lt;/strong&gt; click on the textbox to bring up a list of CIDR &amp;amp; Security Group options. &lt;/li&gt;
&lt;li&gt;Select &lt;code&gt;DMZ|sg-xxxxxxx&lt;/code&gt;, i.e. the security group we created earlier, under security groups. Then scroll to bottom and click on &lt;strong&gt;Create security group&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Create Security Group AWS Console" src="http://localhost:8080/images/aws-academy/25000000-create-nfs-security-console.png"&gt;&lt;/p&gt;
&lt;h4 id="step-2-create-the-efs-drive"&gt;Step 2) Create the EFS Drive&lt;/h4&gt;
&lt;p&gt;Log on to &lt;a href="https://console.aws.amazon.com/"&gt;AWS Console&lt;/a&gt;, search for EFS and then click on EFS.&lt;/p&gt;
&lt;p&gt;&lt;img alt="AWS Console EFS" src="http://localhost:8080/images/aws-academy/25000000-efs-console.png"&gt;&lt;/p&gt;
&lt;p&gt;Click on "&lt;strong&gt;Create file system&lt;/strong&gt;", in the &lt;strong&gt;Create File System&lt;/strong&gt; dialog:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Choose a name for your file system, I chose &lt;strong&gt;myEFS&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Under &lt;strong&gt;Availability and durability&lt;/strong&gt; section, choose &lt;strong&gt;One Zone&lt;/strong&gt; &lt;/li&gt;
&lt;li&gt;Under &lt;strong&gt;Availability Zone&lt;/strong&gt; choose &lt;code&gt;us-east-1a&lt;/code&gt; and then click on &lt;strong&gt;Create&lt;/strong&gt; button&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now you should see a File system created named &lt;strong&gt;myEFS&lt;/strong&gt; under &lt;strong&gt;File systems&lt;/strong&gt; section.&lt;/p&gt;
&lt;p&gt;&lt;img alt="EFS File system created" src="http://localhost:8080/images/aws-academy/25000000-efs-filesystem-created.png"&gt;&lt;/p&gt;
&lt;h4 id="step-3-customise-efs-configure-security-groups"&gt;Step 3) Customise EFS &amp;amp; Configure Security Groups&lt;/h4&gt;
&lt;p&gt;Because we used the quick create option and didn't customize our EFS file system, it was created with several default settings such as:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Automatic backups&lt;/strong&gt;: Enabled&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lifecycle management&lt;/strong&gt;: EFS Intelligent tiering is enabled, and configured to transition files from Standard to Standard-Infrequent Access tier after 30 days of inactivity and to transition out on first access.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Performance mode&lt;/strong&gt;: Only &lt;strong&gt;General Purpose&lt;/strong&gt; is available for &lt;strong&gt;One ZOne&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Throughput mode&lt;/strong&gt;: &lt;strong&gt;Bursting&lt;/strong&gt; is selected by default. The alternative is &lt;strong&gt;Provisioned&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Encryption&lt;/strong&gt;: Enabled&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Network access&lt;/strong&gt;: Default VPC, default subnet, and default security group associated with the Availability Zone is selected&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;While 1 - 5 are file, we need to modify the &lt;strong&gt;Network access&lt;/strong&gt; to enable the EFS to communicate with the EC2 instance on port 2049.&lt;/p&gt;
&lt;p&gt;A) In the left hand panel, &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Click on &lt;strong&gt;File systems&lt;/strong&gt;, then under &lt;strong&gt;File system&lt;/strong&gt;, click on &lt;strong&gt;myEFS&lt;/strong&gt;. &lt;/li&gt;
&lt;li&gt;At the bottom, select the &lt;strong&gt;Network&lt;/strong&gt; tab. &lt;/li&gt;
&lt;li&gt;Then click on &lt;strong&gt;Manage&lt;/strong&gt; button after &lt;strong&gt;Mount target state&lt;/strong&gt; becomes &lt;strong&gt;Available&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="EFS Network Settings" src="http://localhost:8080/images/aws-academy/25000000-network-settings.png"&gt;&lt;/p&gt;
&lt;p&gt;B) In the &lt;strong&gt;Network access&lt;/strong&gt; page, under &lt;strong&gt;Mount targets&lt;/strong&gt;, &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Remove the existing default &lt;strong&gt;Security Group&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Click on the dropdown under &lt;strong&gt;Security Groups&lt;/strong&gt; and select &lt;code&gt;NFS|sg-xxxxxxx&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Then save the changes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="change-efs-security-group" src="http://localhost:8080/images/aws-academy/25000000-change-efs-security-group.gif"&gt;&lt;/p&gt;
&lt;h4 id="step-4-create-the-ec2-ubuntu-linux-instance"&gt;Step 4) Create the EC2 Ubuntu Linux instance&lt;/h4&gt;
&lt;p&gt;Search for EC2, and click on EC2 to go to the EC2 page. In the left hand navigation panel, click on &lt;strong&gt;Instances&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Now on top right, click on &lt;strong&gt;Launch instances&lt;/strong&gt;, then&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Name and tags&lt;/strong&gt; section, provide a name. I Chose &lt;code&gt;myServer1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Application and OS Images&lt;/strong&gt; section, select &lt;strong&gt;Ubuntu&lt;/strong&gt;, then from the dropdown, select &lt;strong&gt;Ubuntu 20.04&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Instance type&lt;/strong&gt; section, select &lt;strong&gt;t2.micro&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Key pair&lt;/strong&gt; section, select any keypair, or create one if you don't have one.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Network setting&lt;/strong&gt;, click on &lt;strong&gt;Edit&lt;/strong&gt; button, then change the subnet to the one in &lt;code&gt;us-east-1&lt;/code&gt;. Then click on &lt;strong&gt;Select existing security group&lt;/strong&gt; and from dropdown, select &lt;code&gt;DMZ|sg-xxxxxxx&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Configure storage&lt;/strong&gt;, leave unchanged&lt;/li&gt;
&lt;li&gt;Then click on &lt;strong&gt;Launch instance&lt;/strong&gt; button.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="step-5-login-to-the-ec2-instance"&gt;Step 5) Login to the EC2 instance&lt;/h4&gt;
&lt;p&gt;Go to the EC2 console and click on &lt;strong&gt;Instances&lt;/strong&gt;. Click on the instance you created in the previous step, then on top right, click on &lt;strong&gt;Connect&lt;/strong&gt;. &lt;/p&gt;
&lt;p&gt;In &lt;strong&gt;Connect to instance&lt;/strong&gt; dialog, click on &lt;strong&gt;EC2 Instance Connect&lt;/strong&gt; and then at the bottom right, click on &lt;strong&gt;Connect&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Install NFS Utilities and enable it to start on startup.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo apt install nfs-common -y &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    sudo systemctl status nfs-utils
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id="step-6-mount-the-efs-drive"&gt;Step 6) Mount the EFS Drive&lt;/h4&gt;
&lt;p&gt;Go to the EFS, click on the EFS file system you created, e.g. &lt;strong&gt;myEFS&lt;/strong&gt;. At the bottom, click on network and note the IP address.  &lt;/p&gt;
&lt;p&gt;Next, mount the EFS drive to the EC2 instance. Replace &lt;code&gt;&amp;lt;EFS IP&amp;gt;&lt;/code&gt; with the IP address from above.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;mkdir efs
sudo mount -t nfs4 -o &lt;span class="nv"&gt;nfsvers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;.1,rsize&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1048576&lt;/span&gt;,wsize&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1048576&lt;/span&gt;,hard,timeo&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;600&lt;/span&gt;,retrans&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;,noresvport &amp;lt;EFS IP&amp;gt;:/ efs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Alternatively, then click on &lt;em&gt;Attach&lt;/em&gt;&lt;em&gt;. In the subsequent dialog, select on &lt;/em&gt;&lt;em&gt;Mount via IP&lt;/em&gt;*. Copy the command provided and run it in the EC2 Ubuntu terminal from previous step.&lt;/p&gt;
&lt;p&gt;&lt;img alt="EFS mount command" src="http://localhost:8080/images/aws-academy/25000000-mount-command.png"&gt;&lt;/p&gt;
&lt;p&gt;Next, run the below command in the EC2 terminal.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;lsblk
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You should now see the EFS drive mounted as a new partition.&lt;/p&gt;
&lt;p&gt;&lt;img alt="25000000-check-efs-mount-lsblk" src="http://localhost:8080/images/aws-academy/25000000-check-efs-mount-lsblk.png"&gt;&lt;/p&gt;
&lt;h4 id="step-7-test-the-mounted-efs-drive"&gt;Step 7) Test the mounted EFS Drive&lt;/h4&gt;
&lt;p&gt;A) Now let's download a few files and save them in the directory.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo curl -X GET https://cataas.com/cat -o efs/myFile.jpg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;B) List the files&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ls -al efs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt="25000000-output-server1" src="http://localhost:8080/images/aws-academy/25000000-output-server1.png"&gt;&lt;/p&gt;
&lt;p&gt;C) Now follow steps 4, 5 and 6 again to create another EC2 instance. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Follow &lt;a href="#step-4-create-the-ec2-ubuntu-linux-instance"&gt;step 4&lt;/a&gt; to create another EC2 instance named &lt;code&gt;myServer2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Follow &lt;a href="#step-5-login-to-the-ec2-instance"&gt;step 5&lt;/a&gt; lo login to the server&lt;/li&gt;
&lt;li&gt;Follow &lt;a href="#step-6-mount-the-efs-drive"&gt;step 6&lt;/a&gt; to mount the EFS drive on the new server&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;D) Now run &lt;code&gt;ls -al efs&lt;/code&gt; to check the contents of the mounted directory. This should be the same as that of &lt;strong&gt;myServer1&lt;/strong&gt; above.&lt;/p&gt;
&lt;p&gt;&lt;img alt="25000000-efs-check-server2" src="http://localhost:8080/images/aws-academy/25000000-efs-check-server2.png"&gt;&lt;/p&gt;
&lt;h3 id="mount-amazon-efs-to-ec2-ubuntu-linux-using-aws-cli"&gt;Mount Amazon EFS to EC2 Ubuntu Linux using AWS CLI&lt;/h3&gt;
&lt;h4 id="step-1-create-security-groups"&gt;Step 1: Create Security Groups&lt;/h4&gt;
&lt;p&gt;A) We need to create two security groups as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;DMZ SG&lt;/strong&gt; - This SG is used to allow traffic from the internet to the EC2 instance, i.e. port 80 or 443.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NFS SG&lt;/strong&gt; - This SG is used to allow traffic from the members of the DMZ SG to the EFS drive over port 2049.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;DMZ_SG_ID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;aws ec2 create-security-group --group-name &lt;span class="s2"&gt;&amp;quot;DMZ&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  --description &lt;span class="s2"&gt;&amp;quot;Security group for DMZ&amp;quot;&lt;/span&gt; --query &lt;span class="s2"&gt;&amp;quot;GroupId&amp;quot;&lt;/span&gt; --output text&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nv"&gt;NFS_SG_ID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;aws ec2 create-security-group --group-name &lt;span class="s2"&gt;&amp;quot;NFS&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  --description &lt;span class="s2"&gt;&amp;quot;Security group for NFS&amp;quot;&lt;/span&gt; --query &lt;span class="s2"&gt;&amp;quot;GroupId&amp;quot;&lt;/span&gt; --output text&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Created security groups: DMZ: &lt;/span&gt;&lt;span class="nv"&gt;$DMZ_SG_ID&lt;/span&gt;&lt;span class="s2"&gt; and NFS: &lt;/span&gt;&lt;span class="nv"&gt;$NFS_SG_ID&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will create the security groups and assign the IDs to the variables.&lt;/p&gt;
&lt;p&gt;B) Next open port 80 &amp;amp; 22 access from anywhere (CIDR 0.0.0.0/0) for DMZ security group&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;aws ec2 authorize-security-group-ingress --group-id &lt;span class="nv"&gt;$DMZ_SG_ID&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    --protocol tcp --port &lt;span class="m"&gt;80&lt;/span&gt; --cidr &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0/0 &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    aws ec2 authorize-security-group-ingress --group-id &lt;span class="nv"&gt;$DMZ_SG_ID&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    --protocol tcp --port &lt;span class="m"&gt;22&lt;/span&gt; --cidr &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0/0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Next allow access from DMZ SG to NFS SG over port 2049.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;aws ec2 authorize-security-group-ingress --group-id &lt;span class="nv"&gt;$NFS_SG_ID&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    --source-group &lt;span class="nv"&gt;$DMZ_SG_ID&lt;/span&gt; --protocol tcp --port &lt;span class="m"&gt;2049&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id="step-2-create-efs-file-system"&gt;Step 2: Create EFS File System&lt;/h4&gt;
&lt;p&gt;A) Create a new EFS file system named myEFS in &lt;code&gt;us-east-1a&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;EFS_ID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;aws efs create-file-system &lt;span class="se"&gt;\&lt;/span&gt;
    --availability-zone-name &lt;span class="s2"&gt;&amp;quot;us-east-1a&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    --encrypted &lt;span class="se"&gt;\&lt;/span&gt;
    --tags &lt;span class="s2"&gt;&amp;quot;Key=Name,Value=myEFS&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    --query &lt;span class="s2"&gt;&amp;quot;FileSystemId&amp;quot;&lt;/span&gt; --output text&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Created EFS file system: &lt;/span&gt;&lt;span class="nv"&gt;$EFS_ID&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;B) By default, AWS CLI doesn't create a &lt;strong&gt;Mount target&lt;/strong&gt;, assign &lt;strong&gt;Security group&lt;/strong&gt;, configure &lt;strong&gt;Subnet&lt;/strong&gt;, or configure &lt;strong&gt;Lifecycle management&lt;/strong&gt;. while we don't need to configure the latter, we do need to create a &lt;strong&gt;Mount target&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Creating &lt;strong&gt;Mount target&lt;/strong&gt; also requires assigning a &lt;strong&gt;Security group&lt;/strong&gt; and choosing the &lt;strong&gt;Subnet&lt;/strong&gt; where the &lt;strong&gt;Mount target&lt;/strong&gt; will be created. We know the &lt;strong&gt;Security group&lt;/strong&gt; and its ID already, but we need to find the ID of the default &lt;strong&gt;Subnet&lt;/strong&gt; for the &lt;code&gt;us-east-1a&lt;/code&gt; availability zone.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;SUBNET_ID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;aws ec2 describe-subnets &lt;span class="se"&gt;\&lt;/span&gt;
    --filters &lt;span class="s2"&gt;&amp;quot;Name=availability-zone,Values=us-east-1a&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    --query &lt;span class="s2"&gt;&amp;quot;Subnets[0].SubnetId&amp;quot;&lt;/span&gt; --output text&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Subnet ID for us-east-1a: &lt;/span&gt;&lt;span class="nv"&gt;$SUBNET_ID&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;C) Now create the &lt;strong&gt;Mount target&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;aws efs create-mount-target --file-system-id &lt;span class="nv"&gt;$EFS_ID&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    --subnet-id &lt;span class="nv"&gt;$SUBNET_ID&lt;/span&gt; --security-groups &lt;span class="nv"&gt;$NFS_SG_ID&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will output the following data, note down the &lt;code&gt;IpAddress&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;OwnerId&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;268674271179&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;MountTargetId&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;fsmt-0955bbcc67dccca55&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;FileSystemId&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;fs-051523e63a4561e3d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;SubnetId&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;subnet-0b0a5941&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;LifeCycleState&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;creating&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;IpAddress&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;172.31.23.189&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;NetworkInterfaceId&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;eni-057847b7e1c9adf1f&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;AvailabilityZoneId&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;use1-az4&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;AvailabilityZoneName&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;us-east-1a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;VpcId&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;vpc-7918c403&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id="step-3-create-the-ec2-ubuntu-instance"&gt;Step 3: Create the EC2 Ubuntu instance&lt;/h4&gt;
&lt;p&gt;First open the AWS console, go to &lt;strong&gt;EC2 -&amp;gt; Instances -&amp;gt; Launch instances&lt;/strong&gt;. In the &lt;strong&gt;Application and OS Images&lt;/strong&gt; section, select &lt;code&gt;Ubuntu&lt;/code&gt; and then from the dropdown select &lt;code&gt;Ubuntu 20.04 LTS (HVM)&lt;/code&gt;. Note the AMI ID at the bottom. &lt;/p&gt;
&lt;p&gt;&lt;img alt="25000000-ami-id" src="http://localhost:8080/images/aws-academy/25000000-ami-id.png"&gt;&lt;/p&gt;
&lt;p&gt;A) Create a new EC2 instance named &lt;code&gt;myServer1&lt;/code&gt; in &lt;code&gt;us-east-1a&lt;/code&gt;. and store the IP address of the instance in a variable.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;MYSERVER1_ID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;aws ec2 run-instances &lt;span class="se"&gt;\&lt;/span&gt;
    --image-id ami-08d4ac5b634553e16 &lt;span class="se"&gt;\&lt;/span&gt;
    --count &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    --instance-type t2.micro &lt;span class="se"&gt;\&lt;/span&gt;
    --key-name myKeyPair &lt;span class="se"&gt;\&lt;/span&gt;
    --security-group-ids &lt;span class="nv"&gt;$DMZ_SG_ID&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    --subnet-id &lt;span class="nv"&gt;$SUBNET_ID&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    --associate-public-ip-address &lt;span class="se"&gt;\&lt;/span&gt;
    --tag-specifications &lt;span class="s2"&gt;&amp;quot;ResourceType=instance,Tags=[{Key=Name,Value=myServer1}]&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    --query &lt;span class="s2"&gt;&amp;quot;Instances[0].InstanceId&amp;quot;&lt;/span&gt; --output text&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Created EC2 instance myServer1: &lt;/span&gt;&lt;span class="nv"&gt;$MYSERVER1_ID&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;B) Get the IP address from instance metadata.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;MYSERVER1_IP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;aws ec2 describe-instances &lt;span class="se"&gt;\&lt;/span&gt;
    --instance-ids &lt;span class="nv"&gt;$MYSERVER1_ID&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    --query &lt;span class="s2"&gt;&amp;quot;Reservations[0].Instances[0].PublicIpAddress&amp;quot;&lt;/span&gt; --output text&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;EC2 instance myServer1 IP: &lt;/span&gt;&lt;span class="nv"&gt;$MYSERVER1_IP&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;C) Check if the instance state is running and status checks are complete.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;aws ec2 &lt;span class="nb"&gt;wait&lt;/span&gt; instance-status-ok --instance-ids &lt;span class="nv"&gt;$MYSERVER1_ID&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id="step-4-login-to-the-ec2-instance"&gt;Step 4: Login to the EC2 instance&lt;/h4&gt;
&lt;p&gt;Make sure you have a keypair downloaded and parth is specified correctly below&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ssh -i ~/.ssh/myKeyPair.pem ubuntu@&lt;span class="nv"&gt;$MYSERVER1_IP&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;In case you get &lt;code&gt;SSH Permission are too open&lt;/code&gt; error, change the file's permission to &lt;code&gt;600&lt;/code&gt; by running &lt;code&gt;chmod 600 ~/.ssh/myKeyPair.pem&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Install the NFS Utilities&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo apt install nfs-common -y &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    sudo systemctl status nfs-utils
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id="step-5-mount-the-efs-file-system"&gt;Step 5: Mount the EFS File System&lt;/h4&gt;
&lt;p&gt;Next, mount the EFS drive to the EC2 instance. Replace &lt;EFS IP&gt; with the IP address of the Mount target from step 2C above&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;mkdir efs
sudo mount -t nfs4 -o &lt;span class="nv"&gt;nfsvers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;.1,rsize&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1048576&lt;/span&gt;,wsize&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1048576&lt;/span&gt;,hard,timeo&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;600&lt;/span&gt;,retrans&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;,noresvport &amp;lt;EFS IP&amp;gt;:/ efs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Run the following command in the EC2 terminal to see the EFS drive mounted.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;lsblk
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt="25000000-check-efs-mount-lsblk" src="http://localhost:8080/images/aws-academy/25000000-check-efs-mount-lsblk.png"&gt;&lt;/p&gt;
&lt;h4 id="step-6-test-the-mounted-efs-drive"&gt;Step 6: Test the mounted EFS Drive&lt;/h4&gt;
&lt;p&gt;A) Download a file and save them in EFS drive.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo curl -X GET https://cataas.com/cat -o efs/myFile.jpg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;B) List the files&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ls -al efs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt="25000000-output-server1" src="http://localhost:8080/images/aws-academy/25000000-output-server1.png"&gt;&lt;/p&gt;
&lt;p&gt;B) Logout from &lt;code&gt;myServer1&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;C) Now back in your AWS CLI, create a new instance named &lt;code&gt;myServer2&lt;/code&gt; in &lt;code&gt;us-east-1a&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;MYSERVER2_ID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;aws ec2 run-instances &lt;span class="se"&gt;\&lt;/span&gt;
    --image-id ami-08d4ac5b634553e16 &lt;span class="se"&gt;\&lt;/span&gt;
    --count &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    --instance-type t2.micro &lt;span class="se"&gt;\&lt;/span&gt;
    --key-name myKeyPair &lt;span class="se"&gt;\&lt;/span&gt;
    --security-group-ids &lt;span class="nv"&gt;$DMZ_SG_ID&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    --subnet-id &lt;span class="nv"&gt;$SUBNET_ID&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    --associate-public-ip-address &lt;span class="se"&gt;\&lt;/span&gt;
    --tag-specifications &lt;span class="s2"&gt;&amp;quot;ResourceType=instance,Tags=[{Key=Name,Value=myServer2}]&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    --query &lt;span class="s2"&gt;&amp;quot;Instances[0].InstanceId&amp;quot;&lt;/span&gt; --output text&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Created EC2 instance myServer2: &lt;/span&gt;&lt;span class="nv"&gt;$MYSERVER2_ID&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Get the IP address from instance metadata.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;MYSERVER2_IP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;aws ec2 describe-instances &lt;span class="se"&gt;\&lt;/span&gt;
    --instance-ids &lt;span class="nv"&gt;$MYSERVER2_ID&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    --query &lt;span class="s2"&gt;&amp;quot;Reservations[0].Instances[0].PublicIpAddress&amp;quot;&lt;/span&gt; --output text&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;EC2 instance myServer2 IP: &lt;/span&gt;&lt;span class="nv"&gt;$MYSERVER2_IP&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;D) Check if the instance state is running and status checks are complete.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;aws ec2 &lt;span class="nb"&gt;wait&lt;/span&gt; instance-status-ok --instance-ids &lt;span class="nv"&gt;$MYSERVER2_ID&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;E) After the above command wait is complete, login to the EC2 instance &lt;code&gt;myServer2&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ssh -i ~/.ssh/myKeyPair.pem ubuntu@&lt;span class="nv"&gt;$MYSERVER2_IP&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;F) Follow the &lt;a href="#step-5-mount-the-efs-file-system"&gt;mount instructions in Step 5&lt;/a&gt; above to mount the EFS drive.&lt;/p&gt;
&lt;p&gt;Finally, run &lt;code&gt;ls -al efs&lt;/code&gt; to see the files in the EFS drive that was downloaded from &lt;code&gt;myServer1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="25000000-efs-check-server2" src="http://localhost:8080/images/aws-academy/25000000-efs-check-server2.png"&gt;&lt;/p&gt;
&lt;p&gt;Logout from EC2 instance &lt;code&gt;myServer2&lt;/code&gt; before proceeding to next step by running &lt;code&gt;exit&lt;/code&gt;&lt;/p&gt;
&lt;h4 id="step-7-clean-up"&gt;Step 7: Clean up&lt;/h4&gt;
&lt;p&gt;Clean up the EC2 instances and wait for them to terminate.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;aws ec2 terminate-instances --instance-ids &lt;span class="nv"&gt;$MYSERVER1_ID&lt;/span&gt; &lt;span class="nv"&gt;$MYSERVER2_ID&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  aws ec2 &lt;span class="nb"&gt;wait&lt;/span&gt; instance-terminated --instance-ids &lt;span class="nv"&gt;$MYSERVER1_ID&lt;/span&gt; &lt;span class="nv"&gt;$MYSERVER2_ID&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Next, we need to delete the &lt;strong&gt;Mount target&lt;/strong&gt;. First, fetch ID of the Mount target. You can also manually get this from the output in step 2C.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;MOUNT_TARGET_ID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;aws efs describe-mount-targets &lt;span class="se"&gt;\&lt;/span&gt;
    --file-system-id &lt;span class="nv"&gt;$EFS_ID&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    --query &lt;span class="s2"&gt;&amp;quot;MountTargets[0].MountTargetId&amp;quot;&lt;/span&gt; --output text&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;EFS Mount Target ID: &lt;/span&gt;&lt;span class="nv"&gt;$MOUNT_TARGET_ID&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then, delete the Mount target.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;aws efs delete-mount-target --mount-target-id &lt;span class="nv"&gt;$MOUNT_TARGET_ID&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally, delete the EFS file system.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;aws efs delete-file-system --file-system-id &lt;span class="nv"&gt;$EFS_ID&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="AWS Academy"></category><category term="aws"></category><category term="linux"></category></entry><entry><title>How to install and configure AWS CLI on Linux with Autocompletion</title><link href="http://localhost:8080/aws-academy/how-to-install-and-configure-aws-cli-on-linux-with-autocompletion" rel="alternate"></link><published>2022-06-12T00:00:00+00:00</published><updated>2022-06-12T00:00:00+00:00</updated><author><name>Rehan Haider</name></author><id>tag:localhost,2022-06-12:/aws-academy/how-to-install-and-configure-aws-cli-on-linux-with-autocompletion</id><summary type="html">&lt;p&gt;A guide to how to install and configure AWS CLI on Ubuntu Linux with Autocompletion turned on&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#what-is-aws-cli"&gt;What is AWS CLI?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#installing-aws-cli-on-ubuntu-linux"&gt;Installing AWS CLI on Ubuntu Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#configuring-aws-cli-for-use"&gt;Configuring AWS CLI for use&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#create-a-new-iam-user-account-with-admin-access"&gt;Create a new IAM User Account with Admin Access&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#configure-aws-cli-to-use-the-new-iam-user-account"&gt;Configure AWS CLI to use the new IAM User Account&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#configuring-aws-cli-for-autocompletion"&gt;Configuring AWS CLI for Autocompletion&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#add-aws_completer-to-the-path"&gt;Add aws_completer to the PATH&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#enable-command-completion-in-the-shell"&gt;Enable command completion in the shell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#verify-that-the-command-completion-is-working"&gt;Verify that the command completion is working&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;AWS provides several tools to help you manage and automate your AWS environment. Some of the key ones are&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;AWS CLI&lt;/strong&gt; - The command line interface for AWS&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AWS SAM CLI&lt;/strong&gt; - The command line interface for AWS Serverless Application Model&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AWS CDK&lt;/strong&gt; - The AWS Cloud Development Kit&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AWS Chalice&lt;/strong&gt; - The AWS Serverless Development Framework&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="what-is-aws-cli"&gt;What is AWS CLI?&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-welcome.html"&gt;AWS CLI&lt;/a&gt; (Command Line Interface) is an &lt;a href="https://github.com/aws/aws-cli"&gt;open source tool hosted on GitHub&lt;/a&gt; that allows you to interact with AWS services from the command line shell on Linux, Mac OS, or Windows. &lt;/p&gt;
&lt;p&gt;You can use AWS CLI on either &lt;a href="https://www.gnu.org/software/bash/"&gt;bash&lt;/a&gt;, &lt;a href="http://www.zsh.org/"&gt;zsh&lt;/a&gt;, or &lt;a href="https://www.tcsh.org/"&gt;tcsh&lt;/a&gt; shells on Linux/MacOS and PowerShell on Windows. Additionally, AWS CLI is installed by default on all AWS Linux EC2 instances.&lt;/p&gt;
&lt;p&gt;AWS CLI can manage all IaaS (Infrastructure as a Service) services that are available in AWS Management Console.&lt;/p&gt;
&lt;h2 id="installing-aws-cli-on-ubuntu-linux"&gt;Installing AWS CLI on Ubuntu Linux&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Step 1)&lt;/strong&gt; First, update your Ubuntu Linux system and install &lt;code&gt;unzip&lt;/code&gt; and &lt;code&gt;curl&lt;/code&gt; packages.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo apt update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo apt upgrade -y &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo apt install unzip curl -y
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 2)&lt;/strong&gt; Then download &amp;amp; unzip AWS CLI.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;curl &lt;span class="s2"&gt;&amp;quot;https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip&amp;quot;&lt;/span&gt; -o &lt;span class="s2"&gt;&amp;quot;awscliv2.zip&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
   &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; unzip awscliv2.zip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 3)&lt;/strong&gt; Finally, install AWS CLI.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo ./aws/install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Verify that you can use the AWS CLI by running the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;aws --version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="configuring-aws-cli-for-use"&gt;Configuring AWS CLI for use&lt;/h2&gt;
&lt;p&gt;AWS CLI relies on &lt;strong&gt;"Programmatic Access"&lt;/strong&gt; credentials to access AWS services.&lt;/p&gt;
&lt;p&gt;Ideally, you should create an IAM User Account with only programmatic access to use with AWS CLI as shown below.&lt;/p&gt;
&lt;h3 id="create-a-new-iam-user-account-with-admin-access"&gt;Create a new IAM User Account with Admin Access&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Login to &lt;a href="https://console.aws.amazon.com/"&gt;AWS Management Console&lt;/a&gt; and navigate to &lt;a href="https://console.aws.amazon.com/iam/home"&gt;IAM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;On the left navigation pane, click on &lt;strong&gt;Users&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;CLick on &lt;strong&gt;Add users&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Choose a username &amp;amp; select only &lt;strong&gt;Programmatic access&lt;/strong&gt; under &lt;strong&gt;Select AWS access type&lt;/strong&gt;, then click &lt;strong&gt;Next: Permissions&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="Add AWS User" src="http://localhost:8080/images/aws-academy/12500000-aws-iam-type.png"&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Then click on &lt;strong&gt;Attach existing policies&lt;/strong&gt; and select &lt;strong&gt;AdministratorAccess&lt;/strong&gt; from the list of available policies. Then click &lt;strong&gt;Next: Tags&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;You can leave the &lt;strong&gt;Tags&lt;/strong&gt; empty and click &lt;strong&gt;Next: Review&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Create user&lt;/strong&gt; to create your new IAM User Account&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Keep this window open for now, and notice the &lt;strong&gt;Access key ID&lt;/strong&gt; &amp;amp; &lt;strong&gt;Secret access key&lt;/strong&gt;. This will be needed in next step.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="admonition danger"&gt;
&lt;p class="admonition-title"&gt;WARNING: Never store this credentials anywhere or share them with anyone. An attacker can user your credentials to create AWS resources in your account. If you need to reconfigure, you can generate a new credentials from IAM screen.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="Add AWS User" src="http://localhost:8080/images/aws-academy/12500000-aws-new-iam-user.png"&gt;&lt;/p&gt;
&lt;h3 id="configure-aws-cli-to-use-the-new-iam-user-account"&gt;Configure AWS CLI to use the new IAM User Account&lt;/h3&gt;
&lt;p&gt;Open a terminal and run the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;aws configure
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will start an interactive session, copy paste your access keys and secret access keys that was generated in previous step when prompted&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;aws configure
AWS Access Key ID &lt;span class="o"&gt;[&lt;/span&gt;None&lt;span class="o"&gt;]&lt;/span&gt;: &amp;lt;your access key id&amp;gt;
AWS Secret Access Key &lt;span class="o"&gt;[&lt;/span&gt;None&lt;span class="o"&gt;]&lt;/span&gt;: &amp;lt;your secret access key&amp;gt;
Default region name &lt;span class="o"&gt;[&lt;/span&gt;None&lt;span class="o"&gt;]&lt;/span&gt;: us-east-1
Default output format &lt;span class="o"&gt;[&lt;/span&gt;None&lt;span class="o"&gt;]&lt;/span&gt;: json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="configuring-aws-cli-for-autocompletion"&gt;Configuring AWS CLI for Autocompletion&lt;/h2&gt;
&lt;p&gt;AWS CLI relies on a module named &lt;code&gt;aws_completer&lt;/code&gt; for autocompletion. This module should be installed while installing AWS CLI however, for it to work correctly it requires&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;aws_completer&lt;/code&gt; to be on the &lt;code&gt;PATH&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Enable command completion in the shell&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="add-aws_completer-to-the-path"&gt;Add aws_completer to the PATH&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt;: First, check if the &lt;code&gt;aws_completer&lt;/code&gt; is already on path by running the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;which aws_completer
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This should result in the following output:
&lt;img alt="Which AWS Completer" src="http://localhost:8080/images/aws-academy/12500000-which-aws-completer.png"&gt;&lt;/p&gt;
&lt;p&gt;If you don't see any output, it means that the &lt;code&gt;aws_completer&lt;/code&gt; is not on the &lt;code&gt;PATH&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 2&lt;/strong&gt;: Find &lt;code&gt;aws_completer&lt;/code&gt; executable file by running the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;find / -name aws_completer
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will search for the &lt;code&gt;aws_completer&lt;/code&gt; executable file in your filesystem. E.g. if you scroll through the results, you should see something similar to the following output:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Find AWS Completer" src="http://localhost:8080/images/aws-academy/12500000-aws-completer-path.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 3&lt;/strong&gt;: Identify your shell and add the &lt;code&gt;aws_completer&lt;/code&gt; to the &lt;code&gt;PATH&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Run &lt;code&gt;echo $SHELL&lt;/code&gt; to see what shell you are using. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Echo Shell" src="http://localhost:8080/images/aws-academy/12500000-shell-type.png"&gt;&lt;/p&gt;
&lt;p&gt;If you are using some other shell, you will get a different output.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 4&lt;/strong&gt;: Find the shell configuration file for your shell.&lt;/p&gt;
&lt;p&gt;Depending on the shell you're using, your shell's profile file will be one of the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Bash&lt;/strong&gt;: &lt;code&gt;.bash_profile&lt;/code&gt;, &lt;code&gt;.bash_login&lt;/code&gt;, or &lt;code&gt;.profile&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Zsh&lt;/strong&gt;: &lt;code&gt;.zshrc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tcsh&lt;/strong&gt;: &lt;code&gt;.tcshrc&lt;/code&gt;, &lt;code&gt;.cshrc&lt;/code&gt;, or &lt;code&gt;.login&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Find your shell's profile file by running the following command and look for profile file as per above&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ls -a ~/.bash_profile ~/.bash_login ~/.profile ~/.zshrc ~/.tcshrc ~/.cshrc ~/.login
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You will get a bunch of "&lt;em&gt;No such file or directory&lt;/em&gt;" errors except for the shell profile file.&lt;/p&gt;
&lt;p&gt;E.g. in my case, I am using &lt;code&gt;bash&lt;/code&gt; and my profile file is &lt;code&gt;.profile&lt;/code&gt; thus running the above command will result in the following output:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Find Shell Profile" src="http://localhost:8080/images/aws-academy/12500000-bash-profile.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 5&lt;/strong&gt;: Add the &lt;code&gt;aws_completer&lt;/code&gt; to the &lt;code&gt;PATH&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now open the shell profile using any text editor, e.g. &lt;code&gt;vi&lt;/code&gt; or &lt;code&gt;nano&lt;/code&gt; and add the following line to the end of the file and replace &lt;code&gt;&amp;lt;path to aws_completer directory&amp;gt;&lt;/code&gt; with the path to the &lt;code&gt;aws_completer&lt;/code&gt; executable file discovered in step 2:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;export PATH=&amp;lt;path to aws_completer directory&amp;gt;:$PATH
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 6&lt;/strong&gt;: Restart your shell&lt;/p&gt;
&lt;p&gt;Depending upon the shell, restart your shell by running the following command by replacing &lt;code&gt;&amp;lt;your profile file&amp;gt;&lt;/code&gt; with the name of your shell profile file as per step 4:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;source ~/&amp;lt;your profile file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;E.g. in my case, this would be &lt;code&gt;source ~/.profile&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="enable-command-completion-in-the-shell"&gt;Enable command completion in the shell&lt;/h3&gt;
&lt;p&gt;After you have added the &lt;code&gt;aws_completer&lt;/code&gt; to the &lt;code&gt;PATH&lt;/code&gt;, you need to perform a few steps to enable command completion depending on your shell.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;bash&lt;/strong&gt;: Open the &lt;code&gt;.bashrc&lt;/code&gt; file in your home directory and add the following line to the end of the file:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;complete -C &amp;#39;&amp;lt;path to aws_completer directory&amp;gt;/aws_completer&amp;#39; aws
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;E.g. in my case, the above would be &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;complete -C &amp;#39;/usr/local/bin/aws_completer&amp;#39; aws
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;zsh&lt;/strong&gt;: Open the &lt;code&gt;.zshrc&lt;/code&gt; file in your home directory and add the following line to the end of the file:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;autoload bashcompinit &amp;amp;&amp;amp; bashcompinit
autoload -Uz compinit &amp;amp;&amp;amp; compinit
complete -C &amp;#39;&amp;lt;path to aws_completer directory&amp;gt;/aws_completer&amp;#39; aws
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;tcsh&lt;/strong&gt;: Open the &lt;code&gt;.tcshrc&lt;/code&gt; file in your home directory and add the following line to the end of the file:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;complete aws &amp;#39;p/*/`aws_completer`/&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="verify-that-the-command-completion-is-working"&gt;Verify that the command completion is working&lt;/h3&gt;
&lt;p&gt;Reload your shell again as per step 6.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;source ~/&amp;lt;your profile file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then type &lt;code&gt;aws s3&lt;/code&gt; and press &lt;code&gt;TAB&lt;/code&gt; to see the list of available commands.&lt;/p&gt;
&lt;p&gt;You AWS CLI is configure and autocomplete is working.&lt;/p&gt;</content><category term="AWS Academy"></category><category term="aws"></category><category term="linux"></category></entry></feed>