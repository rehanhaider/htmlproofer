<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>CloudBytes/dev&gt; - Snippets</title><link href="http://localhost:8080/" rel="alternate"></link><link href="http://localhost:8080/feeds/snippets.atom.xml" rel="self"></link><id>http://localhost:8080/</id><updated>2022-06-30T00:00:00+00:00</updated><entry><title>Mount AWS Credentials on VSCode Devcontainers</title><link href="http://localhost:8080/snippets/mount-aws-credentials-on-vscode-devcontainers" rel="alternate"></link><published>2022-06-28T00:00:00+00:00</published><updated>2022-06-28T00:00:00+00:00</updated><author><name>Rehan Haider</name></author><id>tag:localhost,2022-06-28:/snippets/mount-aws-credentials-on-vscode-devcontainers</id><summary type="html">&lt;p&gt;A guide to install, configure and run selenium in Jupyter Notebook on WSL2 or Ubuntu&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've written in past about my &lt;a href="http://localhost:8080/snippets/use-vscode-devcontainers-instead-of-python-venv"&gt;preference of using VSCode's devcontainers for developing Python&lt;/a&gt; applications. &lt;/p&gt;
&lt;p&gt;While I work extensively with Python &amp;amp; AWS, one of the problems I've faced is that everytime I create a new devcontainer or rebuild one, I need to enter my AWS credentials again.&lt;/p&gt;
&lt;p&gt;So I set about fixing this problem. I explored the idea of creating environmental variables and loading them directly into the container. I thought about copying the credentials file itself onto the container during build. But of of them weren't clean ideas and had their own problems. &lt;/p&gt;
&lt;p&gt;Turns out all it requires is a simple statement on &lt;code&gt;devcontainer.json&lt;/code&gt; file. &lt;/p&gt;
&lt;h2 id="how-to-mount-aws-credentials-on-vscode-devcontainers"&gt;How to mount AWS credentials on VSCode Devcontainers&lt;/h2&gt;
&lt;p&gt;Edit the &lt;code&gt;.devcontainer/devcontainer.json&lt;/code&gt; file, add the following line after &lt;code&gt;build&lt;/code&gt; instructions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="nt"&gt;&amp;quot;mounts&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;source=${localEnv:HOME}/.aws,target=/home/vscode/.aws,type=bind,consistency=cached&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;This will only work if you're using WSL2-backed devcontainers.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you are using pure Windows based devcontainers, the above instructions may not work as I discovered after following &lt;a href="https://prabhatsharma.in/blog/vscode-dev-container-aws-credentials/"&gt;this guide&lt;/a&gt;.&lt;/p&gt;</content><category term="Snippets"></category><category term="python"></category><category term="aws"></category><category term="vscode"></category></entry><entry><title>Run selenium in Jupyter Notebook on WSL2 or Ubuntu</title><link href="http://localhost:8080/snippets/run-selenium-in-jupyter-notebook-on-wsl2-or-ubuntu" rel="alternate"></link><published>2022-06-26T00:00:00+00:00</published><updated>2022-06-26T00:00:00+00:00</updated><author><name>Rehan Haider</name></author><id>tag:localhost,2022-06-26:/snippets/run-selenium-in-jupyter-notebook-on-wsl2-or-ubuntu</id><summary type="html">&lt;p&gt;A guide to install, configure and run selenium in Jupyter Notebook on WSL2 or Ubuntu&lt;/p&gt;</summary><content type="html">&lt;p&gt;We've seen in past how to &lt;a href="http://localhost:8080/snippets/run-selenium-and-chrome-on-wsl2"&gt;install and run Selenium with Python&lt;/a&gt;, in this guide we will try to do the same in Jupyter Notebook on WSL2.&lt;/p&gt;
&lt;p&gt;The instructions should be same for both WSL2 and Ubuntu.&lt;/p&gt;
&lt;h2 id="install-wsl2"&gt;Install WSL2&lt;/h2&gt;
&lt;p&gt;Follow the steps in this &lt;a href="http://localhost:8080/snippets/how-to-install-wsl2-on-windows-1011"&gt;guide to install WSL2&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="install-jupyter-notebook"&gt;Install Jupyter Notebook&lt;/h2&gt;
&lt;p&gt;Follow the steps in this &lt;a href="http://localhost:8080/snippets/running-jupyter-notebook-from-terminal"&gt;guide to install &amp;amp; run Jupyter Notebook&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="install-configure-selenium"&gt;Install &amp;amp; configure Selenium&lt;/h2&gt;
&lt;p&gt;Run the script in this guide to automatically &lt;a href="http://localhost:8080/snippets/run-selenium-and-chrome-on-wsl2#creating-a-script-to-automate-the-process"&gt;install and configure Selenium&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;You can also download &lt;a href="https://github.com/rehanhaider/selenium-wsl2-ubuntu"&gt;this script from GitHub&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If for some reason the script is stuck, press &lt;code&gt;Ctrl+C&lt;/code&gt; to stop the script and rerun it. Sometimes, chromedriver download crashes for no reason.&lt;/p&gt;
&lt;h2 id="run-selenium"&gt;Run Selenium&lt;/h2&gt;
&lt;p&gt;A) Start the notebook and import the dependencies.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# In [1]&lt;/span&gt;
&lt;span class="c1"&gt;## Run selenium and chrome driver to scrape data from cloudbytes.dev&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os.path&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.chrome.service&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Service&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.common.by&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;By&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.chrome.options&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Options&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;B) Next, set the chrome options.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# In [2]
## Setup chrome options
chrome_options = Options()
chrome_options.add_argument(&amp;quot;--headless&amp;quot;) # Ensure GUI is off
chrome_options.add_argument(&amp;quot;--no-sandbox&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;C) Now, set the chromedriver and Chrome browser path. Make sure you change &lt;code&gt;cloudbytes&lt;/code&gt; below to your username&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# In [3]

# Set path to chromedriver as per your configuration
homedir = os.path.expanduser(&amp;quot;~&amp;quot;)
webdriver_service = Service(f&amp;quot;{homedir}/chromedriver/stable/chromedriver&amp;quot;)

# Choose Chrome Browser
browser = webdriver.Chrome(service=webdriver_service, options=chrome_options)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;D) Fetch the page.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# In [4]
browser.get(&amp;quot;https://cloudbytes.dev&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;E) Print the description&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# In [5]

description = browser.find_element(By.NAME, &amp;quot;description&amp;quot;).get_attribute(&amp;quot;content&amp;quot;)
print(f&amp;quot;{description}&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;D) Exit the browser&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;# In [6]
browser.quit()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Snippets"></category><category term="python"></category><category term="selenium"></category><category term="wsl2"></category><category term="linux"></category></entry><entry><title>Running Jupyter Notebook from Terminal</title><link href="http://localhost:8080/snippets/running-jupyter-notebook-from-terminal" rel="alternate"></link><published>2022-06-26T00:00:00+00:00</published><updated>2022-06-26T00:00:00+00:00</updated><author><name>Rehan Haider</name></author><id>tag:localhost,2022-06-26:/snippets/running-jupyter-notebook-from-terminal</id><summary type="html">&lt;p&gt;How to install, and run Jupyter Notebook from Terminal&lt;/p&gt;</summary><content type="html">&lt;p&gt;In this specific scenario, we're going to run Jupyter Notebook from WSL2, however, the method can be used in any other Linux environment.&lt;/p&gt;
&lt;h2 id="install-jupyter-notebook"&gt;Install Jupyter Notebook&lt;/h2&gt;
&lt;p&gt;To do so, we will need to&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="#update-system-packages"&gt;Update the packages to latest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#check-if-python-is-installed"&gt;Ensure Python is installed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#check-if-pip-is-installed"&gt;Ensure pip is installed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#install-jupyter-notebook-dependencies"&gt;Install Jupyter Notebook &amp;amp; dependencies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#run-jupyter-notebook"&gt;Run Jupyter Notebook&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="update-system-packages"&gt;Update system packages&lt;/h3&gt;
&lt;p&gt;Run the following command in the terminal to update the system packages:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo apt update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo apt upgrade -y
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="check-if-python-is-installed"&gt;Check if Python is installed&lt;/h3&gt;
&lt;p&gt;Run the below to check the Python version:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python3 --version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you get an error, then you need to install Python by running the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo apt install python3 -y
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="check-if-pip-is-installed"&gt;Check if pip is installed&lt;/h3&gt;
&lt;p&gt;Run the below to check the pip version:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python3 -m pip --version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you get an error, then you need to install pip by running the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo apt install python3-pip -y
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you already have pip installed, upgrade it to the latest version by running the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python3 -m pip install --upgrade pip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="install-jupyter-notebook-dependencies"&gt;Install Jupyter Notebook &amp;amp; dependencies&lt;/h3&gt;
&lt;p&gt;Run the following command to install Jupyter Notebook:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python3 -m pip install jupyter
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="run-jupyter-notebook"&gt;Run Jupyter Notebook&lt;/h2&gt;
&lt;p&gt;Logout &amp;amp; login again and open the terminal.Run the following command to start Jupyter Notebook:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;jupyter notebook
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You should see a message similar to below:&lt;/p&gt;
&lt;p&gt;&lt;img alt="99999958-run-jupyter-notebook" src="http://localhost:8080/images/99999958-run-jupyter-notebook.png"&gt;&lt;/p&gt;
&lt;p&gt;Copy one of two the URLs highlighted as shown above and open it in a browser window. 
This should start the Jupyter Notebook.&lt;/p&gt;</content><category term="Snippets"></category><category term="python"></category><category term="jupyter"></category><category term="wsl2"></category><category term="linux"></category></entry><entry><title>Make Ubuntu Fullscreen on Windows Hyper-V</title><link href="http://localhost:8080/snippets/make-ubuntu-fullscreen-on-windows-hyper-v" rel="alternate"></link><published>2022-03-12T00:00:00+00:00</published><updated>2022-03-12T00:00:00+00:00</updated><author><name>Rehan Haider</name></author><id>tag:localhost,2022-03-12:/snippets/make-ubuntu-fullscreen-on-windows-hyper-v</id><summary type="html">&lt;p&gt;How to run Ubuntu with full resolution in fullscreen mode on Windows Hyper-V&lt;/p&gt;</summary><content type="html">&lt;p&gt;I previously explained how to install Ubuntu 20.04 in a VM on Windows using Hyper-V. However, by default the VM display will not run in full resolution. &lt;/p&gt;
&lt;p&gt;&lt;img alt="99999959-ubuntu-hyperv-low-res" src="http://localhost:8080/images/99999959-ubuntu-hyperv-low-res.png"&gt;&lt;/p&gt;
&lt;h2 id="how-to-run-ubuntu-2004-in-full-resolution-fullscreen-mode"&gt;How to run Ubuntu 20.04 in full resolution &amp;amp; fullscreen mode&lt;/h2&gt;
&lt;p&gt;First, open the terminal and run the following command to open grub settings using nano editor.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo nano /etc/default/grub
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then, change the &lt;code&gt;GRUB_CMDLINE_LINUX_DEFAULT&lt;/code&gt; variable to the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;GRUB_CMDLINE_LINUX_DEFAULT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;quiet splash video=hyperv_fb:1920x1080&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt="99999959-ubuntu-grub-update" src="http://localhost:8080/images/99999959-ubuntu-grub-update.png"&gt;&lt;/p&gt;
&lt;p&gt;Press &lt;code&gt;Ctrl+X&lt;/code&gt; to exit nano editor and then &lt;code&gt;Y&lt;/code&gt; followed by &lt;code&gt;Enter&lt;/code&gt; to save the changes.&lt;/p&gt;
&lt;p&gt;Next, run the following command to update grub settings.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo update-grub
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally, restart Ubuntu by running the following command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo reboot
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, you have Ubuntu running in full screen mode with full resolution.&lt;/p&gt;
&lt;p&gt;&lt;img alt="99999959-ubuntu-hyperv-fullscreen" src="http://localhost:8080/images/99999959-ubuntu-hyperv-fullscreen.png"&gt;&lt;/p&gt;</content><category term="Snippets"></category><category term="linux"></category><category term="windows"></category></entry><entry><title>Install Ubuntu in a VM on Windows using Hyper-V</title><link href="http://localhost:8080/snippets/install-ubuntu-in-a-vm-on-windows-using-hyper-v" rel="alternate"></link><published>2022-02-23T00:00:00+00:00</published><updated>2022-02-23T00:00:00+00:00</updated><author><name>Rehan Haider</name></author><id>tag:localhost,2022-02-23:/snippets/install-ubuntu-in-a-vm-on-windows-using-hyper-v</id><summary type="html">&lt;p&gt;Step by step guide to install Ubuntu 20.04 in a VM on Windows using Hyper-V&lt;/p&gt;</summary><content type="html">&lt;p&gt;I wrote earlier about how to install &lt;a href="http://localhost:8080/snippets/how-to-install-wsl2-on-windows-1011"&gt;Ubuntu 20.04 using WSL2 on Windows&lt;/a&gt;, and also how to &lt;a href="http://localhost:8080/snippets/enable-hyper-v-on-windows-1011-home"&gt;configure Hyper-V on Windows 10/11 Home edition&lt;/a&gt;. IN this post I will show you how to install Ubuntu 20.04 in a VM on Windows using Hyper-V.&lt;/p&gt;
&lt;p&gt;You need to have Hyper-V enabled on your Windows 10/11, you can follow &lt;a href="http://localhost:8080/snippets/enable-hyper-v-on-windows-1011-home"&gt;this guide&lt;/a&gt; to enable it.&lt;/p&gt;
&lt;h2 id="download-the-ubuntu-iso"&gt;Download the Ubuntu ISO&lt;/h2&gt;
&lt;p&gt;Download the &lt;strong&gt;Ubuntu 20.04&lt;/strong&gt; ISO from &lt;a href="https://ubuntu.com/download/desktop"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="create-a-new-vm"&gt;Create a New VM&lt;/h2&gt;
&lt;h3 id="step-1-open-the-hyper-v-manager"&gt;Step 1: Open the Hyper-V Manager&lt;/h3&gt;
&lt;p&gt;Open the start menu and search for "&lt;strong&gt;Hyper-V Manager&lt;/strong&gt;". Click on "&lt;strong&gt;Open&lt;/strong&gt;", to start the &lt;strong&gt;Hyper-V Manager&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="open-hyperv-manager" src="http://localhost:8080/images/99999960-open-hyperv-manager.png"&gt;&lt;/p&gt;
&lt;h3 id="step-2-create-a-new-vm"&gt;Step 2: Create a new VM&lt;/h3&gt;
&lt;p&gt;Next, in the &lt;strong&gt;Hyper-V Manager&lt;/strong&gt;, click on "&lt;strong&gt;New&lt;/strong&gt;" in "&lt;strong&gt;Actions&lt;/strong&gt;" panel on right, then select "&lt;strong&gt;Virtual Machine&lt;/strong&gt;". This will start the "&lt;strong&gt;New Virtual Machine Wizard&lt;/strong&gt;"&lt;/p&gt;
&lt;p&gt;&lt;img alt="hyperv-new" src="http://localhost:8080/images/99999960-hyperv-new.png"&gt;&lt;/p&gt;
&lt;h3 id="step-3-configure-the-vm"&gt;Step 3: Configure the VM&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Before You Begin&lt;/strong&gt; - This is an informational panel, click on &lt;strong&gt;Next&lt;/strong&gt; to continue.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Specify Name and Location&lt;/strong&gt; - Enter a name for the VM. You can leave the location to default. Press &lt;strong&gt;Next&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Specify Generation&lt;/strong&gt; - Select the generation of the VM, choose "&lt;strong&gt;Generation 2&lt;/strong&gt;" and press &lt;strong&gt;Next&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Assign Memory&lt;/strong&gt; - Select the amount of memory to assign to the VM. You can leave the default, I chose 2048 MB. Press &lt;strong&gt;Next&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Configure Networking&lt;/strong&gt; - Click on &lt;strong&gt;Connection&lt;/strong&gt; and choose &lt;strong&gt;Default Switch&lt;/strong&gt;. Press &lt;strong&gt;Next&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Connect Virtual Hard Disk&lt;/strong&gt; - You can leave the defaults. Press &lt;strong&gt;Next&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Installation Options&lt;/strong&gt; - Select the "&lt;strong&gt;Install an operating system from bootable image file&lt;/strong&gt;, browse to select the Ubuntu ISO you downloaded earlier, and press &lt;strong&gt;Next&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Summary&lt;/strong&gt; - Click on &lt;strong&gt;Finish&lt;/strong&gt; to finish configuration and create a VM.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now you should see a new VM in the "Virtual Machines" list.&lt;/p&gt;
&lt;p&gt;&lt;img alt="virtual-machines-list" src="http://localhost:8080/images/99999960-virtual-machines-list.png"&gt;&lt;/p&gt;
&lt;h3 id="configure-boot-options"&gt;Configure Boot Options&lt;/h3&gt;
&lt;p&gt;Before you can start you Ubuntu VM, you need to configure UEFI settings. Right click on the VM you created and select "&lt;strong&gt;Settings&lt;/strong&gt;".&lt;/p&gt;
&lt;p&gt;In the settings menu that opens, click on &lt;strong&gt;Security&lt;/strong&gt;. Then under &lt;strong&gt;Secure Boot&lt;/strong&gt;, check the &lt;strong&gt;Enable Secure Boot&lt;/strong&gt; checkbox then in &lt;strong&gt;Template&lt;/strong&gt; dropdown, choose &lt;strong&gt;Microsoft UEFI Certificate Authority&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Now click on &lt;strong&gt;Apply&lt;/strong&gt; and then on &lt;strong&gt;OK&lt;/strong&gt; to close the settings menu.&lt;/p&gt;
&lt;h3 id="start-the-vm"&gt;Start the VM&lt;/h3&gt;
&lt;p&gt;Now, right click on the VM you want to start, then click on &lt;strong&gt;Connect&lt;/strong&gt;. In the dialog that opens, click on &lt;strong&gt;Start&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="ubuntu-demo-conn" src="http://localhost:8080/images/99999960-ubuntu-demo-conn.png"&gt;&lt;/p&gt;
&lt;p&gt;If you see a boot menu, don't do anything it will skip in a few seconds. &lt;/p&gt;
&lt;p&gt;On the first boot, the Installation Wizard will guide you. Follow the steps to complete the Ubuntu Installation. &lt;/p&gt;
&lt;h2 id="configure-ubuntu-installation"&gt;Configure Ubuntu Installation&lt;/h2&gt;
&lt;p&gt;Follow the below steps, these are recommended by me personally, but you can choose as per your convinience.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Welcome&lt;/strong&gt; - Select the Language (English), then click on &lt;strong&gt;Install Ubuntu&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Keyboard layout&lt;/strong&gt; - Select your keyboard layout and language and press &lt;strong&gt;Continue&lt;/strong&gt;. I chose defaults (English US as both language and keyboard layout).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Updates and other software&lt;/strong&gt; - Leave the defaults, press &lt;strong&gt;Continue&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Installation type&lt;/strong&gt; - Leave the defaults, press &lt;strong&gt;Install Now&lt;/strong&gt;. In the confirmation dialogue for &lt;strong&gt;Write the changes to disks&lt;/strong&gt;, click on &lt;strong&gt;Continue&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Where are you&lt;/strong&gt; - You can choose your timezone, usually the default is correct. Press &lt;strong&gt;Continue&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Who are you&lt;/strong&gt; - You can choose your name, username, password. The computer name is generated automatically, but you can override and choose as per your need. Press &lt;strong&gt;Continue&lt;/strong&gt;. &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This will start the installation process, it will take a few minutes to complete. After the installation is complete, you will get a prompt to restart the VM. Click on &lt;strong&gt;Restart&lt;/strong&gt;. &lt;/p&gt;
&lt;p&gt;If restart process is stuck, go back to the Hyper-V Manager and right click on VM and click on &lt;strong&gt;Turn off&lt;/strong&gt;. Then right click again, click on "&lt;strong&gt;Connect&lt;/strong&gt;" and then click on "&lt;strong&gt;Start&lt;/strong&gt;".&lt;/p&gt;
&lt;h3 id="configure-your-ubuntu-profile"&gt;Configure your Ubuntu Profile&lt;/h3&gt;
&lt;p&gt;On the first login a configuration will guide you through profile settings. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Connect Your Online Accounts&lt;/strong&gt; - Choose one of the accounts in the option or skip by pressing "&lt;strong&gt;Skip&lt;/strong&gt;" on top right.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Livepatch&lt;/strong&gt; - You can setup up Livepatch or skip by pressing "&lt;strong&gt;Next&lt;/strong&gt;" on top right.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Help improve Ubuntu&lt;/strong&gt; - I chose "&lt;strong&gt;No, don't send system info&lt;/strong&gt; to disable telemetry. Click on &lt;strong&gt;Next&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Privacy&lt;/strong&gt; - I chose to turn off Location Services. Click on &lt;strong&gt;Next&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;You're ready to go&lt;/strong&gt; - Choose any additional software you want to install. Click on &lt;strong&gt;Done&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This should complete the setup. &lt;/p&gt;
&lt;p&gt;&lt;img alt="ubuntu-dektop-small" src="http://localhost:8080/images/99999960-ubuntu-dektop-small.png"&gt;&lt;/p&gt;
&lt;h3 id="bonus-configure-your-ubuntu-run-in-fullscreen-mode-with-full-resolution"&gt;[Bonus] Configure your Ubuntu run in fullscreen mode with full resolution&lt;/h3&gt;
&lt;p&gt;If you notice above, the resolution and aspect of the VM is not the same as the monitor. You will also not be able to change this in the display settings. &lt;/p&gt;
&lt;p&gt;To run the VM in fullscreen mode with full resolution, follow the instructions in this guide: &lt;a href="http://localhost:8080/snippets/make-ubuntu-fullscreen-on-windows-hyper-v"&gt;Make Ubuntu Fullscreen on Windows Hyper-V&lt;/a&gt;.&lt;/p&gt;</content><category term="Snippets"></category><category term="linux"></category><category term="windows"></category></entry><entry><title>Enable Hyper-V on Windows 10/11 Home</title><link href="http://localhost:8080/snippets/enable-hyper-v-on-windows-1011-home" rel="alternate"></link><published>2022-02-22T00:00:00+00:00</published><updated>2022-02-22T00:00:00+00:00</updated><author><name>Rehan Haider</name></author><id>tag:localhost,2022-02-22:/snippets/enable-hyper-v-on-windows-1011-home</id><summary type="html">&lt;p&gt;Step by step guide to enable Hyper-V on Windows 10 Home or Windows 11 Home&lt;/p&gt;</summary><content type="html">&lt;p&gt;Windows 10/11 Home edition doesn't come with Hyper-V by default, if you try to enable it from "Turn on Windows features" option from control panel you would not find Hyper-V listed.&lt;/p&gt;
&lt;p&gt;This is because Hyper-V is a Professional and Enterprise edition feature, but it is &lt;a href="https://docs.microsoft.com/en-us/answers/questions/29175/installation-of-hyper-v-on-windows-10-home.html"&gt;possible to enable it from the command line&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="windows-features" src="http://localhost:8080/images/99999961-windows-features.png"&gt;&lt;/p&gt;
&lt;h2 id="enable-hyper-v-from-command-line"&gt;Enable Hyper-V from command line&lt;/h2&gt;
&lt;p&gt;We're going to use the &lt;a href="https://www.microsoft.com/en-us/p/windows-terminal/9n0dx20hk701"&gt;Windows Terminal&lt;/a&gt; so make sure you install it from the &lt;a href="https://www.microsoft.com/en-us/p/windows-terminal/9n0dx20hk701"&gt;Windows Store&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="step-1-check-minimum-system-requirements"&gt;Step 1. Check Minimum System Requirements&lt;/h3&gt;
&lt;p&gt;Your PC should support Hardware virtualisation for Hyper-V to work. &lt;/p&gt;
&lt;p&gt;If you do not have hardware virtualisation, you will need to use an alternative such as &lt;a href="https://www.virtualbox.org/"&gt;VirtualBox&lt;/a&gt; or &lt;a href="https://www.vmware.com/products/workstation-player.html"&gt;VMware Workstation Player&lt;/a&gt;.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note: Many Windows 10 PCs—and all PCs that come preinstalled with Windows 11—already have virtualization enabled, so you may not need to follow these steps.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;For Windows 10, run the followind command in the terminal&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;Get-ComputerInfo&lt;/span&gt; &lt;span class="n"&gt;-property&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;HyperV*&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You should get the below output&lt;/p&gt;
&lt;p&gt;&lt;img alt="windows 10 virtualisation" src="http://localhost:8080/images/99999961-virtualisation.png"&gt;&lt;/p&gt;
&lt;p&gt;This means that your PC supports hardware virtualisation.&lt;/p&gt;
&lt;h3 id="step-2-enable-hyper-v"&gt;Step 2. Enable Hyper-V&lt;/h3&gt;
&lt;p&gt;Create a file on your PC called "enable-hyperv.bat" and paste the following code in it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;pushd &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;%~dp0&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;dir &lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="k"&gt;%&lt;/span&gt;&lt;span class="n"&gt;SystemRoot&lt;/span&gt;&lt;span class="p"&gt;%\&lt;/span&gt;&lt;span class="n"&gt;servicing&lt;/span&gt;&lt;span class="p"&gt;\&lt;/span&gt;&lt;span class="n"&gt;Packages&lt;/span&gt;&lt;span class="p"&gt;\*&lt;/span&gt;&lt;span class="n"&gt;Hyper-V&lt;/span&gt;&lt;span class="p"&gt;*.&lt;/span&gt;&lt;span class="n"&gt;mum&lt;/span&gt; &lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;hyper-v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="p"&gt;%&lt;/span&gt;&lt;span class="k"&gt;%&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;findstr /i . hyper-v.txt 2^&amp;gt;nul&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="n"&gt;dism&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;online&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;norestart&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;add-package&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;%SystemRoot%\servicing\Packages\%%i&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;del &lt;/span&gt;&lt;span class="n"&gt;hyper-v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;
&lt;span class="n"&gt;Dism&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;online&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;enable-feature&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;featurename&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Microsoft-Hyper-V&lt;/span&gt; &lt;span class="n"&gt;-All&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;LimitAccess&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ALL&lt;/span&gt;
&lt;span class="n"&gt;pause&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now run the batch file as an administrator, as shown below.
&lt;img alt="enable-hyperv" src="http://localhost:8080/images/99999961-enable-hyperv.png"&gt;&lt;/p&gt;
&lt;p&gt;This will go through several steps and will take some time to complete. Though it might seem it's repeating the same steps, let it complete without interruption.&lt;/p&gt;
&lt;p&gt;Once the process is complete, you should see the following message asking for confirmation to reboot your PC. Press Y to reboot. &lt;/p&gt;
&lt;p&gt;&lt;img alt="enable-hyperv-complete" src="http://localhost:8080/images/99999961-enable-hyperv-complete.png"&gt;&lt;/p&gt;
&lt;h3 id="step-3-check-if-hyper-v-is-enabled"&gt;Step 3. Check if Hyper-V is enabled&lt;/h3&gt;
&lt;p&gt;Open your teminal and run &lt;code&gt;optionalfeatures&lt;/code&gt; to see the status of Windows features. You should be able to see a Hyper-V feature listed now. &lt;/p&gt;
&lt;p&gt;&lt;img alt="hyperv-enabled" src="http://localhost:8080/images/99999961-hyperv-enabled.png"&gt;&lt;/p&gt;
&lt;h2 id="starting-hyper-v-manager"&gt;Starting Hyper-V Manager&lt;/h2&gt;
&lt;p&gt;Go to the start menu and search for Hyper-V, open the Hyper-V Manager. &lt;/p&gt;
&lt;p&gt;&lt;img alt="open-hyperv-manager" src="http://localhost:8080/images/99999961-open-hyperv-manager.png"&gt;&lt;/p&gt;
&lt;p&gt;From here you can start creating VMs, creating a new VM, or even creating a new VM template.&lt;/p&gt;
&lt;p&gt;For a quick start, follow this &lt;a href="http://localhost:8080/snippets/install-ubuntu-in-a-vm-on-windows-using-hyper-v"&gt;guide to installing Ubuntu on Hyper-V&lt;/a&gt;&lt;/p&gt;</content><category term="Snippets"></category><category term="linux"></category><category term="windows"></category></entry><entry><title>Run Chrome extensions with Python Selenium on AWS Lambda</title><link href="http://localhost:8080/snippets/run-chrome-extensions-with-python-selenium-on-aws-lambda" rel="alternate"></link><published>2021-12-25T00:00:00+00:00</published><updated>2021-12-25T00:00:00+00:00</updated><author><name>Rehan Haider</name></author><id>tag:localhost,2021-12-25:/snippets/run-chrome-extensions-with-python-selenium-on-aws-lambda</id><summary type="html">&lt;p&gt;A detailed guide to use Selenium and Chrome with extensions on AWS Lambda&lt;/p&gt;</summary><content type="html">&lt;div class="admonition warning"&gt;
&lt;p class="admonition-title"&gt;UPDATE 29 March 2022: &lt;strong&gt;As of this update, the instructions in this article may not work on AWS Lambda. Please refer to &lt;a href="https://github.com/CloudBytesDotDev/CloudBytes.dev/discussions/103"&gt;this discussion on GitHub&lt;/a&gt; for more details and alternative options.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;I earlier wrote about how to &lt;a href="http://localhost:8080/snippets/run-selenium-in-aws-lambda-for-ui-testing"&gt;run Chrome AWS Lambda using Python and Selenium webdriver&lt;/a&gt;, but running Chrome with extensions is a different ball game. So let's unpack the problem first, and then we'll get to the solution. &lt;/p&gt;
&lt;p&gt;Chrome, when started in headless mode will start without browser UI, it is just a webpage viewport sans anything else. &lt;/p&gt;
&lt;p&gt;&lt;img alt="chrome-comparison" src="http://localhost:8080/images/99999962-chrome-comparison.png"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You can take a screenshot by running the command &lt;code&gt;google-chrome --headless --disable-gpu --screenshot https://cloudbytes.dev&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="why-your-chrome-extensions-are-not-working-using-selenium-in-headless-mode"&gt;Why your Chrome extensions are not working using Selenium in headless mode?&lt;/h2&gt;
&lt;p&gt;As demonstrated above, because your Chrome is running in headless mode, it will not have any UI and thus no extensions are loaded. This is not a bug, it is a feature as explained here on &lt;a href="https://bugs.chromium.org/p/chromium/issues/detail?id=706008"&gt;chromium website&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So to be able to load extensions, you need to run Chrome in non-headless mode. Which is problematic considering AWS Lambda doesn't have a display so you cannot really run Chrome GUI. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Or can you?&lt;/strong&gt;\
Yes you can, of course you can, I'll show you how.&lt;/p&gt;
&lt;h2 id="how-to-run-chrome-with-extensions-in-aws-lambda"&gt;How to run Chrome with extensions in AWS Lambda&lt;/h2&gt;
&lt;p&gt;For this example, a reader asked to try to run &lt;a href="https://chrome.google.com/webstore/detail/gofullpage-full-page-scre/fdpohaocaechififmbbbbbknoalclacl?hl=en"&gt;GoFullPage&lt;/a&gt; extension in AWS Lambda. This extension relies on user-interaction thus presents a complex problem.&lt;/p&gt;
&lt;p&gt;Let's try and break this problem down.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Extensions do not work in Chrome headless mode, thus you need to run Chrome in non-headless mode, i.e. with a display&lt;/li&gt;
&lt;li&gt;AWS Lambda doesn't have a display, so you need a virtual display to run Chrome GUI. We will use &lt;code&gt;Xvfb&lt;/code&gt; with &lt;code&gt;pyvirtualdisplay&lt;/code&gt; wrapper to do this&lt;/li&gt;
&lt;li&gt;The extension relies on user-interaction, but, Selenium cannot be used for these interactions since it restricts user interaction to DOM elements and doesn't allow sending hotkeys to browser. Thus we will need to create a virtual keyboard to send keys to browser. In this case I chose to use &lt;code&gt;pyautogui&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;PyAutoGUI is a Python wrapper around the &lt;code&gt;Xlib&lt;/code&gt; library and relies on several linux packages that are NOT AVAILABLE on AWS Lambda's default image that uses Amazon Linux 2 (derivative of CentOS) . So we need to use Debian based image on AWS Lambda to run this example. I chose to use Python Buster image.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now with that out of the way, let's get started.&lt;/p&gt;
&lt;h2 id="setting-up-the-development-environment"&gt;Setting up the development environment&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt;: You need &lt;a href="https://code.visualstudio.com/download"&gt;VSCode&lt;/a&gt;, &lt;a href="https://www.docker.com/products/docker-desktop"&gt;Docker Desktop&lt;/a&gt;, and WSL2 as the development environment. You can find instructions on how to setup WSL2 &lt;a href="http://localhost:8080/snippets/how-to-install-wsl2-on-windows-1011"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 2&lt;/strong&gt;: Start the VScode editor&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Start the terminal and login to WSL2 by running &lt;code&gt;wsl&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Make a new directory &lt;code&gt;mkdir selenium-aws&lt;/code&gt; and cd into it &lt;code&gt;cd selenium-aws&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Launch the VS Code editor by running &lt;code&gt;code .&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="start-vscode-wsl2" src="http://localhost:8080/images/99999962-start-vscode-wsl2.gif"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 3&lt;/strong&gt;: Reopen the folder in a devcontainer&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;While in VScode, press &lt;code&gt;Ctrl + Shift + P&lt;/code&gt; to open command palette&lt;/li&gt;
&lt;li&gt;Choose &lt;code&gt;Reopen in Container&lt;/code&gt; from the drop down menu&lt;/li&gt;
&lt;li&gt;Then click on &lt;code&gt;Show All Definitions&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Choose &lt;code&gt;Docker in Docker&lt;/code&gt; from the drop down menu (Do not select &lt;code&gt;Docker from Docker&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Leave the default selections and choose OK in the next two dialogues&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="create-devcontainer" src="http://localhost:8080/images/99999962-create-devcontainer.gif"&gt;&lt;/p&gt;
&lt;p&gt;Next, install the following:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 4&lt;/strong&gt;: &lt;a href="http://localhost:8080/snippets/build-deploy-serverless-apps-on-aws-with-sam-cli#install-aws-cli"&gt;Install AWS CLI&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 5&lt;/strong&gt;: &lt;a href="http://localhost:8080/snippets/build-deploy-serverless-apps-on-aws-with-sam-cli#install-aws-sam-cli"&gt;Install SAM CLI&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And finally, configure AWS CLI as per below&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 6&lt;/strong&gt;: &lt;a href="http://localhost:8080/snippets/build-deploy-serverless-apps-on-aws-with-sam-cli#configuring-aws-aws-cli"&gt;Configure AWS &amp;amp; AWS CLI&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="running-chrome-extensions-using-selenium-in-aws-lambda"&gt;Running Chrome Extensions using Selenium in AWS Lambda&lt;/h2&gt;
&lt;p&gt;Unlike a &lt;a href="http://localhost:8080/snippets/run-aws-lambda-using-custom-docker-container#create-a-new-app"&gt;previous guide&lt;/a&gt; we'll use a manual SAM templates to create a new Lambda app. &lt;/p&gt;
&lt;p&gt;Your folder structure should look like below&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;.
├── __init__.py
├── events
│   └── event.json
├── src
│   ├── __init__.py
│   ├── app.py
│   ├── Dockerfile
│   ├── GoFullPage.crx
│   ├── install_chrome.sh
│   ├── install_driver.sh
│   └── requirements.txt
├── samconfig.toml
└── template.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="a-__init__py"&gt;a) __init__.py&lt;/h3&gt;
&lt;p&gt;Both the &lt;code&gt;__init__.py&lt;/code&gt; files should be empty&lt;/p&gt;
&lt;h3 id="b-eventseventjson"&gt;b) events/event.json&lt;/h3&gt;
&lt;p&gt;We will use a basic event structure that will trigger our lambda. The contents should be&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;body&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;{\&amp;quot;message\&amp;quot;: \&amp;quot;hello world\&amp;quot;}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;resource&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/{proxy+}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;path&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/path/to/resource&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;httpMethod&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;isBase64Encoded&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;queryStringParameters&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;pathParameters&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;proxy&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/path/to/resource&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;stageVariables&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;baz&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;qux&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;headers&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;Accept&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;Accept-Encoding&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;gzip, deflate, sdch&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;Accept-Language&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;en-US,en;q=0.8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;Cache-Control&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;max-age=0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;CloudFront-Forwarded-Proto&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;CloudFront-Is-Desktop-Viewer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;true&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;CloudFront-Is-Mobile-Viewer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;false&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;CloudFront-Is-SmartTV-Viewer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;false&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;CloudFront-Is-Tablet-Viewer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;false&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;CloudFront-Viewer-Country&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;US&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;Host&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;1234567890.execute-api.us-east-1.amazonaws.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;Upgrade-Insecure-Requests&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;User-Agent&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Custom User Agent String&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;Via&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;1.1 08f323deadbeefa7af34d5feb414ce27.cloudfront.net (CloudFront)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;X-Amz-Cf-Id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;cDehVQoZnx43VYQb9j2-nvCh-9z396Uhbp027Y2JvkCPNLmGJHqlaA==&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;X-Forwarded-For&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;127.0.0.1, 127.0.0.2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;X-Forwarded-Port&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;443&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;X-Forwarded-Proto&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;requestContext&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;accountId&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;123456789012&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;resourceId&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;123456&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;stage&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;prod&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;requestId&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;c6af9ac6-7b61-11e6-9a41-93e8deadbeef&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;requestTime&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;09/Apr/2015:12:34:56 +0000&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;requestTimeEpoch&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1428582896000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;identity&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;cognitoIdentityPoolId&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;accountId&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;cognitoIdentityId&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;caller&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;accessKey&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;sourceIp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;cognitoAuthenticationType&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;cognitoAuthenticationProvider&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;userArn&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;userAgent&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Custom User Agent String&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;user&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;path&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/prod/path/to/resource&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;resourcePath&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/{proxy+}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;httpMethod&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;apiId&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;1234567890&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;quot;protocol&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;HTTP/1.1&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="c-templateyaml"&gt;c) template.yaml&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;AWSTemplateFormatVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;2010-09-09&amp;quot;&lt;/span&gt;
&lt;span class="nt"&gt;Transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;AWS::Serverless-2016-10-31&lt;/span&gt;
&lt;span class="nt"&gt;Description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="no"&gt;python3.8&lt;/span&gt;
  &lt;span class="no"&gt;Selenium on Lambda&lt;/span&gt;
&lt;span class="nt"&gt;Globals&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;Timeout&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;120&lt;/span&gt;

&lt;span class="nt"&gt;Resources&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;SeleniumFunction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;AWS::Serverless::Function&lt;/span&gt;
    &lt;span class="nt"&gt;Properties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;PackageType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Image&lt;/span&gt;
      &lt;span class="nt"&gt;Events&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nt"&gt;Selenium&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nt"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Api&lt;/span&gt; 
          &lt;span class="nt"&gt;Properties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nt"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/twitter&lt;/span&gt;
            &lt;span class="nt"&gt;Method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;get&lt;/span&gt;
    &lt;span class="nt"&gt;Metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;Dockerfile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Dockerfile&lt;/span&gt;
      &lt;span class="nt"&gt;DockerContext&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;./src&lt;/span&gt;
      &lt;span class="nt"&gt;DockerTag&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;python3.9-Selenium&lt;/span&gt;

&lt;span class="nt"&gt;Outputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;SeleniumApi&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;Description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;API&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Gateway&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;endpoint&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;URL&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;for&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Prod&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;stage&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;for&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Selenium&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;function&amp;quot;&lt;/span&gt;
    &lt;span class="nt"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Sub&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/selenium/&amp;quot;&lt;/span&gt;
  &lt;span class="nt"&gt;SeleniumFunction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;Description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Selenium&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Lambda&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Function&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;ARN&amp;quot;&lt;/span&gt;
    &lt;span class="nt"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!GetAtt&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Selenium.Arn&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="d-srcdockerfile"&gt;d) src/Dockerfile&lt;/h3&gt;
&lt;p&gt;Our Dockerfile needs to do the following&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Start from the python:buster image&lt;/li&gt;
&lt;li&gt;Install AWS Lambda dependencies to run the Lambda function on custom image&lt;/li&gt;
&lt;li&gt;Install Lambda Runtime Interface Client to implement Lambda Runtime API&lt;/li&gt;
&lt;li&gt;Copy the extension, app.py and requirements.txt to the Docker image&lt;/li&gt;
&lt;li&gt;Install the python dependencies&lt;/li&gt;
&lt;li&gt;Install Chrome Browser to auto install Chromium dependencies&lt;/li&gt;
&lt;li&gt;Install latest Chromium Browser&lt;/li&gt;
&lt;li&gt;Install latest Chromedriver&lt;/li&gt;
&lt;li&gt;Install Xvfb and dependencies&lt;/li&gt;
&lt;li&gt;Configure Lambda Runtime API to execute the Lambda function&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c"&gt;# Define function directory&lt;/span&gt;
&lt;span class="k"&gt;ARG&lt;/span&gt; &lt;span class="nv"&gt;FUNCTION_DIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/function&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;ARG&lt;/span&gt; &lt;span class="nv"&gt;RUNTIME_VERSION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;3.9&amp;quot;&lt;/span&gt;


&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="s"&gt;ubuntu:latest&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="s"&gt;base-image&lt;/span&gt;

&lt;span class="k"&gt;RUN&lt;/span&gt; apt-get update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nv"&gt;DEBIAN_FRONTEND&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;noninteractive &lt;span class="nv"&gt;TZ&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Etc/UTC
&lt;span class="k"&gt;RUN&lt;/span&gt; apt-get install -y g++ make cmake unzip libcurl4-openssl-dev
&lt;span class="k"&gt;RUN&lt;/span&gt; apt-get install -y python3 python3-pip 
&lt;span class="k"&gt;RUN&lt;/span&gt; apt-get install xvfb python3-tk python3-dev -y
&lt;span class="k"&gt;RUN&lt;/span&gt; apt-get install curl wget -y

&lt;span class="k"&gt;ARG&lt;/span&gt; FUNCTION_DIR
&lt;span class="c"&gt;# Create function directory&lt;/span&gt;
&lt;span class="k"&gt;RUN&lt;/span&gt; mkdir -p &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;FUNCTION_DIR&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="c"&gt;# Copy function code&lt;/span&gt;


&lt;span class="k"&gt;RUN&lt;/span&gt; pip install &lt;span class="se"&gt;\&lt;/span&gt;
    --target &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;FUNCTION_DIR&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    awslambdaric

&lt;span class="c"&gt;# Include global arg in this stage of the build&lt;/span&gt;
&lt;span class="k"&gt;ARG&lt;/span&gt; FUNCTION_DIR
&lt;span class="c"&gt;# Set working directory to function root directory&lt;/span&gt;
&lt;span class="k"&gt;WORKDIR&lt;/span&gt;&lt;span class="s"&gt; ${FUNCTION_DIR}&lt;/span&gt;

&lt;span class="c"&gt;# Copy setup &amp;amp; other temporary files&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt; requirements.txt /tmp/
&lt;span class="c"&gt;#COPY GoFullPage.crx /opt/&lt;/span&gt;
&lt;span class="k"&gt;RUN&lt;/span&gt; pip install --upgrade pip -q
&lt;span class="k"&gt;RUN&lt;/span&gt; pip install -r /tmp/requirements.txt -q
&lt;span class="k"&gt;COPY&lt;/span&gt; install_chrome.sh /tmp/
&lt;span class="k"&gt;RUN&lt;/span&gt; /bin/bash /tmp/install_chrome.sh
&lt;span class="k"&gt;COPY&lt;/span&gt; install_driver.sh /tmp/
&lt;span class="k"&gt;RUN&lt;/span&gt; /bin/bash /tmp/install_driver.sh
&lt;span class="k"&gt;COPY&lt;/span&gt; install_chromium.sh /tmp/
&lt;span class="k"&gt;RUN&lt;/span&gt; /bin/bash /tmp/install_chromium.sh
&lt;span class="k"&gt;COPY&lt;/span&gt; app.py &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;FUNCTION_DIR&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt; GoFullPage.crx /opt/
&lt;span class="k"&gt;RUN&lt;/span&gt; ls -al /opt/chrome/stable/

&lt;span class="k"&gt;ENTRYPOINT&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;python3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;-m&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;awslambdaric&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;CMD&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;app.handler&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="e-srcgofullpagecrx"&gt;e) src/GoFullPage.crx&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://chrome.google.com/webstore/detail/gofullpage-full-page-scre/fdpohaocaechififmbbbbbknoalclacl?hl=en"&gt;Go Full Page&lt;/a&gt; is the chrome extension that we will use in this demo. &lt;/p&gt;
&lt;p&gt;There are many ways to download Chrome extensions, in this case I recommend running the below command&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;curl -L &lt;span class="s2"&gt;&amp;quot;https://clients2.google.com/service/update2/crx?response=redirect&amp;amp;\&lt;/span&gt;
&lt;span class="s2"&gt;os=win&amp;amp;arch=x64&amp;amp;os_arch=x86_64&amp;amp;nacl_arch=x86-64&amp;amp;prod=chromiumcrx&amp;amp;\&lt;/span&gt;
&lt;span class="s2"&gt;prodchannel=beta&amp;amp;prodversion=79.0.3945.53&amp;amp;lang=ru&amp;amp;acceptformat=crx3\&lt;/span&gt;
&lt;span class="s2"&gt;&amp;amp;x=id%3Dfdpohaocaechififmbbbbbknoalclacl%26installsource%3Dondemand%26uc&amp;quot;&lt;/span&gt; -o GoFullPage.crx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="f-srcinstall_chromesh"&gt;f) src/install_chrome.sh&lt;/h3&gt;
&lt;p&gt;Next we install Chrome browser&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;

apt-get update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get upgrade -y

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Download the latest Chrome .deb file...&amp;quot;&lt;/span&gt;
wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb -q

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Install Google Chrome...&amp;quot;&lt;/span&gt;
dpkg -i google-chrome-stable_current_amd64.deb

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Fix dependencies...&amp;quot;&lt;/span&gt;
apt-get --fix-broken install -y
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Make sure you make this file executable by running the following command&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;chmod +x src/install_chrome.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="g-srcinstall_chromiumsh"&gt;g) src/install_chromium.sh&lt;/h3&gt;
&lt;p&gt;Now with dependencies installed we can install Chromium browser&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Downloading Chromium&amp;quot;&lt;/span&gt;
mkdir -p &lt;span class="s2"&gt;&amp;quot;/opt/chrome/stable&amp;quot;&lt;/span&gt;
curl -Lo &lt;span class="s2"&gt;&amp;quot;/opt/chrome/stable/chrome-linux.zip&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;https://www.googleapis.com/download/storage/v1/b/chromium-browser-snapshots/\&lt;/span&gt;
&lt;span class="s2"&gt;    o/Linux_x64%2F954502%2Fchrome-linux.zip?generation=1640815524872726&amp;amp;alt=media&amp;quot;&lt;/span&gt;
unzip -q &lt;span class="s2"&gt;&amp;quot;/opt/chrome/stable/chrome-linux.zip&amp;quot;&lt;/span&gt; -d &lt;span class="s2"&gt;&amp;quot;/opt/chrome/stable/&amp;quot;&lt;/span&gt;
ls -al /opt/chrome/stable/chrome-linux
mv /opt/chrome/stable/chrome-linux/* /opt/chrome/stable/
rm -rf /opt/chrome/stable/chrome-linux /opt/chrome/stable/chrome-linux.zip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Make this file executable by running &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;chmod +x src/install_chromium.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="h-srcinstall_driversh"&gt;h) src/install_driver.sh&lt;/h3&gt;
&lt;p&gt;Now we install a compatible chrome driver. The below script &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Gets the version of Chrome installed, &lt;/li&gt;
&lt;li&gt;Then gets the latest version of the chromedriver available, &lt;/li&gt;
&lt;li&gt;Compares if the versions are the same&lt;/li&gt;
&lt;li&gt;Downloads the latest chromedriver if the version match&lt;/li&gt;
&lt;li&gt;If not, it will exit with an error&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you have used the &lt;code&gt;install_chrome.sh&lt;/code&gt; script to install Chrome, the versions should match. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Getting Chrome version...&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;chrome_version&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;google-chrome-stable --version&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;chrome_version&lt;/span&gt;&lt;span class="p"&gt;[2]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="nv"&gt;chrome_version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;version&lt;/span&gt;&lt;span class="p"&gt;%.*&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Chrome version: &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;chrome_version&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Getting latest chromedriver version&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;chromedriver_version_full&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;curl &lt;span class="s2"&gt;&amp;quot;https://chromedriver.storage.googleapis.com/LATEST_RELEASE&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;chromedriver_version_full&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="nv"&gt;chromedriver_version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;version&lt;/span&gt;&lt;span class="p"&gt;%.*&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Chromedriver version: &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;chromedriver_version&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;chrome_version&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$chromedriver_version&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Compatible Chromedriver is available...&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Proceeding with installation...&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Compabible Chromedriver not available...exiting&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Downloading latest Chromedriver...&amp;quot;&lt;/span&gt;
mkdir -p &lt;span class="s2"&gt;&amp;quot;/opt/chromedriver/stable/&amp;quot;&lt;/span&gt;

 curl &lt;span class="s2"&gt;&amp;quot;https://www.googleapis.com/download/storage/v1/b/chromium-browser-snapshots/\&lt;/span&gt;
&lt;span class="s2"&gt;      o/Linux_x64%2F954502%2Fchromedriver_linux64.zip?generation=1640815530134396&amp;amp;alt=media&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  -H &lt;span class="s1"&gt;&amp;#39;authority: www.googleapis.com&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  -H &lt;span class="s1"&gt;&amp;#39;sec-ch-ua: &amp;quot; Not A;Brand&amp;quot;;v=&amp;quot;99&amp;quot;, &amp;quot;Chromium&amp;quot;;v=&amp;quot;96&amp;quot;, &amp;quot;Google Chrome&amp;quot;;v=&amp;quot;96&amp;quot;&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  -H &lt;span class="s1"&gt;&amp;#39;sec-ch-ua-mobile: ?0&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  -H &lt;span class="s1"&gt;&amp;#39;sec-ch-ua-platform: &amp;quot;Windows&amp;quot;&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  -H &lt;span class="s1"&gt;&amp;#39;dnt: 1&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  -H &lt;span class="s1"&gt;&amp;#39;upgrade-insecure-requests: 1&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  -H &lt;span class="s2"&gt;&amp;quot;user-agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)\&lt;/span&gt;
&lt;span class="s2"&gt;       Chrome/96.0.4664.110 Safari/537.36&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  -H &lt;span class="s2"&gt;&amp;quot;accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/\&lt;/span&gt;
&lt;span class="s2"&gt;      apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  -H &lt;span class="s2"&gt;&amp;quot;x-client-data: CLO1yQEIhrbJAQiktskBCMG2yQEIqZ3KAQjRoMoBCMCXywEI6vLLAQie+csBCNf8ywEI5oTMAQi1\&lt;/span&gt;
&lt;span class="s2"&gt;      hcwBCMuJzAEI0IvMAQisjswBCJqPzAEI0o/MAQjakMwBCMmSzAEIoZPMAQjHk8wBCIqUzAEY5KDLAQ==&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  -H &lt;span class="s1"&gt;&amp;#39;sec-fetch-site: none&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  -H &lt;span class="s1"&gt;&amp;#39;sec-fetch-mode: navigate&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  -H &lt;span class="s1"&gt;&amp;#39;sec-fetch-user: ?1&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  -H &lt;span class="s1"&gt;&amp;#39;sec-fetch-dest: document&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  -H &lt;span class="s1"&gt;&amp;#39;accept-language: en-GB,en-US;q=0.9,en;q=0.8,ms;q=0.7&amp;#39;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
  --compressed &amp;gt; /opt/chromedriver/stable/chromedriver_linux64.zip



unzip -q &lt;span class="s2"&gt;&amp;quot;/opt/chromedriver/stable/chromedriver_linux64.zip&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    -d &lt;span class="s2"&gt;&amp;quot;/opt/chromedriver/stable/&amp;quot;&lt;/span&gt;

mv /opt/chromedriver/stable/chromedriver_linux64/chromedriver /opt/chromedriver/stable/chromedriver

chmod +x &lt;span class="s2"&gt;&amp;quot;/opt/chromedriver/stable/chromedriver&amp;quot;&lt;/span&gt;
rm -rf &lt;span class="s2"&gt;&amp;quot;/opt/chromedriver/stable/chromedriver_linux64.zip&amp;quot;&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Chrome &amp;amp; Chromedriver installed&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Again, make sure you make this file executable by running the following command&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;chmod +x src/install_driver.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="i-srcapppy"&gt;i) src/app.py&lt;/h3&gt;
&lt;p&gt;The app.py file needs model the following user behavior 
1. Open the browser with the extension installed
2. Open &lt;code&gt;www.example.com&lt;/code&gt;
3. Close extension welcome page
4. Start screenshot capture by pressing &lt;code&gt;Shift + Alt + P&lt;/code&gt;
5. Navigate to the screenshot page
6. Download the screenshot to the default downloads directory by clicking on download button
7. Close the browser
8. Upload the screenshot(s) to S3&lt;/p&gt;
&lt;p&gt;&lt;img alt="user-behaviour" src="http://localhost:8080/images/99999962-user-behaviour.gif"&gt;&lt;/p&gt;
&lt;p&gt;We achive this by the following code. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# src/app.py&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;glob&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.chrome.service&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Service&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.common.keys&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Keys&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.common.by&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;By&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.chrome.options&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Options&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pyvirtualdisplay&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Display&lt;/span&gt;
&lt;span class="c1"&gt;#from pyvirtualdisplay.smartdisplay import SmartDisplay&lt;/span&gt;



&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;display&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Display&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;visible&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;extra_args&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;:25&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2560&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1440&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;backend&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;xvfb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Started Display&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;#Pyautogui requires os.environ[&amp;quot;Display&amp;quot;] variable to be set. &lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pyautogui&lt;/span&gt;

    &lt;span class="n"&gt;chrome_options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Options&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c1"&gt;# Headless environment starts without browser UI so no extensions&lt;/span&gt;
    &lt;span class="c1"&gt;#chrome_options.add_argument(&amp;quot;--headless&amp;quot;) &lt;/span&gt;
    &lt;span class="n"&gt;chrome_options&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;binary_location&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/opt/chrome/stable/chrome&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;chrome_options&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;--no-sandbox&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;chrome_options&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;--disable-dev-shm-usage&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;chrome_options&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;--disable-gpu&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;chrome_options&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;--disable-dev-tools&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;#chrome_options.add_argument(&amp;quot;--no-zygote&amp;quot;) #This will not load the extension&lt;/span&gt;
    &lt;span class="c1"&gt;#chrome_options.add_argument(&amp;quot;--single-process&amp;quot;) #Single process will break the app&lt;/span&gt;
    &lt;span class="n"&gt;chrome_options&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;window-size=2560x1440&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;chrome_options&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;--remote-debugging-port=9222&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;chrome_options&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;--user-data-dir=/tmp/chrome-user-data&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;chrome_options&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_extension&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/opt/GoFullPage.crx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;download_directory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;download.default_directory&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/tmp/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;chrome_options&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_experimental_option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;prefs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;download_directory&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;webdriver_service&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Service&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/opt/chromedriver/stable/chromedriver&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;browser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Chrome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;webdriver_service&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;chrome_options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://example.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# Open Extension options&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Open Extension options...&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;switch_to&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;window_handles&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;chrome-extension://fdpohaocaechififmbbbbbknoalclacl/options.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Provide Download Permission&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Provide Download Permission...&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;By&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;perm-toggle&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;By&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;downloads&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;switch_to&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;active_element&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;pyautogui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;press&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;tab&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;pyautogui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;press&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;enter&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Close options&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Close options...&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;window_handles&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;#Expected 2&lt;/span&gt;
    &lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;window_handles&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;#Expected 1&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# Take screenshot&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Take screenshot...&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;switch_to&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;window_handles&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;pyautogui&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hotkey&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;shift&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;alt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;p&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;window_handles&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;#Expected 2&lt;/span&gt;
    &lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;switch_to&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;window&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;window_handles&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;By&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;btn-download&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;# importing earlier conflicts with selenium actions&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;boto3&lt;/span&gt;
    &lt;span class="n"&gt;s3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;boto3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;s3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;BUCKET_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;cloudbytes.dev&amp;quot;&lt;/span&gt; &lt;span class="c1"&gt;# replace with your bucket name&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;glob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iglob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/tmp/*.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
        &lt;span class="n"&gt;s3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upload_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BUCKET_NAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;success&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Make sure you replace the &lt;code&gt;BUCKET_NAME&lt;/code&gt; in the code with your bucket name. &lt;/p&gt;
&lt;h3 id="j-srcrequirementstxt"&gt;j) src/requirements.txt&lt;/h3&gt;
&lt;p&gt;This will contain the python dependencies required for the Lambda function&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;selenium
pyvirtualdisplay
pillow
keyboard
pyautogui
python-xlib
boto3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="build-test-lambda-app-to-run-chrome-with-extension"&gt;Build &amp;amp; test Lambda app to run Chrome with extension&lt;/h2&gt;
&lt;p&gt;To build, just run the following command&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sam build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will result in a message similar to this (the build process typically takes a few minutes given your internet speed)&lt;/p&gt;
&lt;p&gt;&lt;img alt="sam-build-output" src="http://localhost:8080/images/99999962-sam-build-output.png"&gt;&lt;/p&gt;
&lt;p&gt;Finally, to test the Lambda function, run the following command&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sam local invoke
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will run the Lambda function locally and display the following output&lt;/p&gt;
&lt;p&gt;&lt;img alt="sam-invoke-output" src="http://localhost:8080/images/99999962-sam-invoke-output.png"&gt;&lt;/p&gt;
&lt;h3 id="check-the-results"&gt;Check the results&lt;/h3&gt;
&lt;p&gt;Go to your AWS console and navigate to the S3 bucket that you chose in the step (i) above.&lt;/p&gt;
&lt;p&gt;You should see the screenshot(s) that you uploaded to S3 for each test execution. &lt;/p&gt;
&lt;p&gt;&lt;img alt="aws-s3-screenshots" src="http://localhost:8080/images/99999962-aws-s3-screenshots.png"&gt;&lt;/p&gt;
&lt;h2 id="deploying-to-aws-lambda"&gt;Deploying to AWS Lambda&lt;/h2&gt;
&lt;p&gt;Deploying to AWS Lambda is as simple as running the below&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sam deploy --guided
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will launch a guided deployment process, you can use the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Configuring SAM deploy
======================

        Looking for config file [samconfig.toml] :  Found
        Reading default arguments  :  Success

        Setting default arguments for &amp;#39;sam deploy&amp;#39;
        =========================================
        Stack Name [selaws]: 
        AWS Region [us-east-1]: 
        #Shows you resources changes to be deployed and require a &amp;#39;Y&amp;#39; to initiate deploy
        Confirm changes before deploy [y/N]: 
        #SAM needs permission to be able to create roles to connect to the resources in your template
        Allow SAM CLI IAM role creation [Y/n]: 
        #Preserves the state of previously provisioned resources when an operation fails
        Disable rollback [y/N]: 
        SeleniumFunction may not have authorization defined, Is this okay? [y/N]: y
        Save arguments to configuration file [Y/n]: 
        SAM configuration file [samconfig.toml]: 
        SAM configuration environment [default]: 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now you can run the Lambda app from the AWS console. Alternatively, you can also run the Lambda function by calling the API we created by using the following command&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;curl https://&amp;lt;api-id&amp;gt;.execute-api.us-east-1.amazonaws.com/Prod/selenium/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can get the API ID from deployment output of &lt;code&gt;sam deploy&lt;/code&gt; as shown below:&lt;/p&gt;
&lt;p&gt;&lt;img alt="lambda-api-url" src="http://localhost:8080/images/99999962-lambda-api-url.png"&gt;&lt;/p&gt;
&lt;h2 id="final-code"&gt;Final Code&lt;/h2&gt;
&lt;p&gt;The above code is available on &lt;a href="https://github.com/rehanhaider/selenium-aws-chrome-extension"&gt;GitHub in this repository&lt;/a&gt;. &lt;/p&gt;</content><category term="Snippets"></category><category term="python"></category><category term="aws"></category><category term="selenium"></category></entry><entry><title>How to install Node.js and NPM on WSL2</title><link href="http://localhost:8080/snippets/how-to-install-nodejs-and-npm-on-wsl2" rel="alternate"></link><published>2021-12-12T00:00:00+00:00</published><updated>2021-12-12T00:00:00+00:00</updated><author><name>Rehan Haider</name></author><id>tag:localhost,2021-12-12:/snippets/how-to-install-nodejs-and-npm-on-wsl2</id><summary type="html">&lt;p&gt;A short guide to installing Node.js and NPM on WSL2&lt;/p&gt;</summary><content type="html">&lt;p&gt;If you are using WSL2 / Ubuntu, you can try to install Node.js by running "sudo apt install nodejs", but this will not install the latest version of Node.js. You can the check the version of Node.js available in Ubuntu's default repository by running the below command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;apt list &lt;span class="p"&gt;|&lt;/span&gt; grep nodejs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt="apt-list-nodejs" src="http://localhost:8080/images/99999964-apt-list-nodejs.png"&gt;&lt;/p&gt;
&lt;p&gt;This guide will walk you through the steps to install the latest version of Node.js on WSL2.&lt;/p&gt;
&lt;h2 id="install-nvm-node-version-manager"&gt;Install NVM (Node Version Manager)&lt;/h2&gt;
&lt;p&gt;Install the latest version of NVM by running the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh &lt;span class="p"&gt;|&lt;/span&gt; bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;NOTE: You can get the latest versionof the above command by vising the &lt;a href="https://github.com/nvm-sh/nvm#installing-and-updating"&gt;NVM GitHub Repository&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;Confirm your installation and check version of NVM by running the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;nvm --version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="populate-the-nvm-list"&gt;Populate the NVM list&lt;/h2&gt;
&lt;p&gt;Fetch all versions available in NVM by running the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;nvm ls-remote
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="install-nodejs-npm"&gt;Install Node.js &amp;amp; NPM&lt;/h2&gt;
&lt;p&gt;Now you can install the latest version of Node.js by running:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;nvm install node
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will install both the latest version of Node.js and NPM.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;node&lt;/code&gt; above is an alias for the latest version of Node.js. To install a specific version of Node.js, replace node by the version and run the command, e.g. to install &lt;code&gt;v16.13.1&lt;/code&gt; run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;nvm install v16.13.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now confirm the version of Node.js installed by running the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;node --version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can also check the version of NPM by running the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;npm --version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Snippets"></category><category term="wsl2"></category><category term="node"></category></entry><entry><title>Which Python Implementation you should use (Cpython, PyPy, etc.)?</title><link href="http://localhost:8080/snippets/which-python-implementation-you-should-use-cpython-pypy-etc" rel="alternate"></link><published>2021-12-12T00:00:00+00:00</published><updated>2021-12-12T00:00:00+00:00</updated><author><name>Rehan Haider</name></author><id>tag:localhost,2021-12-12:/snippets/which-python-implementation-you-should-use-cpython-pypy-etc</id><summary type="html">&lt;p&gt;A short introduction to the different Python implementations.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Python as you know it is not just a programming language. The Python that you download from the official &lt;a href="https://www.python.org/"&gt;Python.org&lt;/a&gt; website is a &lt;strong&gt;reference implementation&lt;/strong&gt;. What that means is it implements the Python language specifications, as defined by the &lt;a href="https://www.python.org/dev/"&gt;Python Software Foundation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But Python.org's reference implementation is not the only Python implementation available. There are many other some with very specialised use cases and for beginners sometimes this can get confusing. So let's take a look at some key Python implementations available and when&lt;/p&gt;
&lt;h2 id="cpython"&gt;CPython&lt;/h2&gt;
&lt;p&gt;&lt;img alt="python-logo" src="http://localhost:8080/images/99999963-python-logo.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.python.org/downloads/"&gt;CPython&lt;/a&gt;The officiis Python implementation that is used by the Python Software Foundation. Written in C and Python, it is the most popular Python implementation and is used by the vast majority of Python developers. CPython is considered the most mature and "production-quality" Python implementation.&lt;/p&gt;
&lt;p&gt;If you're starting out with Python, you should definitely start with CPython as you're least likely to encounter any issues with it.&lt;/p&gt;
&lt;h2 id="pypy"&gt;PyPy&lt;/h2&gt;
&lt;p&gt;&lt;img alt="pypy-logo" src="http://localhost:8080/images/99999963-pypy-logo.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.pypy.org/download.html"&gt;PyPy&lt;/a&gt; is a Python implementation written in Python (specifically RPython) and is a replacement for CPython. PyPy's main utility is that it is &lt;strong&gt;really fast&lt;/strong&gt;, in fact, it claims to be &lt;a href="https://speed.pypy.org/"&gt;almost 5x faster than CPython&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;However, PyPy can run most Python code except for when the code depends on CPython extensions which results in either inability to run or significant loss of performance.&lt;/p&gt;
&lt;p&gt;PyPy is intended for advanced users who want to optimise their code for performance.&lt;/p&gt;
&lt;h2 id="jython"&gt;Jython&lt;/h2&gt;
&lt;p&gt;&lt;img alt="jython-logo" src="http://localhost:8080/images/99999963-jython-logo.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.jython.org/download/"&gt;Jython&lt;/a&gt; is a Python implementation written in Python and Java and is designed to run on Java platforms. The key use case for Jython is its ability to import Java classes and that Jython compiles the Python code into Java bytecode which can be run on Java Virtual Machines (JVM).&lt;/p&gt;
&lt;p&gt;The typical use case of Jython is when Java classes are needed to be imported, e.g. you could build an Android app using a mix of Jython which can import Java Android packages and a toolkit like Kivy. &lt;/p&gt;
&lt;h2 id="circuitpython"&gt;CircuitPython&lt;/h2&gt;
&lt;p&gt;&lt;img alt="circuitpython-logo" src="http://localhost:8080/images/99999963-circuitpython-logo.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://circuitpython.org/"&gt;CircuitPython&lt;/a&gt; is maintained by &lt;a href="https://www.adafruit.com/"&gt;Adafruit&lt;/a&gt; and is designed to run on certain microcontroller hardware such as the &lt;a href="https://www.adafruit.com/product/3317"&gt;Adafruit Feather M0&lt;/a&gt; and &lt;a href="https://www.adafruit.com/product/3316"&gt;Adafruit Feather M4&lt;/a&gt;. Is is written in C and is not exlusive to Adafruit Microcontrollers and can be used for other supported microcontroller hardware as well. &lt;/p&gt;
&lt;h2 id="other-notable-python-implementations"&gt;Other notable Python implementations&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://numba.pydata.org/"&gt;Numba&lt;/a&gt; is a NumPy aware JIT compiler that can compile a subset of Python code into machine code for faster execution&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.pyston.org/"&gt;Pyston&lt;/a&gt; is a relatively new alternate Python implementation designed to be a drop-in replacement for CPython and optimised for performance with claimed improvements of 30% in speed&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rpython.readthedocs.io/en/latest/"&gt;RPython&lt;/a&gt; is a restricted version of Python is a subset of CPython and is designed to be a framework for creating dynamic languages&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;For most purposes, &lt;strong&gt;CPython&lt;/strong&gt; is the implementation you should be using, unless you have a specific reason to use another implementation as described above.&lt;/p&gt;</content><category term="Snippets"></category><category term="python"></category></entry><entry><title>How to install WSL2 on Windows 10/11</title><link href="http://localhost:8080/snippets/how-to-install-wsl2-on-windows-1011" rel="alternate"></link><published>2021-11-26T00:00:00+00:00</published><updated>2021-11-26T00:00:00+00:00</updated><author><name>Rehan Haider</name></author><id>tag:localhost,2021-11-26:/snippets/how-to-install-wsl2-on-windows-1011</id><summary type="html">&lt;p&gt;A guide to install WSL2 on Windows 10/11&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#installing-wsl2-on-windows-1011-the-easy-way"&gt;Installing WSL2 on Windows 10/11 (The easy way)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#installing-wsl2-on-windows-1011-the-hard-way"&gt;Installing WSL2 on Windows 10/11 (The hard way)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#step-1-enable-windows-subsystem-for-linux-wsl"&gt;Step 1: Enable Windows Subsystem for Linux (WSL)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step-2-enable-windows-virtual-machine-platform"&gt;Step 2: Enable Windows Virtual Machine Platform&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step-3-update-the-linux-kernel-to-the-latest-version"&gt;Step 3: Update the Linux kernel to the latest version&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step-4-set-wsl2-as-the-default-version"&gt;Step 4: Set WSL2 as the default version&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step-6-install-your-preferred-linux-distribution"&gt;Step 6: Install your preferred Linux distribution&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;The process of installing WSL2 can differ slightly depending upon the version of Windows you are using, so choose the &lt;a href="#installing-wsl2-on-windows-1011-the-easy-way"&gt;easy way&lt;/a&gt; below if you're running the latest updates of Windows 10/11, otherwise, follow &lt;a href="#installing-wsl2-on-windows-1011-the-hard-way"&gt;these instructions&lt;/a&gt; below to install WSL2 manually. &lt;/p&gt;
&lt;p&gt;To install WSL2, you must be running the following versions of Windows 10/11&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For x64 systems: Version 1903 or higher, with Build 18362 or higher&lt;/li&gt;
&lt;li&gt;For ARM64 systems: Version 2004 or higher, with Build 19041 or higher.&lt;/li&gt;
&lt;li&gt;Builds lower than 18362 do not support WSL 2. You will need to update your version of windows. &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="installing-wsl2-on-windows-1011-the-easy-way"&gt;Installing WSL2 on Windows 10/11 (The easy way)&lt;/h2&gt;
&lt;p&gt;If you're running Windows 10 version 2004 or higher (Build 19041 and above) or windows 11, installation is as simple as running the below command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;wsl&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;-install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will take care of all the steps required, i.e.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Enable Windows Virtualisation Layer and WSL2&lt;/li&gt;
&lt;li&gt;Update the Linux kernel to the latest version&lt;/li&gt;
&lt;li&gt;Install the default Linux distribution, i.e. latest Ubuntu (Currently Ubuntu 20.04)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="Install WSL" src="http://localhost:8080/images/99999965-install-wsl.gif"&gt;&lt;/p&gt;
&lt;p&gt;Then type &lt;code&gt;wsl&lt;/code&gt; in your terminal and press enter to login to WSL2. &lt;/p&gt;
&lt;h2 id="installing-wsl2-on-windows-1011-the-hard-way"&gt;Installing WSL2 on Windows 10/11 (The hard way)&lt;/h2&gt;
&lt;p&gt;If you're running Windows 10 version 1903 or lower (Build 18362 and below), you will need to install WSL2 manually.&lt;/p&gt;
&lt;h3 id="step-1-enable-windows-subsystem-for-linux-wsl"&gt;Step 1: Enable Windows Subsystem for Linux (WSL)&lt;/h3&gt;
&lt;p&gt;Open the Windows Terminal or Powershell, and type the following command to enable WSL:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;dism&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exe&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;online&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;enable-feature&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;featurename&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Microsoft-Windows-Subsystem-Linux&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;norestart&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="step-2-enable-windows-virtual-machine-platform"&gt;Step 2: Enable Windows Virtual Machine Platform&lt;/h3&gt;
&lt;p&gt;In the Windows Terminal or Powershell, type the following command to enable Windows Virtual Machine Platform:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;dism&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exe&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;online&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;enable-feature&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;featurename&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;VirtualMachinePlatform&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="n"&gt;norestart&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="step-3-update-the-linux-kernel-to-the-latest-version"&gt;Step 3: Update the Linux kernel to the latest version&lt;/h3&gt;
&lt;p&gt;This requires you to download the &lt;strong&gt;WSL2 Linux kernel update MSI package&lt;/strong&gt;, choose the appropriate version from below, and install it.
1. &lt;a href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi"&gt;WSL2 Linux kernel update MSI package for x64 systems&lt;/a&gt;
2. &lt;a href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_arm64.msi"&gt;WSL2 Linux kernel update MSI package for ARM64 systems&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="step-4-set-wsl2-as-the-default-version"&gt;Step 4: Set WSL2 as the default version&lt;/h3&gt;
&lt;p&gt;Installing WSL2 in Step #3 doesn't change the default version of WSL from 1 to 2. To change the default version of WSL, you must run the following command in terminal or powershell:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;wsl&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;-set-default-version&lt;/span&gt; &lt;span class="n"&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="step-6-install-your-preferred-linux-distribution"&gt;Step 6: Install your preferred Linux distribution&lt;/h3&gt;
&lt;p&gt;You can choose from 10+ distributions available on Microsoft Store. To install, open Microsoft Store, and search for the Linux distribution you want to install then click on the &lt;strong&gt;Get&lt;/strong&gt; button.&lt;/p&gt;</content><category term="Snippets"></category><category term="wsl2"></category><category term="windows"></category></entry><entry><title>How to install multiple instances of Ubuntu in WSL2</title><link href="http://localhost:8080/snippets/how-to-install-multiple-instances-of-ubuntu-in-wsl2" rel="alternate"></link><published>2021-11-11T00:00:00+00:00</published><updated>2021-11-11T00:00:00+00:00</updated><author><name>Rehan Haider</name></author><id>tag:localhost,2021-11-11:/snippets/how-to-install-multiple-instances-of-ubuntu-in-wsl2</id><summary type="html">&lt;p&gt;A guide to installing multiple fresh instances of Ubuntu in WSL2&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#installing-multiple-instances-of-ubuntu-in-wsl2"&gt;Installing multiple instances of Ubuntu in WSL2&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#step-1-install-the-latest-version-of-ubuntu-in-wsl2"&gt;Step 1: Install the latest version of Ubuntu in WSL2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step-2-download-the-ubuntu-wsl-tarball"&gt;Step 2: Download the Ubuntu WSL tarball&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step-3-install-the-second-instance-of-ubuntu-in-wsl2"&gt;Step 3: Install the second instance of Ubuntu in WSL2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step-4-login-to-the-second-instance-of-ubuntu-in-wsl2"&gt;Step 4: Login to the second instance of Ubuntu in WSL2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step-5-setup-user-accounts"&gt;Step 5: Setup user accounts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step-6-configure-default-user"&gt;Step 6: Configure default user&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step-7-login-as-the-new-user"&gt;Step 7: Login as the new user&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;Windows Subsystem for Linux 2 (&lt;a href="https://docs.microsoft.com/en-us/windows/wsl/install"&gt;WSL2&lt;/a&gt;) is in its second iteration that uses an actual Linux Kernel, an upgrade of the previous kernel emulator which was called Windows Subsystem for Linux (WSL).&lt;/p&gt;
&lt;p&gt;It's a great tool developers who need to Linux for developing and testings their apps. And sometimes, you just want more than one instance of Ubuntu on your machine.&lt;/p&gt;
&lt;h2 id="installing-multiple-instances-of-ubuntu-in-wsl2"&gt;Installing multiple instances of Ubuntu in WSL2&lt;/h2&gt;
&lt;p&gt;If you are running windows 10 version 2004 or higher (Build 19041 and above), you can install the latest version of Ubuntu in WSL by running the the below command.&lt;/p&gt;
&lt;h3 id="step-1-install-the-latest-version-of-ubuntu-in-wsl2"&gt;Step 1: Install the latest version of Ubuntu in WSL2&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;wsl&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;-install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will take care of all the steps required, i.e.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It will enable the optional compoenents required on windows (e.g. Windows Virtualisation Platform, etc.)&lt;/li&gt;
&lt;li&gt;Enable Windows Subsystem for Linux 2 (WSL2)&lt;/li&gt;
&lt;li&gt;Update the Linux kernel to the latest version&lt;/li&gt;
&lt;li&gt;Install the default Linux distribution, i.e. latest Ubuntu&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="Install WSL" src="http://localhost:8080/images/99999967-install-wsl.gif"&gt;&lt;/p&gt;
&lt;p&gt;Once installed, just run &lt;code&gt;wsl&lt;/code&gt; to open the WSL2 shell, on the first login you will be asked to choose username and password. &lt;/p&gt;
&lt;h3 id="step-2-download-the-ubuntu-wsl-tarball"&gt;Step 2: Download the Ubuntu WSL tarball&lt;/h3&gt;
&lt;p&gt;You can download the Ubuntu WSL tarball from the &lt;a href="https://cloud-images.ubuntu.com/releases/hirsute/release/ubuntu-21.04-server-cloudimg-amd64-wsl.rootfs.tar.gz"&gt;Ubuntu WSL2 Image&lt;/a&gt; and save it to your local machine. &lt;/p&gt;
&lt;p&gt;You can use your Windows Terminal / Powershell to do so, first run the following command to remove &lt;code&gt;curl&lt;/code&gt; alias which the mighty intelligent 🤡 Powershell developers have built in&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;Remove-Item&lt;/span&gt; &lt;span class="k"&gt;alias&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nb"&gt;curl&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then, run the following command to download the Ubuntu WSL tarball. Copy paste the &lt;strong&gt;entire code block&lt;/strong&gt; below into your Windows Terminal and run it&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;curl &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://cloud-images.ubuntu.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;releases/hirsute/release&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;ubuntu-21.04-server-cloudimg-amd64-wsl.rootfs.tar.gz&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;-join&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;`&lt;/span&gt;
&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;-output&lt;/span&gt; &lt;span class="n"&gt;ubuntu&lt;/span&gt;&lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;21&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;04-wsl-rootfs-tar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gz&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If prompted with a warning, press "Paste anyway" and then press enter to execute. This will download the Ubuntu WSL image tarball to you current directory. &lt;/p&gt;
&lt;p&gt;&lt;img alt="curl-wsl-ubuntu" src="http://localhost:8080/images/99999967-curl-wsl-ubuntu.png"&gt;&lt;/p&gt;
&lt;h3 id="step-3-install-the-second-instance-of-ubuntu-in-wsl2"&gt;Step 3: Install the second instance of Ubuntu in WSL2&lt;/h3&gt;
&lt;p&gt;Just the below command and &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Replace the &lt;code&gt;&amp;lt;Distribution Name&amp;gt;&lt;/code&gt; with the name you want to give, e.g. &lt;code&gt;ubuntu-2&lt;/code&gt;, &lt;/li&gt;
&lt;li&gt;Replace &lt;code&gt;&amp;lt;Installation Folder&amp;gt;&lt;/code&gt; with the folder where you want to install the second instance of Ubuntu&lt;/li&gt;
&lt;li&gt;and finally replace &lt;code&gt;&amp;lt;Ubuntu Tarball path&amp;gt;&lt;/code&gt; with the path of the Ubuntu WSL2 image tarball you downloaded earlier.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;wsl&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;-import&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Distribution&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Installation&lt;/span&gt; &lt;span class="n"&gt;Folder&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Ubuntu&lt;/span&gt; &lt;span class="n"&gt;WSL2&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt; &lt;span class="n"&gt;Tarball&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt="wsl-install-2" src="http://localhost:8080/images/99999967-wsl-install-2.png"&gt;&lt;/p&gt;
&lt;p&gt;After that run, &lt;code&gt;wsl -l -v&lt;/code&gt; to see the list of distributions installed.&lt;/p&gt;
&lt;h3 id="step-4-login-to-the-second-instance-of-ubuntu-in-wsl2"&gt;Step 4: Login to the second instance of Ubuntu in WSL2&lt;/h3&gt;
&lt;p&gt;To login you need to run: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;wsl&lt;/span&gt; &lt;span class="n"&gt;-d&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Distribution&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt="wsl2-login" src="http://localhost:8080/images/99999967-wsl2-login.png"&gt;&lt;/p&gt;
&lt;h3 id="step-5-setup-user-accounts"&gt;Step 5: Setup user accounts&lt;/h3&gt;
&lt;p&gt;Notice in the above image that the logged in user is a root account. So let's setup a normal user account.&lt;/p&gt;
&lt;p&gt;First, while logged in to the second instance of Ubuntu in WSL2 as root, run the below command, replace &lt;code&gt;&amp;lt;USERNAME&amp;gt;&lt;/code&gt; with the username of your choice:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;NEW_USER&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&amp;lt;USERNAME&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then, run the following command to create the user account and set the password:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;useradd -m -G sudo -s /bin/bash &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$NEW_USER&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
passwd &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$NEW_USER&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt="create-user-ubuntu" src="http://localhost:8080/images/99999967-create-user-ubuntu.png"&gt;&lt;/p&gt;
&lt;h3 id="step-6-configure-default-user"&gt;Step 6: Configure default user&lt;/h3&gt;
&lt;p&gt;Next, we need to configure Ubuntu to log in as your new user by default instead of root. &lt;/p&gt;
&lt;p&gt;To do so, run the below command: paste the entire block of code below into your teminal and press enter.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;tee /etc/wsl.conf &lt;span class="s"&gt;&amp;lt;&amp;lt;_EOF&lt;/span&gt;
&lt;span class="s"&gt;[user]&lt;/span&gt;
&lt;span class="s"&gt;default=${NEW_USER}&lt;/span&gt;
&lt;span class="s"&gt;_EOF&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt="set-default-user" src="http://localhost:8080/images/99999967-set-default-user.png"&gt;&lt;/p&gt;
&lt;h3 id="step-7-login-as-the-new-user"&gt;Step 7: Login as the new user&lt;/h3&gt;
&lt;p&gt;First, exit the WSL by running &lt;code&gt;logout&lt;/code&gt;, then shutfown the second Ubuntu by running&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;wsl&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;-shutdown&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Distribution&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally, login to the second instance of Ubuntu again:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;wsl&lt;/span&gt; &lt;span class="n"&gt;-d&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Distribution&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt="login-wsl-new" src="http://localhost:8080/images/99999967-login-wsl-new.png"&gt;&lt;/p&gt;</content><category term="Snippets"></category><category term="wsl"></category><category term="ubuntu"></category><category term="windows"></category></entry><entry><title>Run Selenium and Chrome on WSL2 using Python and Selenium webdriver</title><link href="http://localhost:8080/snippets/run-selenium-and-chrome-on-wsl2" rel="alternate"></link><published>2021-11-11T00:00:00+00:00</published><updated>2021-11-11T00:00:00+00:00</updated><author><name>Rehan Haider</name></author><id>tag:localhost,2021-11-11:/snippets/run-selenium-and-chrome-on-wsl2</id><summary type="html">&lt;p&gt;A guide to installating, configuring and running Selenium and Chrome/Chromiums on Windows Subsystem for Linux (WSL2) and run tests using Python and Selenium webdriver.&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#step-1-install-wsl2"&gt;Step 1: Install WSL2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step-2-install-latest-chrome-for-linux"&gt;Step 2: Install latest Chrome for Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step-3-install-compatible-chromedriver"&gt;Step 3: Install compatible Chromedriver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#step-4-configure-python-and-install-selenium"&gt;Step 4: Configure Python and Install Selenium&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#configure-a-python-virtual-environment"&gt;Configure a Python virtual environment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#install-selenium"&gt;Install Selenium&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#step-5-run-selenium"&gt;Step 5: Run Selenium&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#creating-a-script-to-automate-the-process"&gt;Creating a script to automate the process&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href="https://www.selenium.dev/"&gt;Selenium&lt;/a&gt; combined with Headless &lt;a href="https://developers.google.com/web/updates/2017/04/headless-chrome"&gt;Chrome&lt;/a&gt; is a great tool for creating automated UI tests for web applications. 
With Selenium libraries, Python can be used to create and run automated browser-based tests &amp;amp; tasks. &lt;/p&gt;
&lt;p&gt;This guide will show you how to install, configure and run Selenium and Chrome on WSL2 using Python and Selenium webdriver.
&lt;a href="https://click.linksynergy.com/link?id=zOWbNCBDzko&amp;offerid=1060092.1394254&amp;type=2&amp;murl=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fubuntu-server-fundamentals-manage-linux-server-with-ubuntu%2F"&gt;&lt;IMG border=0 src="https://img-c.udemycdn.com/course/480x270/1394254_2eb5_6.jpg" &gt;&lt;/a&gt;&lt;IMG border=0 width=1 height=1 src="https://ad.linksynergy.com/fs-bin/show?id=zOWbNCBDzko&amp;bids=1060092.1394254&amp;type=2&amp;subid=0" &gt;&lt;/p&gt;
&lt;h2 id="step-1-install-wsl2"&gt;Step 1: Install WSL2&lt;/h2&gt;
&lt;p&gt;On Windows 10 version 2004 or higher (Build 19041 and above) or windows 11, run the below. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;wsl&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;-install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will take care of all the steps required, i.e.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Enable Windows Virtualisation Layer and WSL2&lt;/li&gt;
&lt;li&gt;Update the Linux kernel to the latest version&lt;/li&gt;
&lt;li&gt;Install the default Linux distribution, i.e. latest Ubuntu (Currently Ubuntu 20.04)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="Install WSL" src="http://localhost:8080/images/99999966-install-wsl.gif"&gt;&lt;/p&gt;
&lt;p&gt;Then type &lt;code&gt;wsl&lt;/code&gt; in your terminal and press enter to login to WSL2. &lt;/p&gt;
&lt;div class="admonition warning"&gt;
&lt;p class="admonition-title"&gt; NOTE: All codeblocks below are formatted as multi-line commands so the entire block needs to be copy pasted and not line by line.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Ensure you go to your home directory, update the repository and any packages&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;a) Change the working directory to the user home directory.&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;b) Update the repository and any packages&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo apt update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo apt upgrade -y
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="step-2-install-latest-chrome-for-linux"&gt;Step 2: Install latest Chrome for Linux&lt;/h2&gt;
&lt;p&gt;Chrome is not available in Ubuntu's official APT repository, so we will download the .deb directly from Google and install it. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;a) Download the latest chrome .deb file&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;b) Install the .deb file&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo dpkg -i google-chrome-stable_current_amd64.deb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;c) And finally, force install all the dependencies by running&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo apt --fix-broken install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;This feels a hackish way of installing the latest version of Chrome, but if someone figures out a better way, do let me know please. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;d) Get the latest version of Chrome&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;google-chrome-stable --version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In this case, it was &lt;code&gt;95.0.4638.69&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="chrome-version" src="http://localhost:8080/images/99999966-chrome-version.png"&gt;&lt;/p&gt;
&lt;h2 id="step-3-install-compatible-chromedriver"&gt;Step 3: Install compatible Chromedriver&lt;/h2&gt;
&lt;p&gt;To be able to run Chrome programmatically, we need to install a compatible &lt;a href="https://chromedriver.chromium.org/home"&gt;Chromedriver&lt;/a&gt;. For every version of Chrome, e.g. &lt;code&gt;95.0.4638.69&lt;/code&gt;, there is a corresponding version of Chromedriver with same version number. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;a) You can confirm the Chromedriver version&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;chrome_driver&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;curl &lt;span class="s2"&gt;&amp;quot;https://chromedriver.storage.googleapis.com/LATEST_RELEASE&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$chrome_driver&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt="get-chrome-driver-version" src="http://localhost:8080/images/99999966-get-chrome-driver-version.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;b) Download the latest Chromedriver&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;curl -Lo chromedriver_linux64.zip &lt;span class="s2"&gt;&amp;quot;https://chromedriver.storage.googleapis.com/\&lt;/span&gt;
&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;chrome_driver&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/chromedriver_linux64.zip&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;c) Install unzip&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo apt install unzip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;d) Unzip the binary file and make it executable&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;mkdir -p &lt;span class="s2"&gt;&amp;quot;chromedriver/stable&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
unzip -q &lt;span class="s2"&gt;&amp;quot;chromedriver_linux64.zip&amp;quot;&lt;/span&gt; -d &lt;span class="s2"&gt;&amp;quot;chromedriver/stable&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
chmod +x &lt;span class="s2"&gt;&amp;quot;chromedriver/stable/chromedriver&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="step-4-configure-python-and-install-selenium"&gt;Step 4: Configure Python and Install Selenium&lt;/h2&gt;
&lt;p&gt;Selenium webdriver is available as a Python package, but before installation we need to do some prep.&lt;/p&gt;
&lt;h3 id="configure-a-python-virtual-environment"&gt;Configure a Python virtual environment&lt;/h3&gt;
&lt;p&gt;Run &lt;code&gt;python3 --version&lt;/code&gt; and note the version, e.g. in my case I get the version Python 3.8&lt;/p&gt;
&lt;p&gt;&lt;img alt="python-version" src="http://localhost:8080/images/99999966-python-version.png"&gt;&lt;/p&gt;
&lt;p&gt;Next, we need to install &lt;code&gt;venv&lt;/code&gt;, choose the Python version based on what you have installed.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo apt install python3.8-venv -y
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then create a virtual environment&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python3 -m venv .venv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally, activate the virtual environment by running &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;source&lt;/span&gt; .venv/bin/activate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You should see your terminal change to the below with &lt;code&gt;(.venv)&lt;/code&gt; in the prompt.&lt;/p&gt;
&lt;h3 id="install-selenium"&gt;Install Selenium&lt;/h3&gt;
&lt;p&gt;After activating the virtual environment, install Selenium using the pip command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip install selenium
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="admonition-title"&gt;It is necessary to activate the Python virtual environment by running &lt;code&gt;source .venv/bin/activate&lt;/code&gt; before executing the above command&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;h2 id="step-5-run-selenium"&gt;Step 5: Run Selenium&lt;/h2&gt;
&lt;p&gt;Finally we're ready to start running our automated tests. We write a simple Python script to run Selenium and Chrome/Chromium.&lt;/p&gt;
&lt;p&gt;Create a new folder, &lt;code&gt;selenium&lt;/code&gt; and open VSCode by running the below&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;mkdir -p &lt;span class="s2"&gt;&amp;quot;selenium&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;selenium&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; code .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;a) The Python program&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;# Filename: run_selenium.py&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;## Run selenium and chrome driver to scrape data from cloudbytes.dev&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os.path&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.chrome.service&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Service&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.common.by&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;By&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.chrome.options&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Options&lt;/span&gt;

&lt;span class="c1"&gt;## Setup chrome options&lt;/span&gt;
&lt;span class="n"&gt;chrome_options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Options&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;chrome_options&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;--headless&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Ensure GUI is off&lt;/span&gt;
&lt;span class="n"&gt;chrome_options&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;--no-sandbox&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Set path to chromedriver as per your configuration&lt;/span&gt;
&lt;span class="n"&gt;homedir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expanduser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;~&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;webdriver_service&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Service&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;homedir&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/chromedriver/stable/chromedriver&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Choose Chrome Browser&lt;/span&gt;
&lt;span class="n"&gt;browser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Chrome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;webdriver_service&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;chrome_options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Get page&lt;/span&gt;
&lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://cloudbytes.dev&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Extract description from page and print&lt;/span&gt;
&lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;By&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;description&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_attribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;content&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#Wait for 10 seconds&lt;/span&gt;
&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;b) Run the program&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Go back to your terminal and type &lt;code&gt;python3 selenium/run_selenium.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="run-selenium" src="http://localhost:8080/images/99999966-run-selenium.png"&gt;&lt;/p&gt;
&lt;h2 id="creating-a-script-to-automate-the-process"&gt;Creating a script to automate the process&lt;/h2&gt;
&lt;p&gt;We can merge the above steps to create a simple bash script to help you automate this entire process. Save this to a file named &lt;code&gt;install-selenium.sh&lt;/code&gt; and then make it executable by running &lt;code&gt;chmod +x install-selenium&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/usr/bin/bash&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Changing to home directory...&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;pushd&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Update the repository and any packages...&amp;quot;&lt;/span&gt;
sudo apt update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo apt upgrade -y

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Install prerequisite packages...&amp;quot;&lt;/span&gt;
sudo apt install wget curl unzip -y

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Download the latest Chrome .deb file...&amp;quot;&lt;/span&gt;
wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Install Google Chrome...&amp;quot;&lt;/span&gt;
sudo dpkg -i google-chrome-stable_current_amd64.deb

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Fix dependencies...&amp;quot;&lt;/span&gt;
sudo apt --fix-broken install -y

&lt;span class="nv"&gt;chrome_version&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;google-chrome-stable --version&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Chrome version: &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;chrome_version&lt;/span&gt;&lt;span class="p"&gt;[2]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;

&lt;span class="nv"&gt;chromedriver_version&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;curl &lt;span class="s2"&gt;&amp;quot;https://chromedriver.storage.googleapis.com/LATEST_RELEASE&amp;quot;&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Chromedriver version: &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;chromedriver_version&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;chrome_version&lt;/span&gt;&lt;span class="p"&gt;[2]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nv"&gt;$chromedriver_version&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Compatible Chromedriver is available...&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Proceeding with installation...&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Compabible Chromedriver not available...exiting&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Downloading latest Chromedriver...&amp;quot;&lt;/span&gt;
curl -Lo chromedriver_linux64.zip &lt;span class="s2"&gt;&amp;quot;https://chromedriver.storage.googleapis.com/&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;chromedriver_version&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/chromedriver_linux64.zip&amp;quot;&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Unzip the binary file and make it executable...&amp;quot;&lt;/span&gt;
mkdir -p &lt;span class="s2"&gt;&amp;quot;chromedriver/stable&amp;quot;&lt;/span&gt;
unzip -q &lt;span class="s2"&gt;&amp;quot;chromedriver_linux64.zip&amp;quot;&lt;/span&gt; -d &lt;span class="s2"&gt;&amp;quot;chromedriver/stable&amp;quot;&lt;/span&gt;
chmod +x &lt;span class="s2"&gt;&amp;quot;chromedriver/stable/chromedriver&amp;quot;&lt;/span&gt;

&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Install Selenium...&amp;quot;&lt;/span&gt;
python3 -m pip install selenium

&lt;span class="nb"&gt;popd&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Alternatively, this script is also available on &lt;a href="https://github.com/rehanhaider/selenium-wsl2-ubuntu.git"&gt;GitHub as a repository&lt;/a&gt;.&lt;/p&gt;</content><category term="Snippets"></category><category term="ubuntu"></category><category term="selenium"></category><category term="wsl2"></category><category term="python"></category></entry><entry><title>WSL2: Find and Delete Zone.Identifier files</title><link href="http://localhost:8080/snippets/wsl2-find-and-delete-zoneidentifier-files" rel="alternate"></link><published>2021-11-10T00:00:00+00:00</published><updated>2021-11-10T00:00:00+00:00</updated><author><name>Rehan Haider</name></author><id>tag:localhost,2021-11-10:/snippets/wsl2-find-and-delete-zoneidentifier-files</id><summary type="html">&lt;p&gt;Code snippet to find and delete Zone.Identifier files that gets auto-generated while copying files to WSL2&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt;: Run the below code snippet to find and delete Zone.Identifier files that gets auto-generated while copying files to WSL2&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;find . -name &lt;span class="s2"&gt;&amp;quot;*:Zone.Identifier&amp;quot;&lt;/span&gt; -type f -delete
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you ended up here chances are these pesky &lt;code&gt;*:Zone.Identifier&lt;/code&gt; files have broken something in your workflow. Otherwise they are harmless files that are generated while downloading a file by browsers &amp;amp; Windows explorer to store metadata about the file being downloaded. &lt;/p&gt;
&lt;p&gt;The technical details are unnecessary for this post and most use cases, but suffice to say its is a NTFS feature and just identifies the course of the file by using one of the &lt;a href="https://docs.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/platform-apis/ms537183(v=vs.85)?redirectedfrom=MSDN"&gt;preidentified Security Zones that are defined by Microsoft&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;But because the file name contains a &lt;code&gt;:&lt;/code&gt; colon, which actually is not a valid character in a file name, it can break certain automated workflows and scripts. For most cases, specially on WSL / Linux system you can just delete the file without any thought. &lt;/p&gt;
&lt;p&gt;To do so, just run the following command in the root of the directory where you want to search and delete these files, .e.g. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;~/Downloads &amp;amp;&amp;amp; find . -name &amp;quot;&lt;/span&gt;*:Zone.Identifier&lt;span class="s2"&gt;&amp;quot; -type f -delete&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="microsoft-says-they-have-fixed-it-but-users-think-otherwise"&gt;Microsoft says they have fixed it, but users think otherwise.&lt;/h2&gt;
&lt;p&gt;Issues &lt;a href="https://github.com/microsoft/WSL/issues/4609"&gt;#4609&lt;/a&gt; and &lt;a href="https://github.com/microsoft/WSL/issues/7456"&gt;#7456&lt;/a&gt; on the official WSL repository provides more details, however, this issue is definitely not fixed in Windows 11. &lt;/p&gt;</content><category term="Snippets"></category><category term="linux"></category><category term="wsl2"></category><category term="ubuntu"></category><category term="windows"></category></entry><entry><title>Configure logging in AWS Lambda to CloudWatch using Python</title><link href="http://localhost:8080/snippets/configure-logging-in-aws-lambda-to-cloudwatch-using-python" rel="alternate"></link><published>2021-11-06T00:00:00+00:00</published><updated>2021-11-06T00:00:00+00:00</updated><author><name>Rehan Haider</name></author><id>tag:localhost,2021-11-06:/snippets/configure-logging-in-aws-lambda-to-cloudwatch-using-python</id><summary type="html">&lt;p&gt;How to log events to CloudWatch during AWS Lambda execution using Python&lt;/p&gt;</summary><content type="html">&lt;p&gt;Logging events to CloudWatch log stream during execution is as simple as normal logging. You might be tempted to use &lt;code&gt;print&lt;/code&gt;, and it may work, if it's not a good practice. &lt;/p&gt;
&lt;p&gt;Rather you should be using the &lt;code&gt;logging&lt;/code&gt; module. &lt;/p&gt;
&lt;p&gt;Below in a rather simple example, I write a Lambda function that logs a "Hello, today is &amp;lt;today's date&gt;!" message to CloudWatch log stream. &lt;/p&gt;
&lt;h2 id="getting-started"&gt;Getting Started&lt;/h2&gt;
&lt;p&gt;You should follow the steps in this &lt;a href="http://localhost:8080/snippets/build-deploy-serverless-apps-on-aws-with-sam-cli"&gt;SAM guide to setup a basic Lambda function&lt;/a&gt; to setup a Lambda function.&lt;/p&gt;
&lt;h2 id="writing-a-lambda-function-to-log-to-cloudwatch"&gt;Writing a Lambda function to log to CloudWatch&lt;/h2&gt;
&lt;p&gt;Edit the Lambda function under &lt;code&gt;hellow_world/app.py&lt;/code&gt;, and change the code to the following&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;

&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basicConfig&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;HELLO&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setLevel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;INFO&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;date_today&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;%Y-%m-&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;lambda_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello, today is &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;date_today&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then execute this by following the instructions here &lt;a href="http://localhost:8080/snippets/build-deploy-serverless-apps-on-aws-with-sam-cli##test-the-app"&gt;instructions here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now you can go to the Lambda function's CloudWatch log stream and see the message being printed everytime you execute the funcion.&lt;/p&gt;</content><category term="Snippets"></category><category term="aws"></category><category term="python"></category></entry><entry><title>Launching Pelican Algolia plugin for Pelican</title><link href="http://localhost:8080/snippets/launching-pelican-algolia-plugin-for-pelican" rel="alternate"></link><published>2021-11-05T00:00:00+00:00</published><updated>2021-11-05T00:00:00+00:00</updated><author><name>Rehan Haider</name></author><id>tag:localhost,2021-11-05:/snippets/launching-pelican-algolia-plugin-for-pelican</id><summary type="html">&lt;p&gt;Launching Pelican Algolia plugin, an open source software published on PyPi, that can help integrate Algolia Search in your Pelican blog.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Pelican's preferred search tool, Tipue Search, is defunct. It is no longer maintained and the website has been shut down. &lt;/p&gt;
&lt;p&gt;So I decided to write a plugin for Pelican to integrate Algolia Search, and release it as a opensource software. &lt;/p&gt;
&lt;p&gt;The Github repository is available here: &lt;a href="https://github.com/rehanhaider/pelican-algolia"&gt;pelican-algolia&lt;/a&gt;
The PyPi repository is available here: &lt;a href="https://pypi.org/project/pelican-algolia/"&gt;pelican-algolia&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="installation-of-pelican-algolia-plugin"&gt;Installation of Pelican Algolia plugin&lt;/h2&gt;
&lt;p&gt;Installation is easy. Just install the plugin from PyPi.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip install pelican-algolia
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="usage-of-pelican-algolia-plugin"&gt;Usage of Pelican Algolia plugin&lt;/h2&gt;
&lt;p&gt;Detailed instructions are available on the &lt;a href="https://github.com/rehanhaider/pelican-algolia"&gt;GitHub repository&lt;/a&gt;, however in summary you need to set the following in your pelican configuration file (&lt;code&gt;pelicanconf.py&lt;/code&gt; or &lt;code&gt;publishconf.py&lt;/code&gt; depending on your usage):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Algolia Publish Data&lt;/span&gt;

&lt;span class="c1"&gt;# Admin key is sensitive so fetching it from environment variable is recommended&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="n"&gt;ALGOLIA_ADMIN_API_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ALGOLIA_ADMIN_API_KEY&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;ALGOLIA_APP_ID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;Your Algolia App ID&amp;gt;&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;ALGOLIA_SEARCH_API_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;Your Search-only Api Key&amp;gt;&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;ALGOLIA_INDEX_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;You Algolia App Index name&amp;gt;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="what-gets-uploaded-to-algolia"&gt;What gets uploaded to Algolia&lt;/h3&gt;
&lt;p&gt;For every article that gets published, the following record gets uploaded to Algolia:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Slug&lt;/strong&gt;: The slug of the article, e.g. the slug of this article is &lt;code&gt;launching-pelican-algolia-plugin-for-pelican&lt;/code&gt; that can be seen in the URL of this article.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Title&lt;/strong&gt;: Title of the article&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;URL&lt;/strong&gt;: Full URL of the article, this is needed to ensure the results have correct links.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tags&lt;/strong&gt;: Tags assigned to an article&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;category&lt;/strong&gt;: Category assigned to an article&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;content&lt;/strong&gt;: Full content of your article&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;With slug used as the primary key to avoid duplication.&lt;/p&gt;
&lt;h2 id="creating-a-search-box"&gt;Creating a search box&lt;/h2&gt;
&lt;p&gt;To make a working search box, you need to do two things&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a &lt;a href="#1-html-search-box"&gt;HTML Search box&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Include the &lt;a href="#2-javascript-code"&gt;Javascript code&lt;/a&gt; in your HTML page&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="1-html-search-box"&gt;1. HTML Search box&lt;/h3&gt;
&lt;p&gt;Here's what I have on &lt;a href="https://cloudbytes.dev"&gt;CloudBytes/dev&amp;gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;algolia-hits&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;algolia-form-wrap&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Search for bytes ...&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;algolia-input&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;algolia-input&amp;quot;&lt;/span&gt;
                &lt;span class="na"&gt;autocomplete&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;off&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;search-close&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;algolia-close btn btn-red&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;X&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note the &lt;code&gt;id=algolia-input&lt;/code&gt; in the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; tag above, this needs to be added to the JavaScript code below.&lt;/p&gt;
&lt;h3 id="2-javascript-code"&gt;2. Javascript code&lt;/h3&gt;
&lt;p&gt;Place this right at the bottom of you HTML just before closing &lt;/html&gt; tag.
Replace the `autocomplete('#algolia-input', ... ) with the ID of input field shown above.&lt;/p&gt;
&lt;p&gt;The code below includes JINJA syntax so it needs to be added to your HTML templates to ensure they are correctly replaced during generation.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c"&gt;&amp;lt;!--&lt;/span&gt; &lt;span class="nx"&gt;Include&lt;/span&gt; &lt;span class="nx"&gt;AlgoliaSearch&lt;/span&gt; &lt;span class="nx"&gt;JS&lt;/span&gt; &lt;span class="nx"&gt;Client&lt;/span&gt; &lt;span class="nx"&gt;and&lt;/span&gt; &lt;span class="nx"&gt;autocomplete&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;js&lt;/span&gt; &lt;span class="nx"&gt;library&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://cdn.jsdelivr.net/algoliasearch/3/algoliasearch.min.js&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/script&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt; &lt;span class="nx"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://cdn.jsdelivr.net/autocomplete.js/0/autocomplete.min.js&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/script&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!--&lt;/span&gt; &lt;span class="nx"&gt;Initialize&lt;/span&gt; &lt;span class="nx"&gt;autocomplete&lt;/span&gt; &lt;span class="nx"&gt;menu&lt;/span&gt; &lt;span class="o"&gt;--&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;algoliasearch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;{{ALGOLIA_APP_ID}}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;{{ALGOLIA_SEARCH_API_KEY}}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;initIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{{ALGOLIA_INDEX_NAME}}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;//initialize autocomplete on search input (ID selector must match)&lt;/span&gt;
    &lt;span class="nx"&gt;autocomplete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#algolia-input&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;hint&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;source&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;autocomplete&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;sources&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;hits&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;hitsPerPage&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;10&lt;/span&gt; &lt;span class="p"&gt;}),&lt;/span&gt;
        &lt;span class="c1"&gt;//value to be displayed in input control after user&amp;#39;s suggestion selection&lt;/span&gt;
        &lt;span class="nx"&gt;displayKey&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="c1"&gt;//hash of templates used when rendering dataset&lt;/span&gt;
        &lt;span class="nx"&gt;templates&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;//&amp;#39;suggestion&amp;#39; templating function used to render a single suggestion&lt;/span&gt;
            &lt;span class="nx"&gt;suggestion&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;suggestion&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;a class=&amp;quot;algolia-hit&amp;quot; href=&amp;quot;/&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;suggestion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;quot;&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                    &lt;span class="s1"&gt;&amp;#39;&amp;lt;h4&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                    &lt;span class="s1"&gt;&amp;#39;&amp;lt;span class=&amp;quot;hit-title&amp;quot;&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;suggestion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;_highlightResult&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;title&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;/span&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                    &lt;span class="s1"&gt;&amp;#39;&amp;lt;/h4&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
                    &lt;span class="s1"&gt;&amp;#39;&amp;lt;/a&amp;gt;&amp;#39;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="what-next"&gt;What next?&lt;/h2&gt;
&lt;p&gt;On the horizon is the ability to choose which records gets published. For now, the plugin will publish all records.&lt;/p&gt;</content><category term="Snippets"></category><category term="python"></category><category term="pelican"></category><category term="algolia"></category></entry><entry><title>Limit article tags to allowed list in Pelican SSG</title><link href="http://localhost:8080/snippets/limit-article-tags-to-allowed-list-in-pelican-ssg" rel="alternate"></link><published>2021-11-04T00:00:00+00:00</published><updated>2021-11-04T00:00:00+00:00</updated><author><name>Rehan Haider</name></author><id>tag:localhost,2021-11-04:/snippets/limit-article-tags-to-allowed-list-in-pelican-ssg</id><summary type="html">&lt;p&gt;How to limit article tags to only an allowed list in Pelican SSG and not end up with too many tags.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Pelican makes it easy to create tags for your articles, where you can simply define them as part of the article's metadata.&lt;/p&gt;
&lt;p&gt;E.g., this posts has two tags: "python" and "pelican" which are defined in the posts's markdown metadata.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Title: Limit tags and categories to allowed list in Pelican SSG
Date: 2021-11-04
Category: Snippets
Tags: python, pelican
Author: Rehan Haider
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But this also means you can end up with too many tags they can get out of control. &lt;/p&gt;
&lt;p&gt;I try to provide a simple way to limit the tags to a list of allowed tags below. &lt;/p&gt;
&lt;h2 id="how-to-limit-tags-in-pelican"&gt;How to limit tags in Pelican&lt;/h2&gt;
&lt;p&gt;First, create a variables in &lt;code&gt;pelicanconf.py&lt;/code&gt; file (the Pelican configuration file). This will contain the list of allowed tags, e.g. below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# Add this to you pelicanconf.py file&lt;/span&gt;

&lt;span class="n"&gt;ALLOWED_TAGS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;python&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pelican&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;firebase&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;aws&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once these are defined, they can be called be used directly in your SSG theme templates for the Pelican website, e.g. in the &lt;code&gt;article.html&lt;/code&gt; template to limit the categories to only the ones from the list above, we can create a small JINJA snippet to do this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;article-tags&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    {% for tag in article.tags %}
    {% if tag in ALLOWED_TAGS %}
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/tags/{{tag}}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;{{tag}}&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    {% endif %}
    {% endfor %}
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will ensure that only the tags from the list defined in &lt;code&gt;pelicanconf.py&lt;/code&gt; are displayed, and the rest are suppressed.&lt;/p&gt;
&lt;h3 id="why-not-limit-the-tags-at-source"&gt;Why not limit the tags at source?&lt;/h3&gt;
&lt;p&gt;Two reasons, the first is that Pelican's content is written in markdown, which is a plain text format so one cannot stop someone from adding a tag that wasn't approved in the article metadata. &lt;/p&gt;
&lt;p&gt;The second is, you can potentially stop Pelican from processing a file if it contains a tag that isn't approved listed in the &lt;code&gt;pelicanconf.py&lt;/code&gt; file, but this just seems a bit messy specially if you have multple authors considering not all of them will be well versed with Pelican's internals and also the fact that this adds an additional layer of processing which can potentially slow down the generation of the website.&lt;/p&gt;
&lt;p&gt;But the main reason I wouldn't limit it at generation is because pelican's internals are a bit fragile and I've managed to break it in a few ways, so I'm not sure if it's worth the risk.&lt;/p&gt;
&lt;p&gt;If you have questions / suggestions feel free to create a new discussion on &lt;a href="https://github.com/CloudBytesDotDev/CloudBytes.dev/discussions"&gt;CloudBytes/dev&amp;gt; Github discussions&lt;/a&gt;&lt;/p&gt;</content><category term="Snippets"></category><category term="python"></category><category term="pelican"></category></entry><entry><title>Find and test invalid links and 404 errors using Python &amp; Pytest</title><link href="http://localhost:8080/snippets/find-and-test-invalid-links-and-404-errors-using-python-pytest" rel="alternate"></link><published>2021-11-01T00:00:00+00:00</published><updated>2021-11-01T00:00:00+00:00</updated><author><name>Rehan Haider</name></author><id>tag:localhost,2021-11-01:/snippets/find-and-test-invalid-links-and-404-errors-using-python-pytest</id><summary type="html">&lt;p&gt;A short guide to scrape your own website, find invalid links, and highlight links that result in 404 errors&lt;/p&gt;</summary><content type="html">&lt;p&gt;TL;DR: Go to the &lt;a href="#the-solution-workflow-to-validate-the-links"&gt;solution&lt;/a&gt; directly.&lt;/p&gt;
&lt;p&gt;So, I recently managed to break something on &lt;a href="https://cloudbytes.dev"&gt;CloudBytes/dev&amp;gt;&lt;/a&gt;. All the internal links on the site were broken, and I published the website. &lt;/p&gt;
&lt;p&gt;I only noticed the error when the number of 404 erros increased significantly in the analytics report. So I set about creating a Python script to find the broken links and highlight them during the &lt;a href="http://localhost:8080/snippets/build-cicd-pipelines-using-artifacts-with-github-actions"&gt;Continous Integration process I have setup&lt;/a&gt;. &lt;/p&gt;
&lt;h2 id="the-solution-workflow-to-validate-the-links"&gt;The Solution Workflow to validate the links&lt;/h2&gt;
&lt;p&gt;I came up with the following set of steps to first populate the links and then validate if they exist. &lt;/p&gt;
&lt;p&gt;To begin with: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Fetch the sitemap.xml file from the website &amp;amp; create a list of all links on the website&lt;/li&gt;
&lt;li&gt;For each link in the list, check if it exists on the website and fetch the webpage&lt;/li&gt;
&lt;li&gt;Find all the links in the webpage&lt;/li&gt;
&lt;li&gt;Then request the webpage for each link and check if it exists&lt;/li&gt;
&lt;li&gt;If the page exists, then add it to the list of valid links&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="pytest-program-to-scrawl-test-website"&gt;Pytest Program to Scrawl &amp;amp; Test Website&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pytest&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bs4&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;

&lt;span class="n"&gt;BASE_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://localhost:8080&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;SITE_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://cloudbytes.dev&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_sitemap_links&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    This function gets all links from the sitemap&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;sitemap_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BASE_URL&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/sitemap.xml&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;sitemap_response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sitemap_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sitemap_soup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sitemap_response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;lxml&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sitemap_links&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sitemap_soup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;loc&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;sitemap_urls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sitemap_links&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SITE_URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BASE_URL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;sitemap_urls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;sitemap_urls&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_page_links&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    This function gets all links from a page&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;page_response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;page_soup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page_response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;html5lib&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;page_links&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;page_soup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;page_urls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;page_links&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;href&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BASE_URL&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;
            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BASE_URL&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;page_urls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;pass&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;page_urls&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_internal_links&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    This function tests all internal links in the URLs on the sitemap&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;sitemap_urls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_sitemap_links&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;valid_urls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sitemap_urls&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;page_urls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_page_links&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;page_url&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;page_urls&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;page_url&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;valid_urls&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;
                &lt;span class="n"&gt;valid_urls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="explanation"&gt;Explanation&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Step 0:&lt;/strong&gt; Set the Site URL and Base URL&lt;/p&gt;
&lt;p&gt;I set BASE_URL to localhost and SITE_URL to cloudbytes.dev. The reason for doing both is that in the CI process I use the localhost server to run the tests, but you can use the same program above to test a live website with minor changes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;BASE_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://localhost:8080&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;SITE_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://cloudbytes.dev&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; Fetch the sitemap.xml file from the website &amp;amp; create a list of all links on the website&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_sitemap_links&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    This function gets all links from the sitemap&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;sitemap_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BASE_URL&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/sitemap.xml&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;sitemap_response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sitemap_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sitemap_soup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sitemap_response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;lxml&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sitemap_links&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sitemap_soup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;loc&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;sitemap_urls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sitemap_links&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SITE_URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BASE_URL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;sitemap_urls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;sitemap_urls&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I also create a function to get all the links from a webpage passed as an argument&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_page_links&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    This function gets all links from a page&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="n"&gt;page_response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;page_soup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page_response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;html5lib&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;page_links&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;page_soup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;page_urls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;page_links&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;href&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BASE_URL&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;
            &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BASE_URL&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;page_urls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;pass&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;page_urls&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 2&lt;/strong&gt; For each link in the list, check if it exists on the website and fetch the webpage&lt;/p&gt;
&lt;p&gt;We do this in the &lt;code&gt;test_internal_links&lt;/code&gt; function, where we get all the links in the sitemap&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="n"&gt;sitemap_urls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_sitemap_links&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 3&lt;/strong&gt; Find all the links in the webpage&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sitemap_urls&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;page_urls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_page_links&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 4&lt;/strong&gt; Then request the webpage for each link and check if it exists&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;page_url&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;page_urls&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;page_url&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;valid_urls&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 5&lt;/strong&gt; If the page exists, then add it to the list of valid links&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;                &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;
                &lt;span class="n"&gt;valid_urls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally, run this script by running the following command (You need to have &lt;code&gt;pytest&lt;/code&gt; installed):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pytest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And this will scrape through the entire website and check if all the internal links are valid.&lt;/p&gt;</content><category term="Snippets"></category><category term="python"></category></entry><entry><title>Build CI/CD pipelines using artifacts with GitHub Actions</title><link href="http://localhost:8080/snippets/build-cicd-pipelines-using-artifacts-with-github-actions" rel="alternate"></link><published>2021-10-30T00:00:00+00:00</published><updated>2021-10-30T00:00:00+00:00</updated><author><name>Rehan Haider</name></author><id>tag:localhost,2021-10-30:/snippets/build-cicd-pipelines-using-artifacts-with-github-actions</id><summary type="html">&lt;p&gt;Create a CI/CD pipeline using GitHub Actions to build, test, and deploy you website&lt;/p&gt;</summary><content type="html">&lt;p&gt;This guide will differ from other guides about GitHub Actions in that it will be focused on how to transfer the build artifacts &amp;amp; outputs across multiple steps. &lt;/p&gt;
&lt;p&gt;If you know what you're doing, you can skip the introduction and go straight to the &lt;a href="http://localhost:8080/snippets/build-cicd-pipelines-using-artifacts-with-github-actions#using-GitHub-artifacts"&gt;Building CI/CD pipelines with GitHub Actions&lt;/a&gt; guide.&lt;/p&gt;
&lt;h2 id="what-is-a-cicd-pipeline"&gt;What is a CI/CD pipeline?&lt;/h2&gt;
&lt;p&gt;CI/CD pipeline is a sequence of steps that are executed to build, test, and deploy your website. It stands for Continuous Integration/Continuous Deployment.&lt;/p&gt;
&lt;p&gt;Typically CI/CD pipelines are built by DevOps professionals using variety of tools such as GitHub Action, AWS CodePipeline, Jenkins, and others.&lt;/p&gt;
&lt;p&gt;&lt;img alt="CI/CD pipeline" src="http://localhost:8080/images/99999971-ci-cd-workflow.png"&gt;&lt;/p&gt;
&lt;p&gt;The above figure shows a typical CI/CD pipeline but depending on use case there could be fewer or more steps. &lt;/p&gt;
&lt;p&gt;CI/CD pipelines makes it easier for a developer to build, test, and deploy their website or app by automating the steps associated with the deployement, e.g., in the above workflow, as soon as the developer pushes their code to the repository, the pipeline starts executing the steps associated with the build, test, and deployement.&lt;/p&gt;
&lt;h3 id="what-is-a-github-action"&gt;What is a GitHub Action?&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/features/actions"&gt;GitHub Action&lt;/a&gt; is GitHub's native CI/CD workflow management tool. It uses YAML files to declaratively define the steps that needs to be executed. &lt;/p&gt;
&lt;p&gt;Like other tools, GitHub Actions provides an extensive set of tools and options to build CI/CD pipelines. &lt;/p&gt;
&lt;h2 id="deploying-a-static-website-to-firebase"&gt;Deploying a Static Website to firebase&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://cloudbytes.dev"&gt;CloudBytes/dev&amp;gt;&lt;/a&gt; is built on &lt;a href="http://localhost:8080/snippets/what-is-jamstack-and-why-should-you-be-using-it"&gt;JAMStack&lt;/a&gt; architecture and uses GitHub Actions to deploy the static website generated by Pelican to Firebase Hosting. &lt;/p&gt;
&lt;p&gt;The simplest way to do that is by using the below GitHub Workflow. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# .github/workflows/deploy.yml&lt;/span&gt;
&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Deploy&lt;/span&gt;

&lt;span class="nt"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;push&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;branches&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;main&lt;/span&gt;

&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;build_and_deploy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;runs-on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="nt"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;rehanhaider/pelican-build-action@v0.1.10&lt;/span&gt;
        &lt;span class="nt"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nt"&gt;PELICAN_CONFIG_FILE&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;app/publishconf.py&lt;/span&gt;
          &lt;span class="nt"&gt;PELICAN_CONTENT_FOLDER&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;app/content&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;FirebaseExtended/action-hosting-deploy@v0&lt;/span&gt;
        &lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nt"&gt;repoToken&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;${{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;secrets.GITHUB_TOKEN&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;quot;&lt;/span&gt;
          &lt;span class="nt"&gt;firebaseServiceAccount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;${{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;secrets.FIREBASE_SERVICE_ACCOUNT_CLOUDBYTES_PROD&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;quot;&lt;/span&gt;
          &lt;span class="nt"&gt;channelId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;live&lt;/span&gt;
          &lt;span class="nt"&gt;projectId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;cloudbytes-prod&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The above workflow is execetud &lt;code&gt;on&lt;/code&gt; the &lt;code&gt;push&lt;/code&gt; event of the &lt;code&gt;main&lt;/code&gt; branch. It has only one job that does both build and deployment of the website. However, this will present a problem if we wanted to introduce additional jobs in the pipeline because each job runs on a separate container. So if we wanted to split build and deployment into two jobs, we would need to repeat the build process twice because the first job would  build the website but the second job will not have access to the output. &lt;/p&gt;
&lt;p&gt;So solve this, you need to use a GitHub Actions feature called &lt;a href="http://localhost:8080/snippets/build-cicd-pipelines-using-artifacts-with-github-actions#using-GitHub-artifacts"&gt;GitHub Actions Artifacts&lt;/a&gt; to transfer the build artifacts from one job to another.&lt;/p&gt;
&lt;h2 id="using-github-artifacts"&gt;Using GitHub Artifacts&lt;/h2&gt;
&lt;p&gt;GitHub Artifacts can be used to transfer the build outputs and artifacts between two jobs. To do that you need to 
1. Upload you build artifacts that includes the "output" and configuration files
2. Then add the build step as a dependency on the next job
3. And finally download the artifact&lt;/p&gt;
&lt;p&gt;The above workflow can be modified to the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Deployment&lt;/span&gt;

&lt;span class="nt"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;push&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;branches&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;main&lt;/span&gt;

&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;build&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Build&lt;/span&gt;
    &lt;span class="nt"&gt;runs-on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="nt"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/checkout@v2&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Build Pelican Website&lt;/span&gt;
        &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;rehanhaider/pelican-build-action@v0.1.10&lt;/span&gt;
        &lt;span class="nt"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nt"&gt;PELICAN_CONFIG_FILE&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;app/publishconf.py&lt;/span&gt;
          &lt;span class="nt"&gt;PELICAN_CONTENT_FOLDER&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;app/content&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Upload the build output&lt;/span&gt;
        &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/upload-artifact@v2&lt;/span&gt;
        &lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;build-output&lt;/span&gt;
          &lt;span class="nt"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
            &lt;span class="no"&gt;output/&lt;/span&gt;
            &lt;span class="no"&gt;.firebaserc&lt;/span&gt;
            &lt;span class="no"&gt;firebase.json&lt;/span&gt;
          &lt;span class="nt"&gt;retention-days&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt;
  &lt;span class="nt"&gt;deploy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Deploy&lt;/span&gt;
    &lt;span class="nt"&gt;needs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;build&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
    &lt;span class="nt"&gt;runs-on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="nt"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Download the build output&lt;/span&gt;
        &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/download-artifact@v2&lt;/span&gt;
        &lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;build-output&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Deploy to Firebase&lt;/span&gt;
        &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;FirebaseExtended/action-hosting-deploy@v0&lt;/span&gt;
        &lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nt"&gt;repoToken&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;${{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;secrets.GITHUB_TOKEN&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;quot;&lt;/span&gt;
          &lt;span class="nt"&gt;firebaseServiceAccount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;${{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;secrets.FIREBASE_SERVICE_ACCOUNT_CLOUDBYTES_PROD&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;quot;&lt;/span&gt;
          &lt;span class="nt"&gt;channelId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;live&lt;/span&gt;
          &lt;span class="nt"&gt;projectId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;cloudbytes-prod&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the above example, we used &lt;code&gt;upload-artifact@v2&lt;/code&gt; action, named it &lt;code&gt;build-output&lt;/code&gt; and added the files &amp;amp; directories under &lt;code&gt;path&lt;/code&gt;. For pelican we needed the output folder, in this case &lt;code&gt;output&lt;/code&gt;, and the two Firebase configuration files. &lt;/p&gt;
&lt;p&gt;Then during the deployment step, we used &lt;code&gt;download-artifact@v2&lt;/code&gt; action to download the &lt;code&gt;build-output&lt;/code&gt; and subsequently deployed the result to Firebase using &lt;code&gt;FirebaseExtended/action-hosting-deploy@v0&lt;/code&gt; action.&lt;/p&gt;
&lt;p&gt;Once the above workflow is defined, any code that is pushed to the &lt;code&gt;main&lt;/code&gt; branch will trigger a GitHub Action and the workflow will look something like this:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Github Action Output" src="http://localhost:8080/images/99999971-github-action-output.png"&gt;&lt;/p&gt;
&lt;h3 id="benefits-of-using-github-action-artifacts"&gt;Benefits of using GitHub Action artifacts&lt;/h3&gt;
&lt;p&gt;The biggest benefit of using GitHub Actions artifacts is that it allows you to transfer the build artifacts from one job to another. This is useful when you want to split the piepline into several steps and add or remove steps in future. E.g. in the above workflow, we can add a new job called &lt;code&gt;test&lt;/code&gt; that runs the tests without having to change the existing steps in the workflow. &lt;/p&gt;</content><category term="Snippets"></category><category term="github"></category><category term="pelican"></category><category term="python"></category></entry><entry><title>Create a Pelican plugin to minify HTML, CSS, and JS</title><link href="http://localhost:8080/snippets/pelican-plugin-to-minify-html-css-and-js" rel="alternate"></link><published>2021-10-26T00:00:00+00:00</published><updated>2021-10-26T00:00:00+00:00</updated><author><name>Rehan Haider</name></author><id>tag:localhost,2021-10-26:/snippets/pelican-plugin-to-minify-html-css-and-js</id><summary type="html">&lt;p&gt;Write a Pelican plugin to minify HTML, CSS, and JS files without breaking your website&lt;/p&gt;</summary><content type="html">&lt;p&gt;TL;DR - &lt;a href="#"&gt;Minify you Pelican Website&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://developers.google.com/speed/docs/insights/MinifyResources"&gt;Minification&lt;/a&gt; of wesite resources is an essential step for good PageSpeed / Lighthouse scores, and as I've bragged in past, &lt;a href="https://cloudbytes.dev"&gt;CloudBytes/dev&amp;gt;&lt;/a&gt; scores a perfect 100. &lt;/p&gt;
&lt;p&gt;&lt;img alt="CloudBytes.dev PageSpeed Score" src="http://localhost:8080/images/99999972-PageSpeed-Score-(Small).png"&gt;&lt;/p&gt;
&lt;p&gt;This is partly because Website generated by &lt;a href="http://localhost:8080/snippets/what-is-jamstack-and-why-should-you-be-using-it"&gt;SSGs&lt;/a&gt; are generally faster than the ones generated using CMS solutions like WordPress, etc. But the main reason is non-redundant JS &amp;amp; CSS code. &lt;/p&gt;
&lt;p&gt;To make websites faster still, you minify the contents of all the HTML, CSS &amp;amp; JS files which typically results in smaller file sizes that consequently means faster load times for users. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Minify Reduction" src="http://localhost:8080/images/99999972-minify_reduction.png"&gt;&lt;/p&gt;
&lt;h2 id="minify-your-pelican-website"&gt;Minify your Pelican Website&lt;/h2&gt;
&lt;p&gt;There are a lot of options in Python to minify your webassets, but none of them work. Either they break your website (e.g. remove embedded JS code) or are outdated and not maintained. I personally tried the below in dev environment:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;❌ &lt;a href="https://github.com/getpelican/pelican-plugins/tree/master/css-html-js-minify"&gt;Unofficial Pelican Plugin: css-html-js-minify&lt;/a&gt;: Broke the website 💔, removed embedded JS, deleted some CSS variables &amp;amp; class definitions.&lt;/li&gt;
&lt;li&gt;❌&lt;a href="https://github.com/pelican-plugins/webassets"&gt;Official Pelican Plugin&lt;/a&gt;: Extremely promising, is useless, and doesn't work. Becase it doesn't minify HTML pages, and it relies on additional 3rd party modules for minification and those modules are either unmaintained (&lt;a href="https://github.com/zacharyvoase/cssmin"&gt;cssmin&lt;/a&gt;,css_yui, etc) or simply doesn't work and breaks the site (&lt;a href="http://cthedot.de/cssutils/"&gt;cssutils&lt;/a&gt;), or requires NPM/NodeJS modules that needs to be installed manually (&lt;a href="https://github.com/clean-css/clean-css"&gt;cleancss&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;❌Non-Python packages such as &lt;a href="https://github.com/kangax/html-minifier"&gt;html-minifier&lt;/a&gt;, &lt;a href="https://github.com/Swaagie/minimize"&gt;minimize&lt;/a&gt;, etc. These could have been used but the hassle of integrating them into the CI/CD workflow was too much&lt;/li&gt;
&lt;li&gt;✅ &lt;a href="https://pypi.org/project/minify-html/"&gt;minify-html&lt;/a&gt;: This seemed to work without breaking the website. &lt;a href="https://github.com/wilsonzlin/minify-html"&gt;Minify HTML&lt;/a&gt; is a  Rust app but with APIs available in several languages (Python, Ruby, NodeJS, Java, etc) which made it easy to write a simple plugin.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="writing-the-minification-plugin"&gt;Writing the Minification Plugin&lt;/h2&gt;
&lt;p&gt;First step is to install the minify-html package. Run the following command&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip install minify_html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then create a plugin, using the below code&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;minify_html&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;glob&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pelican&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;signals&lt;/span&gt;

&lt;span class="n"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pelican&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;glob&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iglob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pelican&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;output_path&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/**/*.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;recursive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Processing &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;minified&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;minify_html&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;minify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;do_not_minify_doctype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;minified&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;register&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;signals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;finalized&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Add it to the plugins list in &lt;code&gt;pelicanconf.py&lt;/code&gt; and you're good to go with a website that is almost 20-30% faster&lt;/p&gt;</content><category term="Snippets"></category><category term="pelican"></category><category term="python"></category></entry><entry><title>Firebase Hosting Redirects using Wildcard</title><link href="http://localhost:8080/snippets/firebase-hosting-redirects-using-wildcard" rel="alternate"></link><published>2021-10-24T00:00:00+00:00</published><updated>2021-10-24T00:00:00+00:00</updated><author><name>Rehan Haider</name></author><id>tag:localhost,2021-10-24:/snippets/firebase-hosting-redirects-using-wildcard</id><summary type="html">&lt;p&gt;Configure redirects on Firebase Hosting using wildcards for groups of URLs&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://firebase.google.com/docs/hosting"&gt;Firebase Hosting&lt;/a&gt; is a popular choice for hosting &lt;a href="http://localhost:8080/snippets/what-is-jamstack-and-why-should-you-be-using-it"&gt;Jamstack&lt;/a&gt; websites, mostly because it is free but also because it is &lt;a href="http://localhost:8080/snippets/auto-deploy-pelican-websites-to-firebase-hosting"&gt;developer friendly&lt;/a&gt; and has almost all features that you might want.&lt;/p&gt;
&lt;p&gt;One of the most vital features Firebase Hosting has is the ability to do &lt;strong&gt;URL Redirects&lt;/strong&gt; including 301 redirects. &lt;/p&gt;
&lt;p&gt;If you have a firebase project, you can configure Firebase Hosting following &lt;a href="http://localhost:8080/snippets/auto-deploy-pelican-websites-to-firebase-hosting#2-create-configure-the-firebase-project"&gt;these steps&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Then, if you want to redirect a URL &lt;code&gt;www.example.com/articles/my-brilliant-article&lt;/code&gt; to &lt;code&gt;www.example.com/post/my-brilliant-post&lt;/code&gt;  you just need to add a directive in &lt;code&gt;firebase.json&lt;/code&gt; file that was created as part of the above configuration&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;hosting&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;public&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;output&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;ignore&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;firebase.json&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;**/.*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;**/node_modules/**&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;redirects&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;source&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/articles/my-brilliant-article&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;destination&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/posts/my-brilliant-post&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;301&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It's as simple as that. &lt;/p&gt;
&lt;p&gt;But what if you wanted to rename your article category to post, i.e. everything that was &lt;code&gt;www.example.com/article/some-url&lt;/code&gt; now has to become &lt;code&gt;www.example.com/post/same-url&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;You might be tempted to use regex or *&lt;em&gt;wilcard&lt;/em&gt; but it won't work because regex helps in selection of the URLs not naming what it will be in future, essentially what you want to do is capture the &lt;code&gt;some-url&lt;/code&gt; in the above example and use it as &lt;code&gt;same-url&lt;/code&gt; in the redirect. &lt;/p&gt;
&lt;h1 id="using-variables-in-firebase-hosting-redirects"&gt;Using Variables in Firebase Hosting Redirects&lt;/h1&gt;
&lt;p&gt;You can define a variable as part of the redirect url by appending it with colon (:), e.g. &lt;code&gt;:path&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;So the above example would become,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;hosting&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;public&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;output&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;ignore&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;firebase.json&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;**/.*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;**/node_modules/**&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;redirects&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;source&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/articles/:path&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;destination&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/posts/:path&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;301&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will redirect all URLs that match the source pattern starting with &lt;code&gt;/articles/&lt;/code&gt; to &lt;code&gt;/posts&lt;/code&gt; while keeping the path of the file same. &lt;/p&gt;
&lt;p&gt;If you were looking for some other solution, feel free to create a new discussion from the link below.&lt;/p&gt;</content><category term="Snippets"></category><category term="firebase"></category><category term="pelican"></category><category term="python"></category></entry><entry><title>Develop remotely on Raspberry Pi using VSCode Remote SSH</title><link href="http://localhost:8080/snippets/develop-remotely-on-raspberry-pi-using-vscode-remote-ssh" rel="alternate"></link><published>2021-10-16T00:00:00+00:00</published><updated>2021-10-16T00:00:00+00:00</updated><author><name>Rehan Haider</name></author><id>tag:localhost,2021-10-16:/snippets/develop-remotely-on-raspberry-pi-using-vscode-remote-ssh</id><summary type="html">&lt;p&gt;How to connect and develop remotely on Raspberry PI by SSHing in using VSCode&lt;/p&gt;</summary><content type="html">&lt;p&gt;So you got yourself a Raspberry Pi and want to develop something on it. &lt;/p&gt;
&lt;p&gt;Raspberry Pi is of course lightweight, and consumes very little power but that also makes it quite unsuitable for developing anything small apps and running lightweight code editors such as Geany, Thonny etc. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Raspberry Pi" src="http://localhost:8080/images/99999974-raspberry-pi.png"&gt;&lt;/p&gt;
&lt;p&gt;You could use VIM, but then you need to login to your Raspberry Pi using either VNC Viewer, or SSH into Raspberry Pi using some form of terminal. But for a VSCode fan such as me, that's not an acceptable option specially because I don't want to reconfigure all of my preferences. &lt;/p&gt;
&lt;p&gt;So the compromise is, you can simply use VSCode on your PC and use VSCOde to SSH in to the Raspberry PI and develop remotely. &lt;/p&gt;
&lt;h2 id="add-raspberry-pi-as-recognised-hosts"&gt;Add Raspberry Pi as recognised hosts&lt;/h2&gt;
&lt;p&gt;Fire up your VSCode and first search and install the Microsoft provided official &lt;a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-ssh"&gt;Remote - SSH extension&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Then open the command Palette by pressing &lt;code&gt;Ctrl + Shift + P&lt;/code&gt;, search for &lt;code&gt;Remote-SSH: Connect to a Host&lt;/code&gt; then click on &lt;em&gt;"+ Add New SSH Host..."&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Then in the prompt type &lt;code&gt;ssh pi@raspberrypi&lt;/code&gt;, assuming you username is &lt;code&gt;pi&lt;/code&gt; and the hostname of your Raspberry Pi is &lt;code&gt;raspberrypi&lt;/code&gt;. Then press Enter.&lt;/p&gt;
&lt;p&gt;&lt;img alt="SSH Raspberry Pi" src="http://localhost:8080/images/99999974-ssh-command.png"&gt;&lt;/p&gt;
&lt;p&gt;When prompted to select SSH configuration file to update, choose the one under &lt;code&gt;C:\Users\YourName\.ssh\config&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="connect-to-raspberry-pi"&gt;Connect to Raspberry Pi&lt;/h2&gt;
&lt;p&gt;Then, open the Command Palette again by typing &lt;code&gt;Ctrl + Shift + P&lt;/code&gt;, and search for &lt;code&gt;Remote-SSH: Connect to a Host&lt;/code&gt; again. 
Choose &lt;code&gt;raspberrypi&lt;/code&gt; from the dropdowns. &lt;/p&gt;
&lt;p&gt;&lt;img alt="SSH Raspberry Pi" src="http://localhost:8080/images/99999974-ssh-connect.png"&gt;&lt;/p&gt;
&lt;p&gt;You will be prompted for password for your user on Raspberry Pi, enter the password. This will setup the VSCode Remote Server on the Raspberry PI. &lt;/p&gt;
&lt;p&gt;Once you're connected you should see the &lt;code&gt;SSH: raspberrypi&lt;/code&gt; on bottom left part of your VSCode. &lt;/p&gt;
&lt;h2 id="opening-a-particular-folder"&gt;Opening a particular folder&lt;/h2&gt;
&lt;p&gt;Open the explorer on VSCode and you should see the following message. Click on &lt;em&gt;Open Folder&lt;/em&gt;
&lt;img alt="SSH Raspberry Pi" src="http://localhost:8080/images/99999974-ssh-explorer.png"&gt;&lt;/p&gt;
&lt;p&gt;You will get a dropdown, navigate to the folder you want to open and then press OK. Youl will be prompted for password again. And you should now be connected to Raspberry Pi and able to develop on it remotely. 
&lt;img alt="SSH Raspberry Pi" src="http://localhost:8080/images/99999974-ssh-vscode.png"&gt;&lt;/p&gt;</content><category term="Snippets"></category><category term="python"></category><category term="raspberrypi"></category></entry><entry><title>Received &amp; return a file from in-memory buffer using FastAPI</title><link href="http://localhost:8080/snippets/received-return-a-file-from-in-memory-buffer-using-fastapi" rel="alternate"></link><published>2021-10-15T00:00:00+00:00</published><updated>2021-10-15T00:00:00+00:00</updated><author><name>Rehan Haider</name></author><id>tag:localhost,2021-10-15:/snippets/received-return-a-file-from-in-memory-buffer-using-fastapi</id><summary type="html">&lt;p&gt;How to receive a file to the in-memory buffer and then return the file from buffer using FastAPI without saving it to disk.&lt;/p&gt;</summary><content type="html">&lt;p&gt;FastAPI is fast becoming the go-to choice to write APIs using Python mostly due to its asynchronous nature. &lt;/p&gt;
&lt;p&gt;FastAPI by default will use &lt;code&gt;JSONResponse&lt;/code&gt; method to return responses, however, it has the ability to return several custom responses including &lt;code&gt;HTMLResponse&lt;/code&gt; and &lt;code&gt;FileResponse&lt;/code&gt;. However, both of these messages returns files that are saved on the disk and requires a &lt;code&gt;PATH&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;E.g. from &lt;a href="https://fastapi.tiangolo.com/advanced/custom-response/#fileresponse"&gt;FastAPI Documentation&lt;/a&gt;, &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fastapi&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fastapi.responses&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FileResponse&lt;/span&gt;

&lt;span class="n"&gt;file_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;sample-file.mp4&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response_class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;FileResponse&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;file_path&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So what if you wanted to send a file that is currently in the memory buffer, directly without the additional step of saving it on the disk? &lt;/p&gt;
&lt;h2 id="why-simply-using-streamingresponse-is-not-enough"&gt;Why simply using StreamingResponse is not enough?&lt;/h2&gt;
&lt;p&gt;The right way of sending a file from memory is by using &lt;code&gt;StreamingResponse&lt;/code&gt;, but &lt;code&gt;StreamingResponse&lt;/code&gt; requires an iterator object, e.g.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fastapi&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fastapi.responses&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;StreamingResponse&lt;/span&gt;

&lt;span class="n"&gt;some_file_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;large-video-file.mp4&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;iterfile&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;  
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;some_file_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;rb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;file_like&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
            &lt;span class="k"&gt;yield from&lt;/span&gt; &lt;span class="n"&gt;file_like&lt;/span&gt;  

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;StreamingResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iterfile&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;media_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;video/mp4&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But in reality the files e.g. images, etc. that you work with will rarely be an iterator object. Thus you are swapping one workaround with another workaround. &lt;/p&gt;
&lt;h2 id="using-streamingresponse-correctly"&gt;Using StreamingResponse correctly&lt;/h2&gt;
&lt;p&gt;Instead what we will do is, 
1. Receive the image directly in memory
2. Apply a &lt;code&gt;blur&lt;/code&gt; PIL filter to the image method to the image
3. Return the image directly without saving&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fastapi&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;UploadFile&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fastapi.responses&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;StreamingResponse&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;io&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BytesIO&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FastAPI&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;image_filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;UploadFile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
    &lt;span class="n"&gt;original_image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;original_image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;original_image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ImageFilter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BLUR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;filtered_image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BytesIO&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;original_image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filtered_image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;JPEG&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;filtered_image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;seek&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;StreamingResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filtered_image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;media_type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;image/jpeg&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="testing-the-api"&gt;Testing the API&lt;/h3&gt;
&lt;p&gt;Save the above code in a file named app.py&lt;/p&gt;
&lt;p&gt;You need to install the following libraries for this to work&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;pip&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;install&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fastapi&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;pip&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;install&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;uvicorn[standard]&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;pip&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;install&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Pillow&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;pip&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;install&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;multipart&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then fire up the FastAPI app by running&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;uvicorn app:app --reload
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This should start the app on &lt;code&gt;127.0.0.1/8000&lt;/code&gt; as shown below&lt;/p&gt;
&lt;p&gt;&lt;img alt="Uvicorn run" src="http://localhost:8080/images/99999975-uvicorn_run.png"&gt;&lt;/p&gt;
&lt;p&gt;Open the swaggerUI using any browser by openign the link &lt;code&gt;127.0.0.1/8000/docs&lt;/code&gt;, then click on try it out, then choose a image from and press Execute. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Swagger UI" src="http://localhost:8080/images/99999975-swagger_ui.png"&gt;
After that if you scroll below you should see a blurred image. &lt;/p&gt;
&lt;p&gt;An example of before and after is shown below, (but really this is just an excuse to show you a cat pic)
&lt;img alt="Blurred Cat" src="http://localhost:8080/images/99999975-cat_pic.jpg"&gt;&lt;/p&gt;</content><category term="Snippets"></category><category term="python"></category><category term="fastapi"></category></entry><entry><title>Set the default command in Python Typer CLI</title><link href="http://localhost:8080/snippets/set-the-default-command-in-python-typer-cli" rel="alternate"></link><published>2021-10-01T00:00:00+00:00</published><updated>2021-10-01T00:00:00+00:00</updated><author><name>Rehan Haider</name></author><id>tag:localhost,2021-10-01:/snippets/set-the-default-command-in-python-typer-cli</id><summary type="html">&lt;p&gt;A short guide to setting a default command using callback when making multiple commands in Python Typer&lt;/p&gt;</summary><content type="html">&lt;p&gt;TL;DR - jump to the &lt;a href="#setting-a-default-command"&gt;solution&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As I mentioned previously, &lt;a href="http://localhost:8080/snippets/disable-the-default-completion-options-in-python-typer-cli"&gt;Typer is great&lt;/a&gt;, but it's documentation isn't. &lt;/p&gt;
&lt;p&gt;While building a Typer app that has only one &lt;code&gt;@app.command()&lt;/code&gt; decorated function that function is treated as the default command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;typer&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;typer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Typer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;add_completion&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;long&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;typer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;lat&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;long&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;E.g. if you run the above program &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;/usr/bin/python3 main.py --lat &lt;span class="m"&gt;20&lt;/span&gt;.5 --long &lt;span class="m"&gt;88&lt;/span&gt;.3 --method cartesian
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You will get an output like below&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;20.5 88.3 cartesian
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is the expected behaviour because Typer has set foo() as the default action if the program is run. But if you create two commands like the example below&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;typer&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;typer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Typer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;add_completion&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;long&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;typer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;lat&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;long&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;typer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;I&amp;#39;m just here to mess things up...&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you re-run this program&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;/usr/bin/python3 main.py --lat &lt;span class="m"&gt;20&lt;/span&gt;.5 --long &lt;span class="m"&gt;88&lt;/span&gt;.3 --method cartesian
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You will rightly get an error as below stating there are no such options&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Usage: main.py [OPTIONS] COMMAND [ARGS]...
Try &amp;#39;main.py --help&amp;#39; for help.

Error: No such option: --lat
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The reason is, since there are two commands, typer is expecting to see at least one of them. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;/usr/bin/python3 main.py --help
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Checking using help option&lt;/p&gt;
&lt;p&gt;As you can see below, there are no default options and two commands, and Typer doesn't know which one to use as default. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Usage: main.py [OPTIONS] COMMAND [ARGS]...

Options:
  --help  Show this message and exit.

Commands:
  bar
  foo
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="setting-a-default-command"&gt;Setting a default command&lt;/h2&gt;
&lt;p&gt;The answer to out problems? Callbacks!&lt;/p&gt;
&lt;p&gt;Typer has a callback functionality allows the developer to create CLI parameters for the main CLI application itself.&lt;/p&gt;
&lt;p&gt;So in our example, we will make two changes
1. change foo() decorator from &lt;code&gt;@app.command()&lt;/code&gt; to &lt;code&gt;@app.callback()&lt;/code&gt;
2. Add &lt;code&gt;invoke_without_command=True&lt;/code&gt; argument to the above&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;typer&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;typer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Typer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;add_completion&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;invoke_without_command&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;long&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;typer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;lat&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;long&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;typer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;I&amp;#39;m just here to mess things up...&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you check the help again, &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Usage: main.py [OPTIONS] COMMAND [ARGS]...

Options:
  --lat FLOAT
  --long FLOAT
  --method TEXT
  --help         Show this message and exit.

Commands:
  bar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You don't see &lt;code&gt;foo()&lt;/code&gt; since that has become the default action and the &lt;code&gt;--lat&lt;/code&gt;, &lt;code&gt;--long&lt;/code&gt;, &amp;amp; &lt;code&gt;--method&lt;/code&gt; are added as default options. &lt;/p&gt;
&lt;p&gt;If you run the program again&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;/usr/bin/python3 main.py --lat &lt;span class="m"&gt;20&lt;/span&gt;.5 --long &lt;span class="m"&gt;88&lt;/span&gt;.3 --method cartesian
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You will get an output like below&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;20.5 88.3 cartesian
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Snippets"></category><category term="python"></category><category term="typer"></category></entry><entry><title>Disable the default completion options in Python Typer CLI</title><link href="http://localhost:8080/snippets/disable-the-default-completion-options-in-python-typer-cli" rel="alternate"></link><published>2021-09-25T00:00:00+00:00</published><updated>2021-09-25T00:00:00+00:00</updated><author><name>Rehan Haider</name></author><id>tag:localhost,2021-09-25:/snippets/disable-the-default-completion-options-in-python-typer-cli</id><summary type="html">&lt;p&gt;A short guide to disable the default options such as install-completion and show-completion in Python Typer CLI, a popular CLI building tool&lt;/p&gt;</summary><content type="html">&lt;p&gt;TL;DR - jump to the &lt;a href="#disable-completion-option"&gt;solution&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://typer.tiangolo.com/"&gt;Typer&lt;/a&gt; is a great! But it's documentation isn't. &lt;/p&gt;
&lt;p&gt;So I ran into a challenge while building a simple app where I didn't intend to provide the users autocompletion options and was wondering how to disable the typical output that it prints out while invoking the program&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Usage: app.py [OPTIONS]

Options:
  --lat FLOAT
  --long FLOAT
  --method TEXT
  --install-completion [bash|zsh|fish|powershell|pwsh]
                                  Install completion for the specified shell.
  --show-completion [bash|zsh|fish|powershell|pwsh]
                                  Show completion for the specified shell, to
                                  copy it or customize the installation.
  --help                          Show this message and exit.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you can see, it is rather a simple app where only 3 inputs are provided and it just looks cluttered. So I wanted to disable it. &lt;/p&gt;
&lt;p&gt;Unfortunately, as I mentioned earlier, the documentation didn't talk about it. &lt;/p&gt;
&lt;h2 id="disable-completion-option"&gt;Disable completion option&lt;/h2&gt;
&lt;p&gt;So eventually it took a bit of reading the source course to figure out how to disable it. The trick is to pass &lt;code&gt;add_completion=False&lt;/code&gt; argument while initialising the &lt;code&gt;typer.Typer&lt;/code&gt; app, as shown below&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;typer&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;typer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Typer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;add_completion&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;long&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;typer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;echo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;lat&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;long&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;



&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And now the output unsurprisingly looks like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Usage: app.py [OPTIONS]

Options:
  --lat FLOAT
  --long FLOAT
  --method TEXT
  --help         Show this message and exit.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Snippets"></category><category term="python"></category><category term="typer"></category></entry><entry><title>Get username, hostname and home directory using Python</title><link href="http://localhost:8080/snippets/get-username-hostname-and-home-directory-using-python" rel="alternate"></link><published>2021-09-22T00:00:00+00:00</published><updated>2021-09-22T00:00:00+00:00</updated><author><name>Rehan Haider</name></author><id>tag:localhost,2021-09-22:/snippets/get-username-hostname-and-home-directory-using-python</id><summary type="html">&lt;p&gt;A quick guide to fetching the username, hostname and home directory using Python on both Windows &amp;amp; Linux&lt;/p&gt;</summary><content type="html">&lt;p&gt;For a variety of reason your Python app might want to know the username of the logged in user along with a few other details such as path to their home directory and their systems hostname. &lt;/p&gt;
&lt;p&gt;In Python, you can use use &lt;a href="https://docs.python.org/3/library/getpass.html"&gt;getpass&lt;/a&gt; library to fetch these.&lt;/p&gt;
&lt;h2 id="get-the-username"&gt;Get the username&lt;/h2&gt;
&lt;p&gt;Run the below to get the username&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;getpass&lt;/span&gt;
&lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getpass&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getuser&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="output"&gt;Output&lt;/h3&gt;
&lt;p&gt;On Linux you see
&lt;img alt="python find username linux" src="http://localhost:8080/images/99999978-username-linux.png"&gt;&lt;/p&gt;
&lt;p&gt;This will also work on Windows
&lt;img alt="python find username windows" src="http://localhost:8080/images/99999978-username-windows.png"&gt;&lt;/p&gt;
&lt;h2 id="get-the-path-to-home-directory"&gt;Get the path to home directory&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os.path&lt;/span&gt;

&lt;span class="n"&gt;homedir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expanduser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;~&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;homedir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="output_1"&gt;Output&lt;/h3&gt;
&lt;p&gt;On Linux
&lt;img alt="python find homedir linux" src="http://localhost:8080/images/99999978-homedir-linux.png"&gt;&lt;/p&gt;
&lt;p&gt;And on Windows
&lt;img alt="python find homedir windows" src="http://localhost:8080/images/99999978-homedir-windows.png"&gt;&lt;/p&gt;
&lt;h2 id="get-the-hostname"&gt;Get the hostname&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;socket&lt;/span&gt;
&lt;span class="n"&gt;hostname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gethostname&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hostname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="output_2"&gt;Output&lt;/h3&gt;
&lt;p&gt;On Linux
&lt;img alt="python find hostname linux" src="http://localhost:8080/images/99999978-hostname-linux.png"&gt;&lt;/p&gt;
&lt;p&gt;And on Windows
&lt;img alt="python find hostname windows" src="http://localhost:8080/images/99999978-hostname-windows.png"&gt;&lt;/p&gt;</content><category term="Snippets"></category><category term="python"></category></entry><entry><title>Upgrade Python to latest version (3.10) on Ubuntu Linux</title><link href="http://localhost:8080/snippets/upgrade-python-to-latest-version-on-ubuntu-linux" rel="alternate"></link><published>2021-08-29T00:00:00+00:00</published><updated>2021-08-29T00:00:00+00:00</updated><author><name>Rehan Haider</name></author><id>tag:localhost,2021-08-29:/snippets/upgrade-python-to-latest-version-on-ubuntu-linux</id><summary type="html">&lt;p&gt;A complete guide on how to upgrade Python to the latest version (Python 3.10) on Ubuntu Linux and solve associated issues&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;Last Updated:&lt;/strong&gt; 2022-03-03&lt;/p&gt;
&lt;p&gt;Linux systems come with Python install by default, but, they are usually not the latest. Python also cannot be updated by a typical &lt;code&gt;apt upgrade&lt;/code&gt; command as well. &lt;/p&gt;
&lt;p&gt;To check the version of Python installed on your system run&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python3 --version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;python&lt;/code&gt; keyword is used for Python 2.x versions which has been deprecated&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In this guide we will&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Update Python to the latest version&lt;/li&gt;
&lt;li&gt;Fix pip &amp;amp; other Python related issues&lt;/li&gt;
&lt;li&gt;While doing the above two, ensure your Ubuntu which is heavily dependent on Python does not break&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="updating-python-to-the-latest-version"&gt;Updating Python to the latest version&lt;/h2&gt;
&lt;p&gt;Ubuntu's default repositories do not contain the latest version of Python, but an open source repository named &lt;code&gt;deadsnakes&lt;/code&gt; does.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="admonition warning"&gt;
&lt;p class="admonition-title"&gt;Python3.10 is not officially available on Ubuntu 20.04, ensure you backup your system before upgrading.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;h3 id="step-1-check-if-python310-is-available-for-install"&gt;Step 1: Check if Python3.10 is available for install&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo add-apt-repository ppa:deadsnakes/ppa
sudo apt update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Check if Python 3.10 is available by running&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;apt list &lt;span class="p"&gt;|&lt;/span&gt; grep python3.10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will produce the below result, if you see python3.10 it means you can install it&lt;/p&gt;
&lt;p&gt;&lt;img alt="apt list check if python is present" src="http://localhost:8080/images/99999980-apt_list.png"&gt;&lt;/p&gt;
&lt;h3 id="step-2-install-python-310"&gt;Step 2: Install Python 3.10&lt;/h3&gt;
&lt;p&gt;Now you can install Python 3.10 by running&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo apt install python3.10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now though Python 3.10 is installed, if you check the version of your python by running &lt;code&gt;python3 --version&lt;/code&gt; you will still see an older version. This is because you have two versions of Python installed and you need to choose Python 3.10 as the default. &lt;/p&gt;
&lt;h3 id="step-3-set-python-310-as-default"&gt;Step 3: Set Python 3.10 as default&lt;/h3&gt;
&lt;blockquote&gt;
&lt;div class="admonition warning"&gt;
&lt;p class="admonition-title"&gt;Steps beyond here are tested on Ubuntu 20.04 in VM &amp;amp; WSL2, but are experimental , proceed at your own risk.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;Changing the default alternatives for Python will break your Gnome terminal. To avoid this, you need to edit the &lt;code&gt;gnome-terminal&lt;/code&gt; configuration file.&lt;/p&gt;
&lt;p&gt;Open the terminal and run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo nano /usr/bin/gnome-terminal
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In first line, change &lt;code&gt;#!/usr/bin/python3&lt;/code&gt; to &lt;code&gt;#!/usr/bin/python3.8&lt;/code&gt;. Press &lt;code&gt;Ctrl +X&lt;/code&gt; followed by &lt;code&gt;enter&lt;/code&gt; to save and exit.&lt;/p&gt;
&lt;p&gt;Then save and close the file.&lt;/p&gt;
&lt;p&gt;Next, update the default Python by adding both versions to an alternatives by running the below&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.9 &lt;span class="m"&gt;1&lt;/span&gt;
sudo update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.10 &lt;span class="m"&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now run &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo update-alternatives --config python3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Choose the selection corresponding to Python3.10 (if not selected by default). 
&lt;img alt="Python alternatives on linux" src="http://localhost:8080/images/99999980-alternatives.png"&gt;&lt;/p&gt;
&lt;p&gt;Now run &lt;code&gt;python3 --version&lt;/code&gt; again and you should see the latest Python as the output.&lt;/p&gt;
&lt;h2 id="fix-pip-and-disutils-errors"&gt;Fix pip and disutils errors&lt;/h2&gt;
&lt;p&gt;Installing the new version of Python will break &lt;code&gt;pip&lt;/code&gt; as the &lt;code&gt;distutils&lt;/code&gt; for Python3.10 is not installed yet.&lt;/p&gt;
&lt;h3 id="fix-python3-apt"&gt;Fix Python3-apt&lt;/h3&gt;
&lt;p&gt;Running &lt;code&gt;pip&lt;/code&gt; in terminal will not work, as the current pip is not compatible with Python3.10 and python3-apt will be broken, that will generate an error like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Traceback (most recent call last):   
    File &amp;quot;/usr/lib/command-not-found&amp;quot;, line 28, in &amp;lt;module&amp;gt;     
        from CommandNotFound import CommandNotFound   
    File &amp;quot;/usr/lib/python3/dist-packages/CommandNotFound/CommandNotFound.py&amp;quot;, line 19, in &amp;lt;module&amp;gt;     
        from CommandNotFound.db.db import SqliteDatabase   
    File &amp;quot;/usr/lib/python3/dist-packages/CommandNotFound/db/db.py&amp;quot;, line 5, in &amp;lt;module&amp;gt;     
        import apt_pkg ModuleNotFoundError: No module named &amp;#39;apt_pkg&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To fix this first remove the current version of python3-apt by running&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo apt remove --purge python3-apt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then do some cleanup&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo apt autoclean
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="admonition danger"&gt;
&lt;p class="admonition-title"&gt;DO NOT RUN &lt;code&gt;sudo apt autoremove&lt;/code&gt; as it will remove several packages that are required. This may break your system if you're using GUI, if you're on WSL2 you can proceed.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Finally, reinstall &lt;code&gt;python3-apt&lt;/code&gt; by running&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo apt install python3-apt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="install-pip-distutils"&gt;Install pip &amp;amp; distutils&lt;/h3&gt;
&lt;p&gt;Running &lt;code&gt;pip&lt;/code&gt;  will still throw an error &lt;code&gt;pip: command not found&lt;/code&gt;. We need to install the latest version of pip compatible with Python 3.10. &lt;/p&gt;
&lt;p&gt;Also, if try to manually install the latest version of pip, it will throw an error like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;ImportError: cannot import name &amp;#39;sysconfig&amp;#39; from &amp;#39;distutils&amp;#39; 
(/usr/lib/python3.10/distutils/__init__.py)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Or you might also see an error stating &lt;code&gt;No module named 'distutils.util'&lt;/code&gt;. This is because the &lt;code&gt;distutils&lt;/code&gt; module is not installed yet, to install run the below command&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo apt install python3.10-distutils
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now you can install &lt;code&gt;pip&lt;/code&gt; by running&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
sudo python3.10 get-pip.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;If you get an error like &lt;code&gt;bash: curl: command not found&lt;/code&gt; then you need to install curl first by running &lt;code&gt;sudo apt install curl&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now you can run &lt;code&gt;pip&lt;/code&gt; and you should see the output of &lt;code&gt;pip --version&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="fix-pip-env-errors-when-using-venv"&gt;Fix pip-env errors when using venv&lt;/h3&gt;
&lt;p&gt;When you try to create a new virtual environment using &lt;code&gt;python -m venv env&lt;/code&gt;, you may into the following error. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Error: Command &lt;span class="s1"&gt;&amp;#39;[&amp;#39;&lt;/span&gt;/path/to/env/bin/python3&lt;span class="s1"&gt;&amp;#39;, &amp;#39;&lt;/span&gt;-Im&lt;span class="s1"&gt;&amp;#39;, &amp;#39;&lt;/span&gt;ensurepip&lt;span class="s1"&gt;&amp;#39;, &amp;#39;&lt;/span&gt;--upgrade&lt;span class="s1"&gt;&amp;#39;, &amp;#39;&lt;/span&gt;--default-pip&lt;span class="s1"&gt;&amp;#39;]&amp;#39;&lt;/span&gt; returned non-zero &lt;span class="nb"&gt;exit&lt;/span&gt; status &lt;span class="m"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can fix this by reinstalling venv by running&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo apt install python3.10-venv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;All should be done now. It is complicated, but this is how you update Python to latest version.&lt;/p&gt;</content><category term="Snippets"></category><category term="python"></category><category term="ubuntu"></category></entry><entry><title>AWS CDK: Building a EventBridge scheduled Lambda that reads and writes to s3</title><link href="http://localhost:8080/snippets/aws-cdk-building-a-eventbridge-scheduled-lambda-that-reads-and-writes-to-s3" rel="alternate"></link><published>2021-08-12T00:00:00+00:00</published><updated>2021-08-12T00:00:00+00:00</updated><author><name>Rehan Haider</name></author><id>tag:localhost,2021-08-12:/snippets/aws-cdk-building-a-eventbridge-scheduled-lambda-that-reads-and-writes-to-s3</id><summary type="html">&lt;p&gt;A guide to building a serverless app using EventBridge, Lambda &amp;amp; s3 while introducing how to create, configure, test and deploy a CDK project using Python&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#the-cdk-app-that-we-will-build"&gt;The CDK App that we will build&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#components"&gt;Components&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#setting-up-the-development-environment"&gt;Setting up the development environment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#setting-up-the-project"&gt;Setting up the project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#modifying-the-structure"&gt;Modifying the structure&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#adding-lambda-handler"&gt;Adding Lambda Handler&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#defining-the-lambda-function"&gt;Defining the lambda function&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#define-eventbridge-schedules-and-lambda-access-permission"&gt;Define EventBridge Schedules and Lambda access permission&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#giving-lambda-access-to-s3-bucket-to-read-and-write-files"&gt;Giving Lambda access to S3 bucket to read and write files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#create-a-dependencies-layer-in-lambda-cdk"&gt;Create a dependencies layer in Lambda CDK&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#upload-the-coordinates-file-to-s3"&gt;Upload the coordinates file to S3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#writing-the-lambda-app"&gt;Writing the lambda app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#deploy-the-cdk-project"&gt;Deploy the CDK project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cleanup-destroy-the-cdk-project"&gt;Cleanup &amp;amp; Destroy the CDK project&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;AWS Cloud Development Kit, also known as &lt;a href="https://aws.amazon.com/cdk/"&gt;CDK&lt;/a&gt;, is an Open Source Software Development Framework that is maintained by AWS.&lt;/p&gt;
&lt;p&gt;CDK is supposed to be the umbrella SDK from AWS, which can also easily integrate with &lt;a href="https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/what-is-sam.html"&gt;AWS SAM CLI&lt;/a&gt; and also &lt;a href="https://aws.github.io/chalice/"&gt;AWS Chalice&lt;/a&gt;, two other open source SDKs that AWS provides. &lt;/p&gt;
&lt;p&gt;Now, there are hundreds of simple guides that explains how to setup a simple Lambda app using CDK, but in this article we'll build a bit more complex example. &lt;/p&gt;
&lt;h2 id="the-cdk-app-that-we-will-build"&gt;The CDK App that we will build&lt;/h2&gt;
&lt;p&gt;We'll build a Lambda app that runs at a specified time (using EventBridge). The Lambda app will read a file from S3 bucket that contains latitude and longiture stored in a CSV format. Then the Lambda app will fetch the sunrise &amp;amp; sunset times for those coordinates and save it to another file in S3. &lt;/p&gt;
&lt;p&gt;&lt;img alt="CDK App architecure" src="http://localhost:8080/images/99999981-suntimes.png"&gt;&lt;/p&gt;
&lt;h3 id="components"&gt;Components&lt;/h3&gt;
&lt;p&gt;Before we get into the weeds, let's look at what are the components that we will need to configure&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Sun timings API&lt;/strong&gt;: We'll use a public API endpoint, &lt;code&gt;https://sunrise-sunset.org/api&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;EventBridge&lt;/strong&gt;: An event generated at a specified time using Cron. This event will be used to invoke Lambda. EventBridge needs to have permissing to send target the Lambda function for invocation&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;S3 Object with Coordinates&lt;/strong&gt;: A file that contains a list of coordinates. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;S3 Object with output&lt;/strong&gt;: This will be created by Lambda&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lambda Function&lt;/strong&gt;: A Lambda function that reads the list of coordinates from S3, fetches the sunrise / sunset times for them, converts them to JSON and saves it in S3. Lambda will require read &amp;amp; write permission to S3. To read and write from S3 we will use AWS Boto Library&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="setting-up-the-development-environment"&gt;Setting up the development environment&lt;/h2&gt;
&lt;p&gt;You need &lt;a href="https://docs.docker.com/get-docker/"&gt;Docker&lt;/a&gt; &amp;amp; &lt;a href="https://code.visualstudio.com/download"&gt;VSCode&lt;/a&gt; to be installed on your system for this guide. Download fromt he provided links and install. &lt;/p&gt;
&lt;p&gt;Then follow the following steps. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt;: Install Python using &lt;a href="http://localhost:8080/snippets/how-to-install-check-python-version-and-update-it"&gt;these instructions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 2&lt;/strong&gt;: &lt;a href="http://localhost:8080/snippets/build-deploy-serverless-apps-on-aws-with-sam-cli#install-aws-cli"&gt;Install AWS CLI&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 3&lt;/strong&gt;: &lt;a href="http://localhost:8080/snippets/build-deploy-serverless-apps-on-aws-with-sam-cli#configuring-aws-aws-cli"&gt;Configure AWS &amp;amp; AWS CLI&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 4&lt;/strong&gt;: &lt;a href="https://docs.aws.amazon.com/cdk/latest/guide/getting_started.html#getting_started_install"&gt;Install and configure AWS CDK&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 5&lt;/strong&gt;: Bootstrap the CDK, i.e. configure your AWS account to be able to use CDK. 
To do this first run the following AWS CLI command&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;aws sts get-caller-identity
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will produce an output similar to below that will provide the AWS account number, and user-id.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;UserId&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;XXXXXXXXXXXXXX&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;Account&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;000000000000&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;Arn&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;arn:aws:iam::000000000000:user/cloudbytes&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then run the below command replacing account &amp;amp; userID&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;cdk bootstrap aws://&amp;lt;Account&amp;gt;/&amp;lt;UserID&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="setting-up-the-project"&gt;Setting up the project&lt;/h2&gt;
&lt;p&gt;Create a new folder for the project, CDK requires an empty folder to initialise&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;mkdir cdk-tutorial
cd cdk-tutorial
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;After that, create a new CDK project by running&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;cdk init app --language python
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;app&lt;/code&gt; in the above is a template, don't change it&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This will produce a bunch of files in the below structure&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;├── README.md
├── app.py
├── cdk.json
├── cdk_tutorial
│   ├── __init__.py
│   └── cdk_tutorial_stack.py
├── requirements.txt
├── setup.py
└── source.bat
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It will also create a virtual environment, to active run the below on Linux / MacOS&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;source&lt;/span&gt; .venv/bin/activate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Or on Windows, run&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;venv&lt;/span&gt;&lt;span class="p"&gt;\&lt;/span&gt;&lt;span class="n"&gt;Scripts&lt;/span&gt;&lt;span class="p"&gt;\&lt;/span&gt;&lt;span class="n"&gt;activate&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bat&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then finally run the below to install the project dependencies,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python3 -m pip install -r requirements.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;These are the libraries used by your project, not the actual Lambda app. We will define that later&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="modifying-the-structure"&gt;Modifying the structure&lt;/h2&gt;
&lt;p&gt;Now the above initialisation has created 3 important files&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;app.py&lt;/code&gt;: This contains the initialisation of the app itself. This doesn't require any change unless you are changing the name of the app itself.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cdk_tutorial/cdk_tutorial_stack.py&lt;/code&gt;: This is where we will define our app construct, i.e. the services that we will use, the permissions that we need, etc. &lt;/li&gt;
&lt;li&gt;&lt;code&gt;setup.py&lt;/code&gt;: This contains certain project information such as libraries etc. &lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="adding-lambda-handler"&gt;Adding Lambda Handler&lt;/h3&gt;
&lt;p&gt;Create a folder named &lt;code&gt;lambda&lt;/code&gt; and under the folder create two files
1. &lt;code&gt;__init__.py&lt;/code&gt;: Should be an empty file
2. &lt;code&gt;index.py&lt;/code&gt;: Leave the contents blank for now&lt;/p&gt;
&lt;h2 id="defining-the-lambda-function"&gt;Defining the lambda function&lt;/h2&gt;
&lt;p&gt;Go to &lt;code&gt;cdk_tutorial/cdk_tutorial_stack.py&lt;/code&gt;, and change the imports as per below&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;aws_cdk&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;core&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;cdk&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;aws_lambda&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;aws_events_targets&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;targets&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;aws_events&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;events&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;aws_s3&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;s3&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then change the main program as per below&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# app.py&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CdkTutorialStack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cdk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Stack&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cdk&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Construct&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;construct_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;construct_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# Define a lambda function&lt;/span&gt;
        &lt;span class="n"&gt;lambdaFn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;aws_lambda&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;cdk-tutorial&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;aws_lambda&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Code&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_asset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;lambda&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;index.main&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;runtime&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;aws_lambda&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Runtime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PYTHON_3_8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;layers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_dependencies_layer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stack_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;lambda/index&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here we use &lt;code&gt;code&lt;/code&gt; variable to import our code from &lt;code&gt;lambda&lt;/code&gt; folder, then define Lambda handler to be &lt;code&gt;main()&lt;/code&gt; method under &lt;code&gt;index.py&lt;/code&gt; file by using &lt;code&gt;handler="index.main"&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We also define the runtime to be Python 3.8 and a layer that is explained later. &lt;/p&gt;
&lt;h2 id="define-eventbridge-schedules-and-lambda-access-permission"&gt;Define EventBridge Schedules and Lambda access permission&lt;/h2&gt;
&lt;p&gt;Add the below code under where we defined lambda function&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;        &lt;span class="n"&gt;rule&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;events&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Rule&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;Run Daily at 21:30 hrs UTC&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="c1"&gt;# UTC + 0 time. ~3 AM IST&lt;/span&gt;
            &lt;span class="n"&gt;schedule&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;events&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Schedule&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cron&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;minute&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;30&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hour&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;21&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;week_day&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;rule&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_target&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;targets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LambdaFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lambdaFn&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This simple definition has two parts
1. Where we define an Eventbridge rule that runs everyday as 9:30 PM UTC. The event schedule is always expressed in UTC timezone
2. We add a target to the lambda function that we created, &lt;code&gt;lambdaFn&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;That's it, two statements to create and then give permission to EventBridge to invoke a Lambda function.&lt;/p&gt;
&lt;h2 id="giving-lambda-access-to-s3-bucket-to-read-and-write-files"&gt;Giving Lambda access to S3 bucket to read and write files&lt;/h2&gt;
&lt;p&gt;For this you need the name of the bucket that you want access to, in this example let's use &lt;code&gt;cloudbytes-dev&lt;/code&gt;, you can replace it with bucket of your choice that you are using.&lt;/p&gt;
&lt;p&gt;To provide access, we first define the bucket construct and then grant read &amp;amp; write permission as per below&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;        &lt;span class="n"&gt;my_bucket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Bucket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_bucket_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Bucket&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;cloudbytes-dev&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;my_bucket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;grant_read_write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lambdaFn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="create-a-dependencies-layer-in-lambda-cdk"&gt;Create a dependencies layer in Lambda CDK&lt;/h2&gt;
&lt;p&gt;For our program we are going to use Python's &lt;code&gt;requests&lt;/code&gt; library, however, this is not available by default on Lambda, so we need to upload this while creating our project. &lt;/p&gt;
&lt;p&gt;To do that, we need to do two things, first, add the below function in your &lt;code&gt;app.py&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_dependencies_layer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;project_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;function_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;aws_lambda&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LayerVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;requirements_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;requirements.app.txt&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;output_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.build/app&amp;quot;&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;SKIP_PIP&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pip install -r &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;requirements_file&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; -t &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;output_dir&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;/python&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

        &lt;span class="n"&gt;layer_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;project_name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;function_name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;-dependencies&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;layer_code&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;aws_lambda&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Code&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_asset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output_dir&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;aws_lambda&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LayerVersion&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;layer_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;layer_code&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then create a file named &lt;code&gt;requirements.app.txt&lt;/code&gt; in your project root (where requirements.txt is) and add the following in that file&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;requests==2.26.0
boto3==1.18.24
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(Optional) Install these in your virtual environment by running&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python3 -m pip install -r requirements.app.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="upload-the-coordinates-file-to-s3"&gt;Upload the coordinates file to S3&lt;/h2&gt;
&lt;p&gt;Copy the below in a file and name it &lt;code&gt;coordinates.csv&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;latitude,longitude
-33.865143,151.209900
22.572645,88.363892
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Upload this file to the S3 bucket that you are going to use&lt;/p&gt;
&lt;h2 id="writing-the-lambda-app"&gt;Writing the lambda app&lt;/h2&gt;
&lt;p&gt;Go back to you &lt;code&gt;lambda&lt;/code&gt; folder that we craete earlier and opent he &lt;code&gt;index.py&lt;/code&gt; file&lt;/p&gt;
&lt;p&gt;Add the following code to the file&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;botocore&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;endpoint&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;boto3&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;csv&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;s3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;boto3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;s3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;bucket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;cloudbytes-dev&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;file_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;coordinates.csv&amp;quot;&lt;/span&gt;
    &lt;span class="c1"&gt;# Download the coordinate files from S3&lt;/span&gt;
    &lt;span class="n"&gt;s3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;download_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;file_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/tmp/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;file_name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;coordinates&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/tmp/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;file_name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;rows&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DictReader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;endpoint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://api.sunrise-sunset.org/json?lat=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;latitude&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;amp;lng=&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;longitude&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
            &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;endpoint&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sunrise&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sunrise&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sunset&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sunset&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;coordinates&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;output_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;suntimes.json&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/tmp/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;output_file&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;coordinates&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

        &lt;span class="c1"&gt;# Upload the output file to S3&lt;/span&gt;
        &lt;span class="n"&gt;s3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upload_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/tmp/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;output_file&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;output_file&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="deploy-the-cdk-project"&gt;Deploy the CDK project&lt;/h2&gt;
&lt;p&gt;Before deploying we first need to synthesis (or generate the project CloudFormation template) by running&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;cdk synth
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will generate a lengthy CloudFormation output in the console.&lt;/p&gt;
&lt;p&gt;Finally, we deploy the project by running&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;cdk deploy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If asked for a confirmation, press &lt;code&gt;Y&lt;/code&gt; to deploy. &lt;/p&gt;
&lt;p&gt;Now you can go to your AWS console, go to lambda section and test the function. &lt;/p&gt;
&lt;h2 id="cleanup-destroy-the-cdk-project"&gt;Cleanup &amp;amp; Destroy the CDK project&lt;/h2&gt;
&lt;p&gt;We created several resources and policies as part of this tutorial, instead of deleting them one by one, just run &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;cdk destroy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will clean up the project competely. &lt;/p&gt;
&lt;p&gt;And this is how you build a complex Lambda application on AWS&lt;/p&gt;</content><category term="Snippets"></category><category term="aws"></category><category term="python"></category></entry><entry><title>Run Selenium in AWS Lambda for UI testing</title><link href="http://localhost:8080/snippets/run-selenium-in-aws-lambda-for-ui-testing" rel="alternate"></link><published>2021-08-12T00:00:00+00:00</published><updated>2022-06-30T00:00:00+00:00</updated><author><name>Rehan Haider</name></author><id>tag:localhost,2021-08-12:/snippets/run-selenium-in-aws-lambda-for-ui-testing</id><summary type="html">&lt;p&gt;A guide about how to run selenium using headless chrome &amp;amp; chromium webdriver to automate UI testing&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#prerequisites"&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#create-the-app"&gt;Create the app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#customising-the-app"&gt;Customising the app&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#initpy"&gt;init.py&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#events-eventseventjson"&gt;Events: events/event.json&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#application-srcapppy"&gt;Application: src/app.py&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#python-dependencies-srcrequirementstxt"&gt;Python Dependencies: src/requirements.txt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#chrome-dependencies-srcchrome-depstxt"&gt;Chrome dependencies: src/chrome-deps.txt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#dockerfile-srcdockerfile"&gt;Dockerfile: src/Dockerfile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#script-to-install-browser-srcinstall-browsersh"&gt;Script to install browser: src/install-browser.sh&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#templateyaml"&gt;template.yaml&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#build-test-the-app"&gt;Build &amp;amp; test the app&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#output"&gt;Output&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#deploy-the-app"&gt;Deploy the app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#test-the-app"&gt;Test the app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cleanup"&gt;Cleanup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#using-the-github-repository-directly"&gt;Using the GitHub repository directly&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;[LAST UPDATED: 29-July-2022]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Let me begin by expressing my frustration 😡😡😡 with the fact that AWS doesn't have a pre-configured selenium image for &lt;strong&gt;Lambda&lt;/strong&gt; on their public ECR marketplace. &lt;a href="https://selenium.dev"&gt;Selenium&lt;/a&gt; is the go-to tool for UI testing and for building many kinds of bots but running it on &lt;strong&gt;Lambda&lt;/strong&gt; is complicated. &lt;/p&gt;
&lt;p&gt;The easiest method is to use &lt;a href="http://localhost:8080/snippets/run-aws-lambda-using-custom-docker-container"&gt;SAM CLI for &lt;strong&gt;Docker for Lambda&lt;/strong&gt;&lt;/a&gt; to create an image with &lt;strong&gt;Selenium&lt;/strong&gt;, &lt;strong&gt;Chrome / Chromium headless&lt;/strong&gt; and &lt;strong&gt;webdriver&lt;/strong&gt;, but given the way Lambda restricts the environment making it work on Selenium is quite difficult but not impossible. &lt;/p&gt;
&lt;p&gt;In this tutorial I will provide a guide on how to do exactly that. &lt;/p&gt;
&lt;h2 id="prerequisites"&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;Follow &lt;a href="http://localhost:8080/aws-academy/setup-your-dev-environment-for-use-with-aws"&gt;these instructions to setup your development environment&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It will guide you to install and configure AWS CLI &amp;amp; SAM CLI.&lt;/p&gt;
&lt;h2 id="create-the-app"&gt;Create the app&lt;/h2&gt;
&lt;p&gt;Follow the instructions in &lt;a href="http://localhost:8080/snippets/run-aws-lambda-using-custom-docker-container#create-a-new-app"&gt;this guide to create Lambda with Docker&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Your folder structure should look like below. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;.
├── README.md
├── __init__.py
├── events
│   └── event.json
├── hello_world
│   ├── Dockerfile
│   ├── __init__.py
│   ├── app.py
│   └── requirements.txt
├── template.yaml
└── tests
    ├── __init__.py
    └── unit
        ├── __init__.py
        └── test_handler.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="customising-the-app"&gt;Customising the app&lt;/h2&gt;
&lt;p&gt;First, change the name of &lt;code&gt;hello-world&lt;/code&gt; directory to &lt;code&gt;src&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id="initpy"&gt;&lt;strong&gt;init&lt;/strong&gt;.py&lt;/h3&gt;
&lt;p&gt;Both the &lt;code&gt;__init__.py&lt;/code&gt; files should be empty&lt;/p&gt;
&lt;h3 id="events-eventseventjson"&gt;Events: events/event.json&lt;/h3&gt;
&lt;p&gt;Leave the contents of the &lt;code&gt;event.json&lt;/code&gt; file unchanged.&lt;/p&gt;
&lt;h3 id="application-srcapppy"&gt;Application: src/app.py&lt;/h3&gt;
&lt;p&gt;We write a simple Python program that uses selenium webdriver to scape a website. &lt;/p&gt;
&lt;p&gt;Change the contents of the file to below. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;## Run selenium and chrome driver to scrape data from cloudbytes.dev&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os.path&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.chrome.service&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Service&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.common.by&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;By&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium.webdriver.chrome.options&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Options&lt;/span&gt;



&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;chrome_options&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ChromeOptions&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;chrome_options&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;binary_location&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/opt/chrome/chrome&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;chrome_options&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;--headless&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;chrome_options&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;--no-sandbox&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;chrome_options&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;--disable-dev-shm-usage&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;chrome_options&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;--disable-gpu&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;chrome_options&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;--disable-dev-tools&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;chrome_options&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;--no-zygote&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;chrome_options&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;--single-process&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;chrome_options&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;window-size=2560x1440&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;chrome_options&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;--user-data-dir=/tmp/chrome-user-data&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;chrome_options&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_argument&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;--remote-debugging-port=9222&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;#chrome_options.add_argument(&amp;quot;--data-path=/tmp/chrome-user-data&amp;quot;)&lt;/span&gt;
    &lt;span class="c1"&gt;#chrome_options.add_argument(&amp;quot;--disk-cache-dir=/tmp/chrome-user-data&amp;quot;)&lt;/span&gt;
    &lt;span class="n"&gt;chrome&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Chrome&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/opt/chromedriver&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;chrome_options&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;chrome&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://cloudbytes.dev/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;chrome&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_element&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;By&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;description&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_attribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;content&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;statusCode&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;body&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="python-dependencies-srcrequirementstxt"&gt;Python Dependencies: src/requirements.txt&lt;/h3&gt;
&lt;p&gt;Capture the app dependencies in &lt;code&gt;requirements.txt&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;selenium
requests
pandas
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="chrome-dependencies-srcchrome-depstxt"&gt;Chrome dependencies: src/chrome-deps.txt&lt;/h3&gt;
&lt;p&gt;Create a file named &lt;code&gt;src/chrome-deps.txt&lt;/code&gt; with the following contents&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;acl adwaita-cursor-theme adwaita-icon-theme alsa-lib at-spi2-atk at-spi2-core 
atk avahi-libs cairo cairo-gobject colord-libs cryptsetup-libs cups-libs dbus 
dbus-libs dconf desktop-file-utils device-mapper device-mapper-libs elfutils-default-yama-scope
elfutils-libs emacs-filesystem fribidi gdk-pixbuf2 glib-networking gnutls graphite2 
gsettings-desktop-schemas gtk-update-icon-cache gtk3 harfbuzz hicolor-icon-theme hwdata jasper-libs
jbigkit-libs json-glib kmod kmod-libs lcms2 libX11 libX11-common libXau libXcomposite libXcursor 
libXdamage libXext libXfixes libXft libXi libXinerama libXrandr libXrender libXtst libXxf86vm libdrm 
libepoxy liberation-fonts liberation-fonts-common liberation-mono-fonts liberation-narrow-fonts 
liberation-sans-fonts liberation-serif-fonts libfdisk libglvnd libglvnd-egl libglvnd-glx libgusb 
libidn libjpeg-turbo libmodman libpciaccess libproxy libsemanage libsmartcols libsoup libthai libtiff 
libusbx libutempter libwayland-client libwayland-cursor libwayland-egl libwayland-server libxcb 
libxkbcommon libxshmfence lz4 mesa-libEGL mesa-libGL mesa-libgbm mesa-libglapi nettle pango pixman 
qrencode-libs rest shadow-utils systemd systemd-libs trousers ustr util-linux vulkan 
vulkan-filesystem wget which xdg-utils xkeyboard-config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="dockerfile-srcdockerfile"&gt;Dockerfile: src/Dockerfile&lt;/h3&gt;
&lt;p&gt;Change the contents of the file to below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="s"&gt;public.ecr.aws/lambda/python:3.9&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="s"&gt;stage&lt;/span&gt;

&lt;span class="c"&gt;# Hack to install chromium dependencies&lt;/span&gt;
&lt;span class="k"&gt;RUN&lt;/span&gt; yum install -y -q sudo unzip

&lt;span class="c"&gt;# Find the version of latest stable build of chromium from below&lt;/span&gt;
&lt;span class="c"&gt;# https://omahaproxy.appspot.com/&lt;/span&gt;
&lt;span class="c"&gt;# Then follow the instructions here in below URL &lt;/span&gt;
&lt;span class="c"&gt;# to download old builds of Chrome/Chromium that are stable&lt;/span&gt;
&lt;span class="c"&gt;# Current stable version of Chromium&lt;/span&gt;
&lt;span class="k"&gt;ENV&lt;/span&gt; &lt;span class="nv"&gt;CHROMIUM_VERSION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1002910&lt;/span&gt; 


&lt;span class="c"&gt;# Install Chromium&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt; install-browser.sh /tmp/
&lt;span class="k"&gt;RUN&lt;/span&gt; /usr/bin/bash /tmp/install-browser.sh

&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="s"&gt;public.ecr.aws/lambda/python:3.9&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="s"&gt;base&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt; chrome-deps.txt /tmp/
&lt;span class="k"&gt;RUN&lt;/span&gt; yum install -y &lt;span class="k"&gt;$(&lt;/span&gt;cat /tmp/chrome-deps.txt&lt;span class="k"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# Install Python dependencies for function&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt; requirements.txt /tmp/
&lt;span class="k"&gt;RUN&lt;/span&gt; python3 -m pip install --upgrade pip -q
&lt;span class="k"&gt;RUN&lt;/span&gt; python3 -m pip install -r /tmp/requirements.txt -q 


&lt;span class="k"&gt;COPY&lt;/span&gt; --from&lt;span class="o"&gt;=&lt;/span&gt;stage /opt/chrome /opt/chrome
&lt;span class="k"&gt;COPY&lt;/span&gt; --from&lt;span class="o"&gt;=&lt;/span&gt;stage /opt/chromedriver /opt/chromedriver
&lt;span class="k"&gt;COPY&lt;/span&gt; app.py &lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;LAMBDA_TASK_ROOT&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;CMD&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;app.handler&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="script-to-install-browser-srcinstall-browsersh"&gt;Script to install browser: src/install-browser.sh&lt;/h3&gt;
&lt;p&gt;Create a file at &lt;code&gt;src/install-browser.sh&lt;/code&gt;. We will use a simple shell script to install the latest Chrome and Chrome webdriver.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;


&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Downloading Chromium...&amp;quot;&lt;/span&gt;
curl &lt;span class="s2"&gt;&amp;quot;https://www.googleapis.com/download/storage/v1/b/chromium-browser-snapshots/o/\&lt;/span&gt;
&lt;span class="s2"&gt;Linux_x64%2F&lt;/span&gt;&lt;span class="nv"&gt;$CHROMIUM_VERSION&lt;/span&gt;&lt;span class="s2"&gt;%2Fchrome-linux.zip?generation=1652397748160413&amp;amp;alt=media&amp;quot;&lt;/span&gt; &amp;gt; /tmp/chromium.zip

unzip /tmp/chromium.zip -d /tmp/
mv /tmp/chrome-linux/ /opt/chrome

curl &lt;span class="s2"&gt;&amp;quot;https://www.googleapis.com/download/storage/v1/b/chromium-browser-snapshots/o/\&lt;/span&gt;
&lt;span class="s2"&gt;Linux_x64%2F&lt;/span&gt;&lt;span class="nv"&gt;$CHROMIUM_VERSION&lt;/span&gt;&lt;span class="s2"&gt;%2Fchromedriver_linux64.zip?generation=1652397753719852&amp;amp;alt=media&amp;quot;&lt;/span&gt; &amp;gt; /tmp/chromedriver_linux64.zip

unzip /tmp/chromedriver_linux64.zip -d /tmp/
mv /tmp/chromedriver_linux64/chromedriver /opt/chromedriver
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then run the below command to make the script executable.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;chmod +x src/install-browser.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="templateyaml"&gt;template.yaml&lt;/h3&gt;
&lt;p&gt;Change the contents to below. Based on the complexity of your app, you may need to increase the memory and timeout values under Globals:Function.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;AWSTemplateFormatVersion&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;2010-09-09&amp;#39;&lt;/span&gt;
&lt;span class="nt"&gt;Transform&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;AWS::Serverless-2016-10-31&lt;/span&gt;
&lt;span class="nt"&gt;Description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="no"&gt;python3.9&lt;/span&gt;

  &lt;span class="no"&gt;Sample SAM Template for selenium&lt;/span&gt;

&lt;span class="c1"&gt;# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst&lt;/span&gt;
&lt;span class="nt"&gt;Globals&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;Timeout&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;120&lt;/span&gt;
    &lt;span class="nt"&gt;MemorySize&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;2048&lt;/span&gt;

&lt;span class="nt"&gt;Resources&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;SeleniumFunction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;AWS::Serverless::Function&lt;/span&gt; 
    &lt;span class="nt"&gt;Properties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;PackageType&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Image&lt;/span&gt;
      &lt;span class="nt"&gt;Architectures&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;x86_64&lt;/span&gt;
      &lt;span class="nt"&gt;Events&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nt"&gt;Selenium&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
          &lt;span class="nt"&gt;Type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Api&lt;/span&gt; 
          &lt;span class="nt"&gt;Properties&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nt"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;/selenium&lt;/span&gt;
            &lt;span class="nt"&gt;Method&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;get&lt;/span&gt;
    &lt;span class="nt"&gt;Metadata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="nt"&gt;Dockerfile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Dockerfile&lt;/span&gt;
      &lt;span class="nt"&gt;DockerContext&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;./src&lt;/span&gt;
      &lt;span class="nt"&gt;DockerTag&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;python3.9-v1&lt;/span&gt;

&lt;span class="nt"&gt;Outputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="c1"&gt;# ServerlessRestApi is an implicit API created out of Events key under Serverless::Function&lt;/span&gt;
  &lt;span class="c1"&gt;# Find out more about other implicit resources you can reference within SAM&lt;/span&gt;
  &lt;span class="c1"&gt;# https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api&lt;/span&gt;
  &lt;span class="nt"&gt;SeleniumApi&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;Description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;API&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Gateway&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;endpoint&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;URL&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;for&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Prod&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;stage&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;for&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Seleniumc&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;function&amp;quot;&lt;/span&gt;
    &lt;span class="nt"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!Sub&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/selenium/&amp;quot;&lt;/span&gt;
  &lt;span class="nt"&gt;SeleniumFunction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;Description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Selenium&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Lambda&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Function&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;ARN&amp;quot;&lt;/span&gt;
    &lt;span class="nt"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!GetAtt&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;SeleniumFunction.Arn&lt;/span&gt;
  &lt;span class="nt"&gt;SeleniumFunctionIamRole&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;Description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Implicit&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;IAM&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Role&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;created&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;for&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Selenium&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;function&amp;quot;&lt;/span&gt;
    &lt;span class="nt"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;!GetAtt&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;SeleniumFunctionRole.Arn&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="build-test-the-app"&gt;Build &amp;amp; test the app&lt;/h2&gt;
&lt;p&gt;To build the app run, &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sam build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To test run&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sam &lt;span class="nb"&gt;local&lt;/span&gt; invoke
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="output"&gt;Output&lt;/h3&gt;
&lt;p&gt;You should see something similar to below depending on the URL you scraped&lt;/p&gt;
&lt;p&gt;&lt;img alt="sam local invoke success" src="http://localhost:8080/images/99999982-sam_local_invoke_success.png"&gt;&lt;/p&gt;
&lt;h2 id="deploy-the-app"&gt;Deploy the app&lt;/h2&gt;
&lt;p&gt;To deploy the app for the first time run,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sam deploy --guided
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will start the interactive deployment to Lambda. You can use options as shown below.&lt;/p&gt;
&lt;p&gt;&lt;img alt="sam deploy guided" src="http://localhost:8080/images/99999982-sam-deploy-guided.png"&gt;&lt;/p&gt;
&lt;p&gt;This will also create a &lt;code&gt;samconfig.toml&lt;/code&gt; file that will contain these configurations.&lt;/p&gt;
&lt;p&gt;Next time after you build the app, just run &lt;code&gt;sam deploy&lt;/code&gt; to deploy the app.&lt;/p&gt;
&lt;p&gt;After a successful deployment, you should see something similar to below. Note the API URL in the output at the bottom.&lt;/p&gt;
&lt;p&gt;&lt;img alt="99999982-sam-deploy-success" src="http://localhost:8080/images/99999982-sam-deploy-success.png"&gt;&lt;/p&gt;
&lt;h2 id="test-the-app"&gt;Test the app&lt;/h2&gt;
&lt;p&gt;Using the API URL from the output, you can test the app by running&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;curl -X GET &amp;lt;API URL&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="cleanup"&gt;Cleanup&lt;/h2&gt;
&lt;p&gt;To delete the app, run &lt;code&gt;sam delete&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="using-the-github-repository-directly"&gt;Using the GitHub repository directly&lt;/h2&gt;
&lt;p&gt;You need AWS SAM CLI installed and AWS credentials configured.&lt;/p&gt;
&lt;p&gt;Open your terminal and run the following command to clone the &lt;a href="https://github.com/rehanhaider/selenium-in-aws-lambda"&gt;repository&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git clone https://github.com/rehanhaider/selenium-in-aws-lambda.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Navigate to the app directory. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; selenium-in-aws-lambda/selenium
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Build the app.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sam build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Test the app locally.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sam &lt;span class="nb"&gt;local&lt;/span&gt; invoke
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Deploy the app to AWS.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sam deploy --guided
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Snippets"></category><category term="aws"></category><category term="selenium"></category><category term="python"></category></entry><entry><title>Run AWS Lambda using custom docker container</title><link href="http://localhost:8080/snippets/run-aws-lambda-using-custom-docker-container" rel="alternate"></link><published>2021-08-08T00:00:00+00:00</published><updated>2022-06-29T00:00:00+00:00</updated><author><name>Rehan Haider</name></author><id>tag:localhost,2021-08-08:/snippets/run-aws-lambda-using-custom-docker-container</id><summary type="html">&lt;p&gt;Learn how to use a custom docker container to run Lambda functions on AWS.&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#why-run-lambda-in-docker"&gt;Why run Lambda in Docker?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#setting-up-the-development-environment"&gt;Setting up the development environment.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#create-a-new-app"&gt;Create a new app&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#understanding-the-sam-generated-application-template"&gt;Understanding the SAM generated application template&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#build-the-project"&gt;Build the project&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#test-the-build"&gt;Test the build&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#deploy-the-project"&gt;Deploy the project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#test-the-deployed-app"&gt;Test the deployed app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#clean-up-and-delete-the-app"&gt;Clean up and delete the app&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;[LAST UPDATED: 29-July-2022]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I wrote about &lt;a href="http://localhost:8080/snippets/build-deploy-serverless-apps-on-aws-with-sam-cli"&gt;building and deploying a AWS Lambda using SAM CLI&lt;/a&gt; previously.&lt;/p&gt;
&lt;p&gt;In this guide, we try to run a Lambda function inside a container. &lt;/p&gt;
&lt;h2 id="why-run-lambda-in-docker"&gt;Why run Lambda in Docker?&lt;/h2&gt;
&lt;p&gt;For a very simple reason, Lambda runtimes are standardised environments where you can only use what they provide and they do not provide a lot. E.g. if your application required any binary to be installed you coudn't do that on Lambda. &lt;/p&gt;
&lt;p&gt;But in 2020 Re:invent, AWS launched &lt;a href="https://aws.amazon.com/blogs/aws/new-for-aws-lambda-container-image-support/"&gt;Container Image Support for Lambda&lt;/a&gt; for container images up to 10 GB in size. While for this may not be important for "one-off functions", but for many use cases such as machine learning models etc, the developmental workflow typically includes Dockers and that is where it gets tricky deploying them to AWS Lambda.&lt;/p&gt;
&lt;h2 id="setting-up-the-development-environment"&gt;Setting up the development environment.&lt;/h2&gt;
&lt;p&gt;You need &lt;a href="https://docs.docker.com/get-docker/"&gt;Docker&lt;/a&gt; &amp;amp; &lt;a href="https://code.visualstudio.com/download"&gt;VSCode&lt;/a&gt; to be installed on your system for this guide. Download fromt he provided links and install. &lt;/p&gt;
&lt;p&gt;Then follow the following steps. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt;: Install Python using &lt;a href="http://localhost:8080/snippets/how-to-install-check-python-version-and-update-it"&gt;these instructions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 2&lt;/strong&gt;: &lt;a href="http://localhost:8080/snippets/build-deploy-serverless-apps-on-aws-with-sam-cli#install-aws-cli"&gt;Install AWS CLI&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 3&lt;/strong&gt;: &lt;a href="http://localhost:8080/snippets/build-deploy-serverless-apps-on-aws-with-sam-cli#install-aws-sam-cli"&gt;Install SAM CLI&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 4&lt;/strong&gt;: &lt;a href="http://localhost:8080/snippets/build-deploy-serverless-apps-on-aws-with-sam-cli#configuring-aws-aws-cli"&gt;Configure AWS &amp;amp; AWS CLI&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="create-a-new-app"&gt;Create a new app&lt;/h2&gt;
&lt;p&gt;Run the below in your terminal to create a new SAM application&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sam init --package-type Image
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will start the interactive session to create your app. Choose Option as per below&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Which template &lt;span class="nb"&gt;source&lt;/span&gt; would you like to use?
        &lt;span class="m"&gt;1&lt;/span&gt; - AWS Quick Start Templates
        &lt;span class="m"&gt;2&lt;/span&gt; - Custom Template Location
Choice: &lt;span class="m"&gt;1&lt;/span&gt;

Choose an AWS Quick Start application template
        &lt;span class="m"&gt;1&lt;/span&gt; - Hello World Example
        &lt;span class="m"&gt;2&lt;/span&gt; - Machine Learning
Template: &lt;span class="m"&gt;1&lt;/span&gt;

Which runtime would you like to use?
        &lt;span class="m"&gt;1&lt;/span&gt; - dotnet6
        &lt;span class="m"&gt;2&lt;/span&gt; - dotnet5.0
        &lt;span class="m"&gt;3&lt;/span&gt; - dotnetcore3.1
        &lt;span class="m"&gt;4&lt;/span&gt; - go1.x
        &lt;span class="m"&gt;5&lt;/span&gt; - java11
        &lt;span class="m"&gt;6&lt;/span&gt; - java8.al2
        &lt;span class="m"&gt;7&lt;/span&gt; - java8
        &lt;span class="m"&gt;8&lt;/span&gt; - nodejs16.x
        &lt;span class="m"&gt;9&lt;/span&gt; - nodejs14.x
        &lt;span class="m"&gt;10&lt;/span&gt; - nodejs12.x
        &lt;span class="m"&gt;11&lt;/span&gt; - python3.9
        &lt;span class="m"&gt;12&lt;/span&gt; - python3.8
        &lt;span class="m"&gt;13&lt;/span&gt; - python3.7
        &lt;span class="m"&gt;14&lt;/span&gt; - python3.6
        &lt;span class="m"&gt;15&lt;/span&gt; - ruby2.7
Runtime: &lt;span class="m"&gt;11&lt;/span&gt;

Based on your selections, the only dependency manager available is pip.
We will proceed copying the template using pip.

Would you like to &lt;span class="nb"&gt;enable&lt;/span&gt; X-Ray tracing on the &lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; your application?  &lt;span class="o"&gt;[&lt;/span&gt;y/N&lt;span class="o"&gt;]&lt;/span&gt;:  

Project name &lt;span class="o"&gt;[&lt;/span&gt;sam-app&lt;span class="o"&gt;]&lt;/span&gt;: selenium

Cloning from https://github.com/aws/aws-sam-cli-app-templates &lt;span class="o"&gt;(&lt;/span&gt;process may take a moment&lt;span class="o"&gt;)&lt;/span&gt;

    -----------------------
    Generating application:
    -----------------------
    Name: selenium
    Base Image: amazon/python3.9-base
    Architectures: x86_64
    Dependency Manager: pip
    Output Directory: .

    Next steps can be found &lt;span class="k"&gt;in&lt;/span&gt; the README file at ./selenium/README.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="understanding-the-sam-generated-application-template"&gt;Understanding the SAM generated application template&lt;/h3&gt;
&lt;p&gt;First, go to the &lt;code&gt;selenium&lt;/code&gt; directory.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; selenium
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You should see the following files&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;.
├── README.md
├── __init__.py
├── events
│   └── event.json
├── hello_world
│   ├── Dockerfile
│   ├── __init__.py
│   ├── app.py
│   └── requirements.txt
├── template.yaml
└── tests
    ├── __init__.py
    └── unit
        ├── __init__.py
        └── test_handler.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href="http://localhost:8080/snippets/build-deploy-serverless-apps-on-aws-with-sam-cli"&gt;Compared to the standard Lambda example&lt;/a&gt;, this has an additional file, the &lt;code&gt;Dockerfile&lt;/code&gt; that contains the instructions to build the container where the lambda will be executed. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="s"&gt;public.ecr.aws/lambda/python:3.9&lt;/span&gt;

&lt;span class="k"&gt;COPY&lt;/span&gt; app.py requirements.txt ./

&lt;span class="k"&gt;RUN&lt;/span&gt; python3.9 -m pip install -r requirements.txt -t .

&lt;span class="c"&gt;# Command can be overwritten by providing a different command in the template directly.&lt;/span&gt;
&lt;span class="k"&gt;CMD&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;app.lambda_handler&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The first thing you notice is, this image is building on top of an image from &lt;a href="https://gallery.ecr.aws/lambda/"&gt;AWS's pubic container registry&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="admonition-title"&gt;NOTE: You can also use non-AWS images such as those based on Alpine or Debian, however, the container image must include &lt;a href="https://docs.aws.amazon.com/lambda/latest/dg/runtimes-api.html"&gt;Lambda Runtime API&lt;/a&gt;. So if you use a non-AWS image, you will need to add them manually otherwise your app will not work.&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;And the final line is responsible for running the &lt;code&gt;lambda_handler()&lt;/code&gt; function that in defined under &lt;code&gt;twitter/hello_world/app.py&lt;/code&gt;. &lt;/p&gt;
&lt;h2 id="build-the-project"&gt;Build the project&lt;/h2&gt;
&lt;p&gt;To build the app, run the following&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sam build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;You need Docker &amp;amp; Python3.9 to be installed for this to work&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="Sam build success" src="http://localhost:8080/images/99999983-sam-build-success.png"&gt;&lt;/p&gt;
&lt;h3 id="test-the-build"&gt;Test the build&lt;/h3&gt;
&lt;p&gt;To test if you application is working correctly, run&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sam local invoke
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;Again, you need Docker &amp;amp; Python3.9 to be installed for this to work&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You should see the following output:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Sam local invoke success" src="http://localhost:8080/images/99999983-sam-local-invoke-success.png"&gt;&lt;/p&gt;
&lt;h2 id="deploy-the-project"&gt;Deploy the project&lt;/h2&gt;
&lt;p&gt;Now there are three more steps that needs to be performed, but in our case, SAM CLI will do them in one go. &lt;/p&gt;
&lt;p&gt;These steps are (again, we don't need to do them if using SAM CLI)
1. We need to rename the tag of our docker container to push it to the repository. 
2. Login from Docker CLI to ECR repository
3. Push the image to ECR repository&lt;/p&gt;
&lt;p&gt;All we need to do now is&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sam deploy --guided
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will start an interactive delployment session, choose options as below (blank means leave the defaults)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="gh"&gt;Configuring SAM deploy&lt;/span&gt;
&lt;span class="gh"&gt;======================&lt;/span&gt;

        Looking for config file [samconfig.toml] :  Not found

        Setting default arguments for &amp;#39;sam deploy&amp;#39;
        =========================================
        Stack Name [sam-app]: hello-world
        AWS Region [us-east-1]: 
        #Shows you resources changes to be deployed and require a &amp;#39;Y&amp;#39; to initiate deploy
        Confirm changes before deploy [y/N]: 
        #SAM needs permission to be able to create roles to connect to the resources in your template
        Allow SAM CLI IAM role creation [Y/n]: y
        #Preserves the state of previously provisioned resources when an operation fails
        Disable rollback [y/N]: 
        HelloWorldFunction may not have authorization defined, Is this okay? [y/N]: y
        Save arguments to configuration file [Y/n]: 
        SAM configuration file [samconfig.toml]: 
        SAM configuration environment [default]: 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;After that, if will further ask for confirmation on creating ECR repository:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;Create&lt;/span&gt; &lt;span class="nv"&gt;managed&lt;/span&gt; &lt;span class="nv"&gt;ECR&lt;/span&gt; &lt;span class="nv"&gt;repositories&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;all&lt;/span&gt; &lt;span class="nv"&gt;functions&lt;/span&gt;? [&lt;span class="nv"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt;]: &lt;span class="nv"&gt;Y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will deploy your app to AWS and you should see a final confirmation output similar to below. Note the URL of the API highlighted in the output.&lt;/p&gt;
&lt;p&gt;&lt;img alt="sam deploy success" src="http://localhost:8080/images/99999983-sam-deploy-success.png"&gt;&lt;/p&gt;
&lt;h2 id="test-the-deployed-app"&gt;Test the deployed app&lt;/h2&gt;
&lt;p&gt;Fetch the URL of the API from the output above and send a GET request to the API using the below command. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;curl -X GET https://lndcelxeyg.execute-api.us-east-1.amazonaws.com/Prod/hello
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In response, you should see:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello world!&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="clean-up-and-delete-the-app"&gt;Clean up and delete the app&lt;/h2&gt;
&lt;p&gt;To delete the app, run the following&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sam delete
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You will be asked for below confirmations:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Are you sure you want to delete the stack hello-world in the region us-east-1 ? [y/N]: y
  Are you sure you want to delete the folder hello-world in S3 which contains the artifacts? [y/N]: y
  Found ECR Companion Stack hello-world-20953121-CompanionStack

  Do you you want to delete the ECR companion stack hello-world-20953121-CompanionStack 
  in the region us-east-1 ? [y/N]: y

  ECR repository helloworld20953121/helloworldfunction19d43fc4repo may not be empty. 
  Do you want to delete the repository and all the images in it ? [y/N]: y
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You app is deleted.&lt;/p&gt;</content><category term="Snippets"></category><category term="aws"></category><category term="python"></category></entry><entry><title>Build &amp; Deploy serverless apps on AWS with SAM CLI</title><link href="http://localhost:8080/snippets/build-deploy-serverless-apps-on-aws-with-sam-cli" rel="alternate"></link><published>2021-08-02T00:00:00+00:00</published><updated>2021-08-02T00:00:00+00:00</updated><author><name>Rehan Haider</name></author><id>tag:localhost,2021-08-02:/snippets/build-deploy-serverless-apps-on-aws-with-sam-cli</id><summary type="html">&lt;p&gt;Detailed step by step guide on how to use SAM CLI to build serverless apps.&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#setting-up-the-development-environment"&gt;Setting up the development environment&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#install-aws-cli"&gt;Install AWS CLI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#install-aws-sam-cli"&gt;Install AWS SAM CLI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#configuring-aws-aws-cli"&gt;Configuring AWS &amp;amp; AWS CLI&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#create-a-new-admin-user-with-programmatic-access"&gt;Create a new admin user with programmatic access&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#configure-aws-cli"&gt;Configure AWS CLI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#create-a-new-app"&gt;Create a new app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#understandign-the-project-structure"&gt;Understandign the project structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#building-the-app"&gt;Building the app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#deploy-the-app"&gt;Deploy the app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#test-the-app"&gt;Test the app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#delete-the-app"&gt;Delete the App&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#confirm-deletion"&gt;Confirm deletion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;AWS changed the game in 2015 when &lt;a href="https://aws.amazon.com/blogs/compute/aws-lambda-is-generally-available/"&gt;they launched AWS Lambda&lt;/a&gt; which enabled developers build applications without needed a server. &lt;/p&gt;
&lt;p&gt;Since then, Lambda and Serverless in general has grown in leaps and bounds with launch of &lt;a href="https://aws.amazon.com/api-gateway/"&gt;API Gateway&lt;/a&gt;, among many other services that allows developers to build full-fledged serverless apps. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;While CloudFormation (an IaaC tool) has existed for years, it is usually cumbersome to write CloudFormation templates with simplest ones going upto hundres of lines of codes. This had led to developers preferring  third-party tools such as Terraform or Pulumi, but with AWS launching their &lt;strong&gt;SAM CLI&lt;/strong&gt; that is changing fast. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Within AWS Ecosystem, there are a plethora of options available, the details of which we will cover in another lesson, but the two that we will use for this lesson are&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/cli/"&gt;AWC CLI&lt;/a&gt;: This allows a developer to manage all of their AWS services using CLI&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-reference.html#serverless-sam-cli"&gt;AWS SAM-CLI&lt;/a&gt;: This is a separate CLI tool that covers a subset of AWS CLI but is also a wrapper on CloudFormation and in fact generate a CloudFormation template as part of its build process.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In this tutorial, we will use AWS CLI and SAM-CLI to build a simple Lambda application using Python 3.8 and deploy it to AWS. &lt;/p&gt;
&lt;p&gt;The application of our choice is a Lambda function behind API Gateway that will return &lt;code&gt;Hello World&lt;/code&gt; message when invoked. &lt;/p&gt;
&lt;p&gt;&lt;img alt="AWS Lambda API Gateway Hello world" src="http://localhost:8080/images/99999984-sam-getting-started-hello-world.png"&gt;&lt;/p&gt;
&lt;h2 id="setting-up-the-development-environment"&gt;Setting up the development environment&lt;/h2&gt;
&lt;p&gt;Download and install Python 3.9 for your OS from &lt;a href="https://www.python.org/ftp/python/3.9.6/"&gt;Python Website&lt;/a&gt;. &lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="admonition-title"&gt;IMPORTANT: The latest supported Python version on AWS Lambda is 3.8, thus you need 3.9 to be able to build your Lambda application&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can refer to &lt;a href="http://localhost:8080/snippets/how-to-install-check-python-version-and-update-it#2-how-to-install-python"&gt;this tutorial&lt;/a&gt; if you need help in installing python correctly. &lt;/p&gt;
&lt;p&gt;Check your Python version to confirm&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python --version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="install-aws-cli"&gt;Install AWS CLI&lt;/h3&gt;
&lt;p&gt;Installation method varies by OS. Steps below. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;On Windows&lt;/strong&gt;
Download the &lt;a href="https://awscli.amazonaws.com/AWSCLIV2.msi"&gt;64-bit installer&lt;/a&gt; and run to install. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;On Linux&lt;/strong&gt;, run &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;curl &lt;span class="s2"&gt;&amp;quot;https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip&amp;quot;&lt;/span&gt; -o &lt;span class="s2"&gt;&amp;quot;awscliv2.zip&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
   &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; unzip awscliv2.zip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then Install the AWS CLI by running the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo ./aws/install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;On MacOS&lt;/strong&gt;
Download the &lt;a href="https://awscli.amazonaws.com/AWSCLIV2.pkg"&gt;MacOS PKG&lt;/a&gt; and run to install. &lt;/p&gt;
&lt;p&gt;To check if the installation was successful, run a version check&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;aws --version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="install-aws-sam-cli"&gt;Install AWS SAM CLI&lt;/h3&gt;
&lt;p&gt;Again, installation varies by Operating System, choose from below as appropriate. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;On Windows&lt;/strong&gt;
Download and run the &lt;a href="https://github.com/aws/aws-sam-cli/releases/latest/download/AWS_SAM_CLI_64_PY3.msi"&gt;64-bit installer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;On Linux&lt;/strong&gt;, run the below&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;wget &lt;span class="s2"&gt;&amp;quot;https://github.com/aws/aws-sam-cli/releases/latest/download/aws-sam-cli-linux-x86_64.zip&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
   -O &lt;span class="s2"&gt;&amp;quot;awssam.zip&amp;quot;&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
   &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; unzip awssam.zip -d sam &lt;span class="se"&gt;\&lt;/span&gt;
   &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo ./sam/install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;On MacOS&lt;/strong&gt; run&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;brew tap aws/tap
brew install aws-sam-cli
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Verify the installation by running a version check&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sam --version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="configuring-aws-aws-cli"&gt;Configuring AWS &amp;amp; AWS CLI&lt;/h2&gt;
&lt;p&gt;Both AWS CLI and SAM CLI relies on &lt;strong&gt;"Programmatic Access"&lt;/strong&gt; credentials. So you will need to either create a new user or use your own Access Keys. &lt;/p&gt;
&lt;p&gt;Ideally, create a user with only programmatic access as shown below. &lt;/p&gt;
&lt;h3 id="create-a-new-admin-user-with-programmatic-access"&gt;Create a new admin user with programmatic access&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Login to your &lt;a href="https://console.aws.amazon.com/"&gt;AWS Console Home&lt;/a&gt; and navigate to &lt;a href="https://console.aws.amazon.com/iam/home"&gt;IAM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;On the left pane, click on &lt;strong&gt;Users&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Then Click on &lt;strong&gt;Add users&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Choose a username &amp;amp; select only &lt;em&gt;Programmatic access&lt;/em&gt; under &lt;strong&gt;Select AWS access type&lt;/strong&gt;, then click &lt;strong&gt;Next: Permissions&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="Create an AWS IAM user" src="http://localhost:8080/images/99999984-aws-iam-type.png"&gt;&lt;/p&gt;
&lt;p&gt;Then click on &lt;strong&gt;Attach existing policies directly&lt;/strong&gt; and choose &lt;strong&gt;AdministratorAccess&lt;/strong&gt; then click on &lt;strong&gt;Next: Tags&lt;/strong&gt;. &lt;/p&gt;
&lt;p&gt;Leave the tags blank for now, and click on &lt;strong&gt;Next: Review&lt;/strong&gt; then click on &lt;strong&gt;Create user&lt;/strong&gt;. This will create a new user.&lt;/p&gt;
&lt;p&gt;Keep this window open for now, and notice the Access key ID &amp;amp; Secret access key. This will be needed in next step.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="admonition danger"&gt;
&lt;p class="admonition-title"&gt;WARNING: Never store this credentials anywhere or share them with anyone. An attacker can user your credentials to create AWS resources in your account. If you need to reconfigure, you can generate a new credentials from IAM screen. &lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="AWS New IAM User" src="http://localhost:8080/images/99999984-aws-new-iam-user.png"&gt;&lt;/p&gt;
&lt;h3 id="configure-aws-cli"&gt;Configure AWS CLI&lt;/h3&gt;
&lt;p&gt;Open a terminal window and run the below to start the configuration&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;aws configure
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will start an interactive session, copy paste your access keys and secret access keys when prompted&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;aws configure
AWS Access Key ID &lt;span class="o"&gt;[&lt;/span&gt;None&lt;span class="o"&gt;]&lt;/span&gt;: XXXXXXXXXXXXXXXXXXXX
AWS Secret Access Key &lt;span class="o"&gt;[&lt;/span&gt;None&lt;span class="o"&gt;]&lt;/span&gt;: XXXXXXXXXXXXXXXXXXXXXXX
Default region name &lt;span class="o"&gt;[&lt;/span&gt;None&lt;span class="o"&gt;]&lt;/span&gt;: us-east-1
Default output format &lt;span class="o"&gt;[&lt;/span&gt;None&lt;span class="o"&gt;]&lt;/span&gt;: 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="create-a-new-app"&gt;Create a new app&lt;/h2&gt;
&lt;p&gt;Now run the below to create a new SAM App&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sam init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will prompt you to choose between Quick Start &amp;amp; Custom Template, choose 1 and press Enter followed by choose Zip (1). 
Then finally, choose python3.8 (option 2) when asked to choose the runtime as shown below. Leave the name as default (sam-app). &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;Which&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="n"&gt;would&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;like&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;use&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt;
        &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;AWS&lt;/span&gt; &lt;span class="n"&gt;Quick&lt;/span&gt; &lt;span class="n"&gt;Start&lt;/span&gt; &lt;span class="n"&gt;Templates&lt;/span&gt;
        &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Custom&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt; &lt;span class="n"&gt;Location&lt;/span&gt;
&lt;span class="n"&gt;Choice&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;What&lt;/span&gt; &lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="n"&gt;would&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;like&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;use&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt;
        &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Zip&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;artifact&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;zip&lt;/span&gt; &lt;span class="n"&gt;uploaded&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;S3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;artifact&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="n"&gt;uploaded&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;ECR&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="n"&gt;repository&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Package&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="n"&gt;Which&lt;/span&gt; &lt;span class="n"&gt;runtime&lt;/span&gt; &lt;span class="n"&gt;would&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;like&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;use&lt;/span&gt;&lt;span class="err"&gt;?&lt;/span&gt;
        &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;nodejs14&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;
        &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;python3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;
        &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;ruby2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;
        &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;go1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;
        &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;java11&lt;/span&gt;
        &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;dotnetcore3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;nodejs12&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;
        &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;nodejs10&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;
        &lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;python3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;
        &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;python3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;
        &lt;span class="mi"&gt;11&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;python3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;
        &lt;span class="mi"&gt;12&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;python2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;
        &lt;span class="mi"&gt;13&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;ruby2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;
        &lt;span class="mi"&gt;14&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;java8&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;al2&lt;/span&gt;
        &lt;span class="mi"&gt;15&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;java8&lt;/span&gt;
        &lt;span class="mi"&gt;16&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;dotnetcore2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;Runtime&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;

&lt;span class="n"&gt;Project&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sam&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt; 

&lt;span class="n"&gt;Cloning&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;aws&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;aws&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;sam&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;cli&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;templates&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once the clone process is complete, you will be prompted to choose the application template, choose 1 - Hello World Example, as shown below&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;AWS quick start application templates:
        &lt;span class="m"&gt;1&lt;/span&gt; - Hello World Example
        &lt;span class="m"&gt;2&lt;/span&gt; - EventBridge Hello World
        &lt;span class="m"&gt;3&lt;/span&gt; - EventBridge App from scratch &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;100&lt;/span&gt;+ Event Schemas&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="m"&gt;4&lt;/span&gt; - Step Functions Sample App &lt;span class="o"&gt;(&lt;/span&gt;Stock Trader&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="m"&gt;5&lt;/span&gt; - Elastic File System Sample App
Template selection: &lt;span class="m"&gt;1&lt;/span&gt;

    -----------------------
    Generating application:
    -----------------------
    Name: sam-app
    Runtime: python3.8
    Dependency Manager: pip
    Application Template: hello-world
    Output Directory: .

    Next steps can be found &lt;span class="k"&gt;in&lt;/span&gt; the README file at ./sam-app/README.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="understandign-the-project-structure"&gt;Understandign the project structure&lt;/h2&gt;
&lt;p&gt;Go to the &lt;code&gt;sam-app&lt;/code&gt; directory&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; sam-app
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You should see the following files&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;.
├── README.md
├── __init__.py
├── events
│   └── event.json
├── hello_world
│   ├── __init__.py
│   ├── app.py
│   └── requirements.txt
├── template.yaml
└── tests
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The key files to look at are
1. &lt;code&gt;event.json&lt;/code&gt;: Invocation events that can be used to invoke the Lambda function
2. &lt;code&gt;hello_world/app.py&lt;/code&gt;: Contains the code for the Lambda function
3. &lt;code&gt;template.yaml&lt;/code&gt;: The SAM's template that declare the AWS resources that will be used for this app&lt;/p&gt;
&lt;h2 id="building-the-app"&gt;Building the app&lt;/h2&gt;
&lt;p&gt;With SAM CLI, building the app is easy, just run&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sam build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: If your Python versio is not 3.8, you will get an error on the build. Reinstall Python 3.8 version. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You should get a &lt;code&gt;Build Succeeded&lt;/code&gt; message along with a few other debug messages, if the build completed successfully. You can see the built lambda function in &lt;code&gt;.aws-sam&lt;/code&gt; folder which will contain the dependencies and the app.py application. &lt;/p&gt;
&lt;h2 id="deploy-the-app"&gt;Deploy the app&lt;/h2&gt;
&lt;p&gt;Now to deploy the app run&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sam deploy --guided
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will first throw a warning&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Looking for config file [samconfig.toml] :  Not found
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But then if will continue and ask you a few questions, choose as per below&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;        Setting default arguments for &amp;#39;sam deploy&amp;#39;
        =========================================
        Stack Name [sam-app]: 
        AWS Region [us-east-1]: 
        #Shows you resources changes to be deployed and require a &amp;#39;Y&amp;#39; to initiate deploy
        Confirm changes before deploy [y/N]: y
        #SAM needs permission to be able to create roles to connect to the resources in your template
        Allow SAM CLI IAM role creation [Y/n]: y
        #Preserves the state of previously provisioned resources when an operation fails
        Disable rollback [y/N]: 
        HelloWorldFunction may not have authorization defined, Is this okay? [y/N]: y
        Save arguments to configuration file [Y/n]: 
        SAM configuration file [samconfig.toml]: 
        SAM configuration environment [default]: 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If there are any unreferenced ECR repositories, it will ask you to confirm the deletion.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;         Delete the unreferenced repositories listed above when deploying? &lt;span class="o"&gt;[&lt;/span&gt;y/N&lt;span class="o"&gt;]&lt;/span&gt;: y
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;SAM CLI will print out a lot of debug information, but you should get a prompt asking for confirmation&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Deploy this changeset? &lt;span class="o"&gt;[&lt;/span&gt;y/N&lt;span class="o"&gt;]&lt;/span&gt;: y
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally you app is deployed. You should see a final output similar to the below&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;CloudFormation outputs from deployed stack
---------------------------------------------------------------------------------------------------------------------------
Outputs                                                                                                                   
---------------------------------------------------------------------------------------------------------------------------
Key                 HelloWorldFunctionIamRole                                                                             
Description         Implicit IAM Role created for Hello World function                                                    
Value               arn:aws:iam::268674271179:role/sam-app-HelloWorldFunctionRole-M6IZJ8JLWL61                            

Key                 HelloWorldApi                                                                                         
Description         API Gateway endpoint URL for Prod stage for Hello World function                                      
Value               https://jkasd6ja8.execute-api.us-east-1.amazonaws.com/Prod/hello/                                    

Key                 HelloWorldFunction                                                                                    
Description         Hello World Lambda Function ARN                                                                       
Value               arn:aws:lambda:us-east-1:1364247115578:function:sam-app-HelloWorldFunction-AxJdejTmhKx3                
---------------------------------------------------------------------------------------------------------------------------

Successfully created/updated stack - sam-app in us-east-1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="test-the-app"&gt;Test the app&lt;/h2&gt;
&lt;p&gt;In the output above, note the URL in the format &lt;code&gt;https://&amp;lt;api-id&amp;gt;.execute-api.us-east-1.amazonaws.com/Prod/hello/&lt;/code&gt;, you should have got a similar URL, copy that and run the below &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;curl https://&amp;lt;api-id&amp;gt;.execute-api.us-east-1.amazonaws.com/Prod/hello/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This should produce the output&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Congratulations, you just deployed your Serverless app using SAM-CLI. Go to AWS Console and navigate to Lambda and see the app configuration. &lt;/p&gt;
&lt;h2 id="delete-the-app"&gt;Delete the App&lt;/h2&gt;
&lt;p&gt;Now you have created the app but SAM CLI doesn't provide you a method to delete it. For this we will use AWS CLI.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;aws cloudformation list-stacks
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Stack is basically a cloudformation term for a combination of resources that you've created together. This should list all of your stacks + 2 more (one for AWS CLI and another for SAM CLI). &lt;/p&gt;
&lt;p&gt;Notice the first one has &lt;code&gt;StackName&lt;/code&gt; value as  &lt;code&gt;sam-app&lt;/code&gt;, we will now delete this. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you get stuck press 'q' to exit. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now runt he below to delete the app&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;aws cloudformation delete-stack --stack-name sam-app
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="confirm-deletion"&gt;Confirm deletion&lt;/h2&gt;
&lt;p&gt;List all your stacks again&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;aws cloudformation list-stacks
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You should still see the stack sam-app, however, if notice the &lt;code&gt;StackStatus&lt;/code&gt; key, this should be &lt;code&gt;DELETE_COMPLETE&lt;/code&gt;. &lt;/p&gt;</content><category term="Snippets"></category><category term="aws"></category><category term="python"></category></entry><entry><title>What is Anaconda for Python?</title><link href="http://localhost:8080/snippets/what-is-anaconda-for-python" rel="alternate"></link><published>2021-08-01T00:00:00+00:00</published><updated>2021-08-01T00:00:00+00:00</updated><author><name>Rehan Haider</name></author><id>tag:localhost,2021-08-01:/snippets/what-is-anaconda-for-python</id><summary type="html">&lt;p&gt;A short introduction to Anaconda for Python, how to configure and use Anaconda.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Anaconda is a Python distribution platform. What that means is Anaconda takes the core Python and packages it along with some utilities pre-configured targeted at data science / machine learning applications. &lt;/p&gt;
&lt;p&gt;This makes it easy for developers who are building applications that rely on many popular data science python packages such as Numpy, Pandas, etc. to start working as soon as Anaconda is installed. &lt;/p&gt;
&lt;h2 id="why-is-anaconda-needed"&gt;Why is Anaconda needed?&lt;/h2&gt;
&lt;p&gt;If you happen to download and install Python from &lt;a href="https://python.org"&gt;python.org&lt;/a&gt; website, by default it comes with only the standard python libraries. &lt;/p&gt;
&lt;p&gt;So developers need to download additional libraries using tools such as &lt;code&gt;pip&lt;/code&gt; or similar package managers. And if you have too many of them, the packages many a times conflict with each other. Python tries to solve this by using &lt;a href="http://localhost:8080/snippets/create-a-python-virtual-environment-using-venv"&gt;venv&lt;/a&gt; which is largely a command line utility. &lt;/p&gt;
&lt;p&gt;An alternative approach is using Anaconda which has a GUI and its &lt;code&gt;conda&lt;/code&gt; package manager. But the key appeal of Anaconda is its dependency management whereby for any environment, it will ensure there are not package conflicts. &lt;/p&gt;
&lt;p&gt;Additionally, Anaconda comes with multiple additional SDKs bundled together to make development easier such as Jupyter, SciPy, etc. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Anaconda bundle" src="http://localhost:8080/images/99999985-anaconda.png"&gt;&lt;/p&gt;
&lt;h2 id="how-to-install-anaconda"&gt;How to install Anaconda&lt;/h2&gt;
&lt;p&gt;To install Anaconda, just go to its &lt;a href="https://www.anaconda.com/products/individual"&gt;Individual Edition&lt;/a&gt; page and download it for your OS then run the executable to install.&lt;/p&gt;
&lt;p&gt;Anaconda Individual Edition is free of cost but is limited for use by individuals and not organisations. For organisations, there are several other editions which have their own license fee.&lt;/p&gt;</content><category term="Snippets"></category><category term="python"></category></entry><entry><title>Python For Loops, using range vs enumerate</title><link href="http://localhost:8080/snippets/python-for-loops-using-range-vs-enumerate" rel="alternate"></link><published>2021-07-31T00:00:00+00:00</published><updated>2021-07-31T00:00:00+00:00</updated><author><name>Rehan Haider</name></author><id>tag:localhost,2021-07-31:/snippets/python-for-loops-using-range-vs-enumerate</id><summary type="html">&lt;p&gt;How to use python for loops, using range vs enumerate&lt;/p&gt;</summary><content type="html">&lt;p&gt;Python for loops are different to the conventional programming languages in a key aspect, its syntax doesn't use an iterator. &lt;/p&gt;
&lt;p&gt;But that is a feature not a bug, the '&lt;em&gt;Pythonic&lt;/em&gt;' way to write for loop is to run it over a range or a list by item and not by using an index to refer to the next element like C or Java. E.g.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;apple&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;orange&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;banana&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;tomato&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;cucumber&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;fruit&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fruit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Will print out&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;apple
orange
banana
tomato
cucumber
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If we wanted to do the same in C, not withstanding the complexities, it would look like,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%s&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="range-and-enumerate-functions"&gt;Range and Enumerate functions&lt;/h2&gt;
&lt;p&gt;But there are many scenarios where you might need to iterate using index. For such cases, Python has two in-builts functions &lt;code&gt;range()&lt;/code&gt; and &lt;code&gt;enumerate()&lt;/code&gt; that provides this feature. &lt;/p&gt;
&lt;h3 id="range"&gt;range()&lt;/h3&gt;
&lt;p&gt;Range is used to iterate over a sequence of numbers, e.g. to print 0 - 4, &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We can use this to iterate over out fruits list with an iterator&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;apple&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;orange&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;banana&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;tomato&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;cucumber&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But you now have a new problem, in the first example, we didn't have to worry about the length of the list, with range you do. You can still solve it by usng &lt;code&gt;len()&lt;/code&gt; method&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;apple&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;orange&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;banana&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;tomato&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;cucumber&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="enumerate"&gt;enumerate()&lt;/h3&gt;
&lt;p&gt;Instead of calculating the length and iterating over the list, we can also use enumerate() to get the same results.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;fruits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;apple&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;orange&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;banana&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;tomato&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;cucumber&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Using iterator: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;fruits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Using item: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="range-vs-enumerate-what-should-you-use"&gt;Range vs Enumerate: What should you use?&lt;/h2&gt;
&lt;p&gt;As with most things, the answer is, it depends! And more often than not, it will end up being a personal choice. &lt;/p&gt;
&lt;p&gt;But from a performance perspective, we can test it. &lt;/p&gt;
&lt;h3 id="performance-testing-range-and-enumerate"&gt;Performance testing range() and enumerate()&lt;/h3&gt;
&lt;p&gt;Let's start by setting up a baseline. We will generate a list with 10000 integers, and then compute if each one of them are prime number of not and add them to an output list. &lt;/p&gt;
&lt;h4 id="baseline-simple-iteration"&gt;Baseline: Simple iteration&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;

&lt;span class="c1"&gt;# start the time counter&lt;/span&gt;
&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;prime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;Function to compute if a number is prime&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;

&lt;span class="c1"&gt;# Generating a list of integers&lt;/span&gt;
&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9999&lt;/span&gt;
&lt;span class="n"&gt;inputs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="n"&gt;outputs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;outputs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is prime? &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;prime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For me it took ~44.6 secs&lt;/p&gt;
&lt;h4 id="using-range"&gt;Using range()&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;

&lt;span class="c1"&gt;# start the time counter&lt;/span&gt;
&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;prime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;Function to compute if a number is prime&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;

&lt;span class="c1"&gt;# Generating a list of integers&lt;/span&gt;
&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9999&lt;/span&gt;
&lt;span class="n"&gt;inputs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="n"&gt;outputs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
    &lt;span class="n"&gt;outputs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is prime? &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;prime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Took roughly ~47.7 seconds&lt;/p&gt;
&lt;h3 id="using-enumerate"&gt;Using enumerate()&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;

&lt;span class="c1"&gt;# start the time counter&lt;/span&gt;
&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;prime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;Function to compute if a number is prime&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;

&lt;span class="c1"&gt;# Generating a list of integers&lt;/span&gt;
&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9999&lt;/span&gt;
&lt;span class="n"&gt;inputs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="n"&gt;outputs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inputs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;outputs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is prime? &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;prime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This took about ~45.76 seconds&lt;/p&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;If you're iterating over a list, enumerate is probably the most optimal option. &lt;/p&gt;</content><category term="Snippets"></category><category term="python"></category></entry><entry><title>How to Install, Check Python Version and Update it</title><link href="http://localhost:8080/snippets/how-to-install-check-python-version-and-update-it" rel="alternate"></link><published>2021-07-25T00:00:00+00:00</published><updated>2021-07-25T00:00:00+00:00</updated><author><name>Rehan Haider</name></author><id>tag:localhost,2021-07-25:/snippets/how-to-install-check-python-version-and-update-it</id><summary type="html">&lt;p&gt;A simple guide on how to Install Python, how to check Python version installed and upgrade Python to the latest version&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#1-check-the-version-of-python-installed"&gt;1. Check the version of Python installed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2-how-to-install-python"&gt;2. How to install Python?&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#install-the-latest-python-on-windows"&gt;Install the latest Python On Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#install-the-latest-python-on-linux-macos"&gt;Install the latest Python on Linux / MacOS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#3-upgrade-python-version"&gt;3. Upgrade Python version&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;Python is one of the easiest languages to learn and has powerful extensibility which makes it the most popular programming loved by beginners, data-scientists, academics, and web-developers. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Python popular programming language" src="http://localhost:8080/images/99999987-top-languages.png"&gt;&lt;/p&gt;
&lt;p&gt;Part of the reason on Python's extensibility is the opensource nature of the language where community developes features, libraries, and packages. &lt;/p&gt;
&lt;p&gt;But that comes at the cost of &lt;a href="https://wiki.python.org/moin/PythonDistributions"&gt;several distributions&lt;/a&gt; apart from the Official one available from &lt;a href="https://python.org"&gt;Python.org&lt;/a&gt;, each one of them optimised for different purpose, e.g.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;The Official CPython distribution&lt;/strong&gt;: The most authentic version of Python implemented in C for best performance&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PyPy&lt;/strong&gt;: Python implemented using Python, best known for its JIT&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Anaconda&lt;/strong&gt;: Targeted towards data scientists focused on resolving package conflicts &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IPython&lt;/strong&gt;: An interactive implementation of Python upon which Jupyter and other interpreters are based upon. &lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="1-check-the-version-of-python-installed"&gt;1. Check the version of Python installed&lt;/h2&gt;
&lt;p&gt;On Windows/Linux/MacOS, run the below command to print the version of your Python installed on the system&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="p"&gt;-&lt;/span&gt;&lt;span class="n"&gt;-version&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;On some Linux / MacOS distributions where both Python 2 &amp;amp; Python 3 are installed, you will need to identify which one you want to check individually by  &lt;code&gt;python3 --version&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;If you do not get the version, it means Python is not installed. To install Python, follow the instructions below.&lt;/p&gt;
&lt;h2 id="2-how-to-install-python"&gt;2. How to install Python?&lt;/h2&gt;
&lt;p&gt;So when you ask the question, "How to install Python", you first need to ask the question "Which version of Python to install?".&lt;/p&gt;
&lt;p&gt;The answer, in most cases is the &lt;a href="https://www.python.org/downloads/"&gt;Official version of Python&lt;/a&gt;. &lt;/p&gt;
&lt;div class="admonition warning"&gt;
&lt;p class="admonition-title"&gt;Do not install Python from Microsoft Store as adding it to PATH can be problematic due to the the folder structure followed by Microsoft.&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id="install-the-latest-python-on-windows"&gt;Install the latest Python On Windows&lt;/h3&gt;
&lt;p&gt;Just go to the &lt;a href="https://www.python.org/downloads/"&gt;downloads section on Python.org&lt;/a&gt;, click on &lt;code&gt;Download Python 3.x.x&lt;/code&gt; to download the latest installer. &lt;/p&gt;
&lt;p&gt;After that run the installer, on the first screen make sure to select "Add Python 3.x to PATH". After that you can use default selections and follow the instructions to install. &lt;/p&gt;
&lt;h3 id="install-the-latest-python-on-linux-macos"&gt;Install the latest Python on Linux / MacOS&lt;/h3&gt;
&lt;p&gt;You don't need to. On most Linux &amp;amp; MacOS distributions, Python is installed by default. &lt;/p&gt;
&lt;p&gt;But if you want the latest versions, follow the below instructions.&lt;/p&gt;
&lt;p&gt;On Mac, go to &lt;a href="https://www.python.org/downloads/mac-osx/"&gt;downloads section on Python.org&lt;/a&gt; and download the installer for the latest stable release. Run the installer and follow the instructions to install.&lt;/p&gt;
&lt;p&gt;On Linux, just run the below (with major version) to install the latest, e.g. to install Python 3.8 run&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo apt-get install python3.8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;Python version on Linux repositories are usually behind one version &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="3-upgrade-python-version"&gt;3. Upgrade Python version&lt;/h2&gt;
&lt;p&gt;On Windows &amp;amp; Mac you need to download and install the latest version again from &lt;a href="https://python.org/downloads"&gt;Python.org&lt;/a&gt; Website. &lt;/p&gt;
&lt;p&gt;On Linux run the below the get the latest supported version by the Operating System.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo apt-get update
sudo apt-get upgrade
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Snippets"></category><category term="python"></category></entry><entry><title>Convert a Pelican Website to PWA using Workbox</title><link href="http://localhost:8080/snippets/convert-a-pelican-website-to-pwa-using-workbox" rel="alternate"></link><published>2021-07-24T00:00:00+00:00</published><updated>2021-07-24T00:00:00+00:00</updated><author><name>Rehan Haider</name></author><id>tag:localhost,2021-07-24:/snippets/convert-a-pelican-website-to-pwa-using-workbox</id><summary type="html">&lt;p&gt;A guide to converting a satic website generated by Pelican into a Progressive Web App using Google's Workbox library&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#introducing-the-pwa"&gt;Introducing the PWA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#prerequisites"&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#create-the-pwa-manifest-add-the-icons"&gt;Create the PWA manifest &amp;amp; Add the icons&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#add-the-manifest-link-to-your-tempalte"&gt;Add the manifest link to your tempalte&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#test-your-manifest"&gt;Test your manifest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#register-the-service-worker"&gt;Register the service worker&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#test-the-service-worker-configuration"&gt;Test the Service Worker configuration&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#configure-the-service-worker"&gt;Configure the Service Worker&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#caching-pages-as-they-are-visited"&gt;Caching Pages as they are visited&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cache-static-files"&gt;Cache static files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#cache-images"&gt;Cache Images&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#test-your-pwa"&gt;Test your PWA&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;There has always been 2 types of apps since internet was invented&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Apps that ran on the desktop (Windows / Linux / Mac) that was developed using a variety of programming languages (C/C++, Java, etc.)&lt;/li&gt;
&lt;li&gt;Apps that ran in browsers, typically built with HTML with &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;With smartphones entering the fray, this quickly started to change with native Android and iOS apps being made using typically different technologies, e.g. Java/Kotlin for Android and Objective-C/Swift for iOS. &lt;/p&gt;
&lt;p&gt;While native smartphone apps were able to leverage the smartphone features such as camera, GPS, and other sensors. Web apps were limited in this regard. &lt;/p&gt;
&lt;p&gt;This also meant most app developers had 3 codebases, one for Android, one for iOS, and one for web. Several attempts has been made to simplify this and make a "cross platform development framework", such as &lt;a href="https://reactnative.dev/"&gt;React Native&lt;/a&gt;, &lt;a href="https://ionicframework.com/"&gt;Ionic&lt;/a&gt;, Xamarin, etc. &lt;/p&gt;
&lt;p&gt;Except the recently launched &lt;a href="https://flutter.dev/"&gt;Flutter&lt;/a&gt;, all of them faced the same problem, apps were trans-compiled into native app format resulting in performance loss due to an abstraction layer. &lt;/p&gt;
&lt;h2 id="introducing-the-pwa"&gt;Introducing the PWA&lt;/h2&gt;
&lt;p&gt;The concept of PWA has been around since the release of iPhone, but the current incarnation was only built in around 2015 by engineers at Google working on Chrome. &lt;/p&gt;
&lt;p&gt;PWAs are called "progressive" because they can take advantage of new features supported by modern browsers and attempts to solve one of the biggest challenges in modern app development, cross-platform apps with native features and performance. &lt;/p&gt;
&lt;p&gt;&lt;img alt="PWA Native Cross-platform" src="http://localhost:8080/images/99999988-pwa-native.png"&gt;&lt;/p&gt;
&lt;p&gt;Static Websites generated using SSGs such as Pelican, Hugo, Gatsby, etc. are perfect candidate for conversion to PWA simply because they are easiest to convert. &lt;/p&gt;
&lt;h2 id="prerequisites"&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;The only prerequisite is that a "Service Worker" definition that is a JavaScript file. But this file needs to be in the root of the website, i.e. &lt;code&gt;"/"&lt;/code&gt; otherwise its scope will be limited. &lt;/p&gt;
&lt;p&gt;&lt;em&gt;Step 1&lt;/em&gt;: Create a file named &lt;code&gt;SW.js&lt;/code&gt; in your &lt;code&gt;content/extras&lt;/code&gt; folder and add the below content in the file&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;//extras/SW.js&lt;/span&gt;
&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;I&amp;#39;m you service worker&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Step 2&lt;/em&gt;: To ensure this file is stored in the root folder of your website, edit the &lt;code&gt;pelicanconf.py&lt;/code&gt; and add the following line &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;STATIC_PATHS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;images&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;extra/SW.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;EXTRA_PATH_METADATA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;extra/SW.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;path&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;SW.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will first establish &lt;code&gt;SW.js&lt;/code&gt; as a static file and then add instructions to copy it from &lt;code&gt;extras&lt;/code&gt; to &lt;code&gt;root&lt;/code&gt;. by using &lt;code&gt;EXTRA_PATH_METADATA&lt;/code&gt;. &lt;/p&gt;
&lt;h2 id="create-the-pwa-manifest-add-the-icons"&gt;Create the PWA manifest &amp;amp; Add the icons&lt;/h2&gt;
&lt;p&gt;The manifest is a JSON file that outlines how your PWA will behave. Create a file named &lt;code&gt;site.webmanifest&lt;/code&gt; and place it under your static / asset folder. &lt;/p&gt;
&lt;p&gt;The content of the manifest is quite self-explanatory and should contain&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;your website name&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;short_name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;your website short name&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;icons&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;src&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;img/android-chrome-192x192.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;sizes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;192x192&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;image/png&amp;quot;&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;src&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;img/maskable_icon.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;sizes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;512x512&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;image/png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;quot;purpose&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;any maskable&amp;quot;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;start_url&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;display&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;standalone&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;orientation&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;portrait&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;background_color&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#ffffff&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;theme_color&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#ffffff&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The above files also identifies the icons that should be used. Place the icons with the above names and sizes in your &lt;code&gt;image&lt;/code&gt; folder. You can use &lt;a href="https://maskable.app/"&gt;maskable.app&lt;/a&gt; to create one. &lt;/p&gt;
&lt;h3 id="add-the-manifest-link-to-your-tempalte"&gt;Add the manifest link to your tempalte&lt;/h3&gt;
&lt;p&gt;By adding the below line (make sure to change the path as appropriate)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;manifest&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/assets/site.webmanifest&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="test-your-manifest"&gt;Test your manifest&lt;/h3&gt;
&lt;p&gt;Open your website in either Chrome or Edge browser, press F12 or go to Developer Tools, and then click on Application Tab. If you've configured the manifest correctly, you shold see something similar to the below&lt;/p&gt;
&lt;p&gt;&lt;img alt="PWA Manifest" src="http://localhost:8080/images/99999988-manifest-dev-tools.png"&gt;&lt;/p&gt;
&lt;h2 id="register-the-service-worker"&gt;Register the service worker&lt;/h2&gt;
&lt;p&gt;This has to be in your main theme JavaScript application file. E.g. in CloudBytes's case the &lt;code&gt;app.js&lt;/code&gt; is stored under &lt;code&gt;//assets/js&lt;/code&gt; folder. If you view source, you should see an HTML header that links this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;defer&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/assets/js/app.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;If you don't already have it, create an &lt;code&gt;app.js&lt;/code&gt; as per above and add the header in your Pelican layouts. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In the &lt;code&gt;app.js&lt;/code&gt; add the below snippet to register your service worker file&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// #app.js&lt;/span&gt;
&lt;span class="c1"&gt;// Check that service workers are supported&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;serviceWorker&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nx"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Use the window load event to keep the page load performant&lt;/span&gt;
    &lt;span class="nb"&gt;window&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;addEventListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;load&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;serviceWorker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/SW.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="test-the-service-worker-configuration"&gt;Test the Service Worker configuration&lt;/h3&gt;
&lt;p&gt;If you have configured it correctly, go to the &lt;code&gt;Service Worker&lt;/code&gt; in section in Application tab of the developer tools, if there are no errors it means your service worker is configured correctly. &lt;/p&gt;
&lt;p&gt;Additionally, in the Dev Tools Console Tab, your should see the message&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;I&amp;#39;m you service worker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you got this, your service worker is registered successfully, but it still needs configuration.&lt;/p&gt;
&lt;h2 id="configure-the-service-worker"&gt;Configure the Service Worker&lt;/h2&gt;
&lt;p&gt;Right now the service worker isn't doing anything except print to console, we need to configure the service worker to cache requests, and static files. &lt;/p&gt;
&lt;p&gt;To do that we will use &lt;a href="https://developers.google.com/web/tools/workbox"&gt;Workbox&lt;/a&gt;, a library developed by Google to make it easier to create PWAs. &lt;/p&gt;
&lt;h3 id="caching-pages-as-they-are-visited"&gt;Caching Pages as they are visited&lt;/h3&gt;
&lt;p&gt;Change the contents of &lt;code&gt;SW.js&lt;/code&gt; to the below&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nx"&gt;importScripts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;https://storage.googleapis.com/workbox-cdn/releases/6.1.5/workbox-sw.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Cache page navigations (html) with a Network First strategy&lt;/span&gt;
&lt;span class="nx"&gt;workbox&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;routing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;registerRoute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="c1"&gt;// Check to see if the request is a navigation to a new page&lt;/span&gt;
    &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;mode&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;navigate&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c1"&gt;// Use a Network First caching strategy&lt;/span&gt;
    &lt;span class="ow"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;workbox&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;strategies&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NetworkFirst&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="c1"&gt;// Put all cached files in a cache named &amp;#39;pages&amp;#39;&lt;/span&gt;
        &lt;span class="nx"&gt;cacheName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pages&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;plugins&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="c1"&gt;// Ensure that only requests that result in a 200 status are cached&lt;/span&gt;
            &lt;span class="ow"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;workbox&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cacheableResponse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CacheableResponsePlugin&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
                &lt;span class="nx"&gt;statuses&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;200&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="p"&gt;}),&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;}),&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This snippet makes sure that whenever a page is requested, it first tries to download it from internet, if the service worker if not able to fetch a response, it will serve the page from the cache it has built. Additionally, it caches pages only if they are successfully fetched. &lt;/p&gt;
&lt;h3 id="cache-static-files"&gt;Cache static files&lt;/h3&gt;
&lt;p&gt;Add the below snippet to enable caching of stylesheets and scripts. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// Cache CSS, JS, and Web Worker requests with a Stale While Revalidate strategy&lt;/span&gt;
&lt;span class="nx"&gt;workbox&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;routing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;registerRoute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="c1"&gt;// Check to see if the request&amp;#39;s destination is style for stylesheets, script for JavaScript, or worker for web worker&lt;/span&gt;
    &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;destination&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;style&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
        &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;destination&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;script&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
        &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;destination&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;worker&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c1"&gt;// Use a Stale While Revalidate caching strategy&lt;/span&gt;
    &lt;span class="ow"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;workbox&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;strategies&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;StaleWhileRevalidate&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="c1"&gt;// Put all cached files in a cache named &amp;#39;assets&amp;#39;&lt;/span&gt;
        &lt;span class="nx"&gt;cacheName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;assets&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;plugins&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="c1"&gt;// Ensure that only requests that result in a 200 status are cached&lt;/span&gt;
            &lt;span class="ow"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;workbox&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cacheableResponse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CacheableResponsePlugin&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
                &lt;span class="nx"&gt;statuses&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;200&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="p"&gt;}),&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;}),&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="cache-images"&gt;Cache Images&lt;/h3&gt;
&lt;p&gt;Add the below snippet to cache images that are successfully fetched. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// Cache images with a Cache First strategy&lt;/span&gt;
&lt;span class="nx"&gt;workbox&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;routing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;registerRoute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="c1"&gt;// Check to see if the request&amp;#39;s destination is style for an image&lt;/span&gt;
    &lt;span class="p"&gt;({&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;destination&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;image&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c1"&gt;// Use a Cache First caching strategy&lt;/span&gt;
    &lt;span class="ow"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;workbox&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;strategies&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CacheFirst&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="c1"&gt;// Put all cached files in a cache named &amp;#39;images&amp;#39;&lt;/span&gt;
        &lt;span class="nx"&gt;cacheName&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;images&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;plugins&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="c1"&gt;// Ensure that only requests that result in a 200 status are cached&lt;/span&gt;
            &lt;span class="ow"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;workbox&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cacheableResponse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;CacheableResponsePlugin&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
                &lt;span class="nx"&gt;statuses&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;200&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
            &lt;span class="p"&gt;}),&lt;/span&gt;
            &lt;span class="c1"&gt;// Don&amp;#39;t cache more than 50 items, and expire them after 30 days&lt;/span&gt;
            &lt;span class="ow"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;workbox&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;expiration&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ExpirationPlugin&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
                &lt;span class="nx"&gt;maxEntries&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="nx"&gt;maxAgeSeconds&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;60&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;60&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;24&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;// 30 Days&lt;/span&gt;
            &lt;span class="p"&gt;}),&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;}),&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="test-your-pwa"&gt;Test your PWA&lt;/h2&gt;
&lt;p&gt;After you have configured the above, open your website in using Chrome browser in your smartphone. You should get a small banner at the bottom asking if you want to add your website to the homescreen. Clicking on it will install your website like an app. &lt;/p&gt;</content><category term="Snippets"></category><category term="pelican"></category><category term="javascript"></category><category term="python"></category><category term="pwa"></category></entry><entry><title>How to use Git and GitHub to contributed to Open Source Projects</title><link href="http://localhost:8080/snippets/how-to-use-git-and-github-to-contributed-to-open-source-projects" rel="alternate"></link><published>2021-07-24T00:00:00+00:00</published><updated>2021-07-24T00:00:00+00:00</updated><author><name>Rehan Haider</name></author><id>tag:localhost,2021-07-24:/snippets/how-to-use-git-and-github-to-contributed-to-open-source-projects</id><summary type="html">&lt;p&gt;A guide to Git and GitHub basics, and using them correctly to contribute to open source projects on GitHub&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#git-vs-github"&gt;Git Vs GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#install-configure-git"&gt;Install &amp;amp; Configure Git&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#git-github-basics"&gt;Git / GitHub basics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#create-a-new-repository"&gt;Create a new repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#fork-a-repository"&gt;Fork a repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#clone-a-repository"&gt;Clone a repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#create-a-branch"&gt;Create a Branch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#stage-the-changes"&gt;Stage the changes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#commit-the-changes"&gt;Commit the changes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#push-the-changes"&gt;Push the Changes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#pull-requests"&gt;Pull Requests&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#merging-the-changes"&gt;Merging the changes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;If you're a budding developer Git and GitHub is going to be your best friend and your worst enemy that you cannot get away from. So, it's better to learn what it does and how it does. &lt;/p&gt;
&lt;p&gt;Jokes aside, Git is a kind of source-code version control tool, i.e. if multiple people are working on the same application and developing different modules, Git / or any other version control system is used to ensure the parallel work does not conflict with each other. &lt;/p&gt;
&lt;h2 id="git-vs-github"&gt;Git Vs GitHub&lt;/h2&gt;
&lt;p&gt;Git specifically is an opensource tool developed by Linus Torvalds (the same guy to made Linux Kernel) around 2005, and is the de-facto version control tool that is used nowadays. &lt;/p&gt;
&lt;p&gt;GitHub on the other hand uses this open source tool to host code repositories that can be used by people like you and me. &lt;/p&gt;
&lt;p&gt;Git can also be connected with mutliple other respository hosting providers such as GitHub, GitLab, Bitbucket etc. &lt;/p&gt;
&lt;h2 id="install-configure-git"&gt;Install &amp;amp; Configure Git&lt;/h2&gt;
&lt;p&gt;Git can be downloaded and installed from the &lt;a href="https://git-scm.com/downloads"&gt;Git-SCM website&lt;/a&gt;.
Register on GitHub with your email and note your username, e.g. my username on GitHub is &lt;a href="https://github.com/rehanhaider"&gt;&lt;code&gt;rehanhaider&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Then set your username in Git on your system by running&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git config --global user.name &lt;span class="s2"&gt;&amp;quot;&amp;lt;your username&amp;gt;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Next, set your commit email ID, this should match your GitHub ID. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git config --global user.email &lt;span class="s2"&gt;&amp;quot;email@example.com&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally, follow &lt;a href="https://docs.github.com/en/get-started/getting-started-with-git/caching-your-github-credentials-in-git"&gt;this guide on GitHub to cache your credentials&lt;/a&gt; so you don't have to enter your username / password everytime you use GitHub. &lt;/p&gt;
&lt;h3 id="git-github-basics"&gt;Git / GitHub basics&lt;/h3&gt;
&lt;p&gt;There is a lot of things you can do with Git, but we'll keep the focus on actions that you will encounter on a day to day basis. &lt;/p&gt;
&lt;p&gt;One key concept to keep in mind is that your system keeps a "&lt;em&gt;local&lt;/em&gt;" copy of a repository that needs to be synced with the "&lt;em&gt;origin&lt;/em&gt;" i.e. GitHub server. &lt;/p&gt;
&lt;p&gt;A typical Git workflow looks like below.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Git / GitHub workflow and branches" src="http://localhost:8080/images/99999989-git-workflow-svg.svg"&gt;&lt;/p&gt;
&lt;p&gt;Where the "&lt;em&gt;main&lt;/em&gt;" branch is usually not changed directly and each node is a "&lt;em&gt;commit&lt;/em&gt;". Developers create a branch, make their changes, and then create a "&lt;em&gt;pull request&lt;/em&gt;" or &lt;em&gt;PR&lt;/em&gt; to ask the owner of main branch to review their changes and merge the code. &lt;/p&gt;
&lt;h3 id="create-a-new-repository"&gt;Create a new repository&lt;/h3&gt;
&lt;p&gt;You either create a new repository on GitHub directly by clicking on the ➕ sign on top right, and choosing new repository. 
&lt;img alt="Create a GitHub Repo" src="http://localhost:8080/images/99999989-create-a-repo.png"&gt;.&lt;/p&gt;
&lt;h3 id="fork-a-repository"&gt;Fork a repository&lt;/h3&gt;
&lt;p&gt;Most of the times, you don't want to start from scratch and instead build on top of already existing and opensource tools / software. E.g. if you want to build your own copy of &lt;a href="https://cloudbytes.dev"&gt;CloudBytes&lt;/a&gt;, you can do so by "forking" the publicly available &lt;a href="https://github.com/CloudBytesDotDev/CloudBytes.dev"&gt;CloudBytes source code on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To fork a repository, go to &lt;a href="https://github.com/CloudBytesDotDev/CloudBytes.dev"&gt;CloudBytes source code on GitHub&lt;/a&gt; or any other repo that you want to fork and click on the fork button on top right. &lt;/p&gt;
&lt;h3 id="clone-a-repository"&gt;Clone a repository&lt;/h3&gt;
&lt;p&gt;Now a copy or fork of the repository has been created on GitHub, but you need to create a local copy for you to be able to make changes. This is called cloning, e.g. to clone the forked copy of CloudBytes repo&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git clone https://github.com/&amp;lt;your-username&amp;gt;/CloudBytes.dev.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="create-a-branch"&gt;Create a Branch&lt;/h3&gt;
&lt;p&gt;To create a new branch and checkout (switch over) to it, run the below&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git checkout -b &amp;lt;branch-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="stage-the-changes"&gt;Stage the changes&lt;/h3&gt;
&lt;p&gt;Save your changes in the staging area by running the below command&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git add . 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will start tracking any new file that you may have created and save all the changes you have made. &lt;/p&gt;
&lt;h3 id="commit-the-changes"&gt;Commit the changes&lt;/h3&gt;
&lt;p&gt;So far your changes are only saved in staging area, i.e. they haven't been added to your branch. To add your changes to the branch run&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git commit -m &lt;span class="s2"&gt;&amp;quot;Describe your changes&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="push-the-changes"&gt;Push the Changes&lt;/h3&gt;
&lt;p&gt;Now your changes are &lt;em&gt;committed&lt;/em&gt; but they are only available on your local system and not on GitHub. This will require you to &lt;em&gt;push&lt;/em&gt; your code to GitHub (or &lt;em&gt;origin&lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;If you're pushing your changes in the current branch for the fist time, then run&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git push --set-upstream origin &amp;lt;branch-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;After the first time, you can just run &lt;code&gt;git push&lt;/code&gt; to push your changes to GitHub.&lt;/p&gt;
&lt;h2 id="pull-requests"&gt;Pull Requests&lt;/h2&gt;
&lt;p&gt;Now your code is merged into your own branch, but not in the "upstream" branch that is the &lt;em&gt;main&lt;/em&gt; branch. To do that you need to create a pull request with your changes. That can be done on GitHub by visiting your &lt;em&gt;forked repo&lt;/em&gt;, clicking on the branches, find your branch in the list and click on New Pull request. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Create a pull request" src="http://localhost:8080/images/99999989-create-a-pull-request.png"&gt;&lt;/p&gt;
&lt;h3 id="merging-the-changes"&gt;Merging the changes&lt;/h3&gt;
&lt;p&gt;Now the owner of the repository will get a notification that there is an open &lt;em&gt;PR&lt;/em&gt;. They can review the changes and decide to merge it into the &lt;em&gt;main&lt;/em&gt; branch or send it back for further changes.&lt;/p&gt;</content><category term="Snippets"></category><category term="github"></category></entry><entry><title>Add a Table of Contents using Markdown in Pelican</title><link href="http://localhost:8080/snippets/add-a-table-of-contents-using-markdown-in-pelican" rel="alternate"></link><published>2021-07-18T00:00:00+00:00</published><updated>2021-07-18T00:00:00+00:00</updated><author><name>Rehan Haider</name></author><id>tag:localhost,2021-07-18:/snippets/add-a-table-of-contents-using-markdown-in-pelican</id><summary type="html">&lt;p&gt;A guide to customising Markdown to add table of contents in Python Pelican&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've spoken about how &lt;a href="http://localhost:8080/snippets/configure-fix-pelican-sitemap-error-on-google-search-console"&gt;Pelican documentation is incoherent&lt;/a&gt;. One of the key features that Pelican keeps hinting towards but never explains in detail is how to customise the Markdown output. &lt;/p&gt;
&lt;p&gt;Pelican uses &lt;a href="https://pygments.org/"&gt;Pygments&lt;/a&gt; as its code syntax highlighter, something that they mention several times. And Pelican uses &lt;a href="https://python-markdown.github.io/"&gt;Python-Markdown&lt;/a&gt; to convert the Markdown to HTML, again something that is not explicitly mentioned just hinted at. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;So how do you customise Markdown output?&lt;/strong&gt;
By using the official &lt;a href="https://python-markdown.github.io/extensions/toc/"&gt;Table of Content&lt;/a&gt; extension from Python-Markdown. A key feature, not even hinted at in the Pelican Documentation. &lt;/p&gt;
&lt;h2 id="how-to-add-a-toc-to-pelican"&gt;How to add a TOC to Pelican?&lt;/h2&gt;
&lt;p&gt;Pelican uses &lt;code&gt;MARKDOWN&lt;/code&gt; dictionary to store the configuration you want to use for &lt;code&gt;Python-Markdown&lt;/code&gt;. To add a TOC, append this snippet in your &lt;code&gt;pelicanconf.py&lt;/code&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;MARKDOWN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;extension_configs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;# Needed for code syntax highlighting&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;markdown.extensions.codehilite&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;css_class&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;highlight&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;markdown.extensions.extra&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;markdown.extensions.meta&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt;
        &lt;span class="c1"&gt;# This is for enabling the TOC generation&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;markdown.extensions.toc&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Table of Contents&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;output_format&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;html5&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;After that, you just need to add the shortcode &lt;code&gt;[TOC]&lt;/code&gt; in  your markdown file where you want to inser the TOC. &lt;/p&gt;
&lt;p&gt;This will do two things&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Add the table of contents to the output of your article&lt;/li&gt;
&lt;li&gt;Add the class name &lt;code&gt;toc&lt;/code&gt; to the table of contents that you can format using CSS&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="how-is-the-table-of-content-built"&gt;How is the Table of Content built?&lt;/h2&gt;
&lt;p&gt;After adding &lt;code&gt;[TOC]&lt;/code&gt; in your markdown document, it is replaced by the nested list of headers in you documents, e.g., &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;[TOC]

&lt;span class="gh"&gt;# 1 Main header&lt;/span&gt;
Content under main header
&lt;span class="gu"&gt;## 1.1 Secondary header&lt;/span&gt;
COntent under secondary header
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;will be replaced by &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;toc&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#1-main-header&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;1 Main header&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#11-secondary-header&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;1.1 Secondary header&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1-main-header&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Header 1&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Content under main header&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;11-secondary-header&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Header 2&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h2&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Content under secondary header&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can use a bit of CSS to format your TOC by adding the below to your CSS stylesheets&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;toc&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="kt"&gt;em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="kt"&gt;em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#222831&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;.5&lt;/span&gt;&lt;span class="kt"&gt;em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="kt"&gt;em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;rgba&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;0.7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;toc&lt;/span&gt; &lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;list-style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="kt"&gt;rem&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="kt"&gt;rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;toc&lt;/span&gt; &lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;.25&lt;/span&gt;&lt;span class="kt"&gt;em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;toc&lt;/span&gt; &lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#498afb&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;color&lt;/span&gt; &lt;span class="mf"&gt;.4&lt;/span&gt;&lt;span class="kt"&gt;s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;toc&lt;/span&gt; &lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#9166cc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;color&lt;/span&gt; &lt;span class="mf"&gt;.4&lt;/span&gt;&lt;span class="kt"&gt;s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;border-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt; &lt;span class="kc"&gt;solid&lt;/span&gt; &lt;span class="mh"&gt;#9166cc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;toc&lt;/span&gt; &lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;.75&lt;/span&gt;&lt;span class="kt"&gt;em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;font-weight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;margin-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;;;;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;toc&lt;/span&gt; &lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#b2becd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is how you add a table of contents to a markdown document in Pelican.&lt;/p&gt;</content><category term="Snippets"></category><category term="python"></category><category term="pelican"></category><category term="markdown"></category></entry><entry><title>Clean URLs in Pelican Sitemap using Python</title><link href="http://localhost:8080/snippets/clean-urls-in-pelican-sitemap-using-python" rel="alternate"></link><published>2021-07-17T00:00:00+00:00</published><updated>2021-07-17T00:00:00+00:00</updated><author><name>Rehan Haider</name></author><id>tag:localhost,2021-07-17:/snippets/clean-urls-in-pelican-sitemap-using-python</id><summary type="html">&lt;p&gt;Learn to use Python to remove '.html' extensions and clean URLs in sitemaps generated by Pelican&lt;/p&gt;</summary><content type="html">&lt;p&gt;A common problem that I faced using &lt;a href="http://localhost:8080/snippets/what-is-jamstack-and-why-should-you-be-using-it"&gt;Jamstack&lt;/a&gt; static site generators is having clean URLs. &lt;/p&gt;
&lt;h2 id="what-is-clean-url"&gt;What is Clean URL?&lt;/h2&gt;
&lt;p&gt;A "Clean URL" is basically page address that doesn't have any extension such as &lt;code&gt;.html&lt;/code&gt;, &lt;code&gt;.php&lt;/code&gt; or trailing slashes &lt;code&gt;/&lt;/code&gt; at the end of the URL. &lt;/p&gt;
&lt;p&gt;You run into challenges ranging from: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Lack of full support for clean URLs in the Static Site Generator (SSG). E.g. typically Clean URLs are configured by using a property of webservers and browsers where by default any webserver will return &lt;code&gt;index.html&lt;/code&gt; inside the folder if you access the folder directly. &lt;/li&gt;
&lt;li&gt;If you configure clean URLs by using the technique above, the URLs withh have trailing &lt;code&gt;/&lt;/code&gt; slashes and "pages" will continue to have &lt;code&gt;.html&lt;/code&gt;. &lt;/li&gt;
&lt;li&gt;If you use URL rewrite rules on the hosting webserver (e.g. Firebae provides a very easy to configure method to generate clean URLs), your SSG generated sitemap will be incorrect and contain &lt;code&gt;.html&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So, you basically end up between a rock and a hard place. &lt;/p&gt;
&lt;h3 id="why-are-clean-urls-important"&gt;Why are Clean URLs important?&lt;/h3&gt;
&lt;p&gt;There are two related aspects. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Clean URLs look better&lt;/strong&gt;. Take for example the URL of this page &lt;code&gt;https://uberpython.com/articles/clean-urls-in-sitemap-using-python&lt;/code&gt;. You can understand from the URL that this is an article and the topic. With a &lt;code&gt;.html&lt;/code&gt; at the end, nothing will change but it just looks ugly. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Clean URLs are better for SEO&lt;/strong&gt;: Widely known fact is because Clean URLs look better and increases the accessibility of a page, thus also increases the SEO score of a page&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="how-to-create-a-clean-urls"&gt;How to create a Clean URLs?&lt;/h2&gt;
&lt;h3 id="clean-urls-in-firebase-hosting"&gt;Clean URLs in Firebase Hosting&lt;/h3&gt;
&lt;p&gt;The best method that I found is to use URL rewrite rules to generate Clean URLs, e.g. in if you're using Firebae Hositng, change the &lt;code&gt;firebase.json&lt;/code&gt; to the below&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;hosting&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;public&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;output&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;ignore&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;firebase.json&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;**/.*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;**/node_modules/**&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;cleanUrls&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;trailingSlash&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That's all it takes, Firebase takes care of all the internal configuration in the webserver. &lt;/p&gt;
&lt;h2 id="solving-the-sitemap-html-problem"&gt;Solving the Sitemap '.html' Problem&lt;/h2&gt;
&lt;p&gt;After you have configured clean URLs in your webserver, if you don't correct your Sitemap, Google &amp;amp; other search engines will struggle to crawl and index your website correctly and that can have negative impact on your search engine rankings. &lt;/p&gt;
&lt;p&gt;To solve this, we will do the following&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Let the SSG generate the sitemap that includes &lt;code&gt;.html&lt;/code&gt; extension&lt;/li&gt;
&lt;li&gt;Run a small Python snippet to replace that&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Create a file named &lt;code&gt;fix_sitemap.py&lt;/code&gt; witht he below contents and place it in your Pelican root directly (the folder where you have &lt;code&gt;publishconf.py&lt;/code&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# fix_sitemap.py&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fix_sitemap&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;output/sitemap.xml&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;original&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;corrected&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;original&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Opening sitemap failed with error: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;output/sitemap.xml&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;w&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;corrected&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Saving sitemap failed with error: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A rather simple solution where we simplly searched for all &lt;code&gt;.html&lt;/code&gt; and removed it from the sitemap. No XML parsing, no tree navigation. &lt;/p&gt;
&lt;p&gt;Now go your Pelican's configuration in &lt;code&gt;publishconf.py&lt;/code&gt; and add these lines right at the bottom&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fix_sitemap&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;fix_sitemap&lt;/span&gt;
&lt;span class="n"&gt;fix_sitemap&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will ensure everytime you publish your website, the sitemap is updated correctly. &lt;/p&gt;</content><category term="Snippets"></category><category term="python"></category><category term="pelican"></category></entry><entry><title>Auto Deploy Pelican Websites to Firebase Hosting</title><link href="http://localhost:8080/snippets/auto-deploy-pelican-websites-to-firebase-hosting" rel="alternate"></link><published>2021-07-13T00:00:00+00:00</published><updated>2021-07-13T00:00:00+00:00</updated><author><name>Rehan Haider</name></author><id>tag:localhost,2021-07-13:/snippets/auto-deploy-pelican-websites-to-firebase-hosting</id><summary type="html">&lt;p&gt;A step by step guide to installing and configuring Pelican and hosting the final blog on Firebase Hosting&lt;/p&gt;</summary><content type="html">&lt;div class="toc"&gt;&lt;span class="toctitle"&gt;Table of Contents&lt;/span&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#getting-started"&gt;Getting started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#the-workflow"&gt;The workflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#1-setting-up-pelican"&gt;1. Setting up Pelican&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#2-create-configure-the-firebase-project"&gt;2. Create &amp;amp; configure the Firebase Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#3-create-github-secrets"&gt;3. Create GitHub Secrets&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="#31-get-the-service-account-json"&gt;3.1 Get the Service Account JSON&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#32-store-the-secret-in-github-secrets"&gt;3.2 Store the secret in GitHub Secrets&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#4-create-the-action-to-deploy-automatically-to-firebase-hosting"&gt;4. Create the action to deploy automatically to Firebase Hosting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#5-push-the-code-to-github-and-watch-the-fun-unfold"&gt;5. Push the Code to GitHub and watch the fun unfold&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;p&gt;In a previous article I wrote about &lt;a href="http://localhost:8080/snippets/automate-deployment-of-pelican-website-to-github-pages"&gt;how you can host a simple Pelican static website on Github Pages&lt;/a&gt; and automate the deployment process using Github Action. &lt;/p&gt;
&lt;p&gt;GitHub Pages is brilliant and extremely useful for a simple blog or small webites, but quickly becomes limited in features if you're trying to build anything serious. &lt;/p&gt;
&lt;p&gt;For starters, if you recall from the &lt;a href="http://localhost:8080/snippets/what-is-jamstack-and-why-should-you-be-using-it"&gt;Jamstack explanation&lt;/a&gt; and its principles, you rely on third party APIs. E.g. if you want to build a user management system into your website you will need to use a Auth API from a third party such as Okta, Azure, or AWS. &lt;/p&gt;
&lt;p&gt;This is where Firebase has a massive advantage by providing an integrated end to end development framework. Thus if you want to build more dynamic features into your Pelican / Jamstack website, you may want to use Firebase for your hosting purposes. &lt;/p&gt;
&lt;p&gt;In this guide, we will discuss how to setup Continous Deployments (CD) to Firebase Hosting so that your changes are deployed automatically on &lt;code&gt;git push&lt;/code&gt;. &lt;/p&gt;
&lt;h2 id="getting-started"&gt;Getting started&lt;/h2&gt;
&lt;p&gt;After discovering VSCode devcontainers, I've just stopped using Python's virtual environment. So we will use devcontainers to clone the repository and prepare the development environment. &lt;/p&gt;
&lt;p&gt;So in this tutorial, we will&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Set up the Pelican development environment insite a container and make a simple webpage using the default theme&lt;/li&gt;
&lt;li&gt;Create a Firebase project that will be used to host the website&lt;/li&gt;
&lt;li&gt;Create GitHub secrets that will be used to deploy the Pelican output to Firebase Hosting&lt;/li&gt;
&lt;li&gt;Then create the action to deploy automatically to Firebase Hosting&lt;/li&gt;
&lt;li&gt;Push the codebase back to GitHub repository &amp;amp; watch the fun unfold&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="the-workflow"&gt;The workflow&lt;/h2&gt;
&lt;p&gt;We will use the following setup &amp;amp; automation to automate the deployment process.
&lt;img alt="pelican ci cd" src="http://localhost:8080/images/99999992-pelican-ci-cd.png"&gt;&lt;/p&gt;
&lt;h2 id="1-setting-up-pelican"&gt;1. Setting up Pelican&lt;/h2&gt;
&lt;p&gt;Use the instructions in &lt;a href="http://localhost:8080/snippets/beginners-guide-to-installing-pelican-in-a-container"&gt;this guide on how to install Pelican in a VSCode devcontainer&lt;/a&gt; and create a small blog. &lt;/p&gt;
&lt;p&gt;Then capture your dependencies by running&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip freeze &amp;gt; requirements.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="2-create-configure-the-firebase-project"&gt;2. Create &amp;amp; configure the Firebase Project&lt;/h2&gt;
&lt;p&gt;Visit the &lt;a href="https://firebase.google.com/"&gt;Firebase Console Home&lt;/a&gt; page and register for an account, or sign-in if you already have an account. After that, click on "&lt;em&gt;Create a Project&lt;/em&gt;". &lt;/p&gt;
&lt;p&gt;&lt;img alt="Create a firebase project" src="http://localhost:8080/images/99999992-firebase-create-project.png"&gt;&lt;/p&gt;
&lt;p&gt;Give your project a name and then follow the instructuions to complete the setup.&lt;/p&gt;
&lt;p&gt;After that you need to create two filê in workspace&lt;/p&gt;
&lt;p&gt;&lt;code&gt;.firebaserc&lt;/code&gt;: Contains the project list and aliases. If you open it you would see something like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;projects&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;default&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;your project name&amp;gt;&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Instead of "cloudbytes-prod" you should see the project you chose during the configuration.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;firebase.json&lt;/code&gt;: Contains the configuration of your services, &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;hosting&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;public&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;output&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;ignore&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;firebase.json&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;**/.*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;**/node_modules/**&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="3-create-github-secrets"&gt;3. Create GitHub Secrets&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://docs.github.com/en/actions/reference/encrypted-secrets"&gt;GitHub Secrets&lt;/a&gt; is GitHub's Key Management System (KMS) that excrypts and stores API keys so it can be used in your projects without being visible to anybody, even you. &lt;/p&gt;
&lt;p&gt;We need to store the credentials to Firebase Hosting Project as a secret in GitHub so it can be used to push your code directly to Firebase. &lt;/p&gt;
&lt;p&gt;To do that &lt;/p&gt;
&lt;h3 id="31-get-the-service-account-json"&gt;3.1 Get the Service Account JSON&lt;/h3&gt;
&lt;p&gt;Go to Firebase -&amp;gt; Select your Project -&amp;gt; Click on the ⚙ Settings icon on the left navigation page, then click on &lt;em&gt;Project Settings&lt;/em&gt;. &lt;/p&gt;
&lt;p&gt;Then click on the &lt;em&gt;Service accounts&lt;/em&gt; tab, this will create a Service Account for your project. Service Account credentials are used to interact with Firebase Services. &lt;/p&gt;
&lt;p&gt;Scroll to the bottom -&amp;gt; Click on &lt;em&gt;Generate new private key&lt;/em&gt; then in the popup box, click again on &lt;em&gt;Generate key&lt;/em&gt;. &lt;/p&gt;
&lt;p&gt;You will be prompted to save the file ending in &lt;code&gt;.json&lt;/code&gt; extension. &lt;/p&gt;
&lt;div class="admonition danger"&gt;
&lt;p class="admonition-title"&gt;WARNING: Never share or upload this service account credentials including in GitHub repository&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The right way to handle such credentials is via encrypted secrets. &lt;/p&gt;
&lt;h3 id="32-store-the-secret-in-github-secrets"&gt;3.2 Store the secret in GitHub Secrets&lt;/h3&gt;
&lt;p&gt;Open you GitHub repository and on the &lt;code&gt;Settings&lt;/code&gt; tab, scroll down and click on &lt;code&gt;Secrets&lt;/code&gt; in the navigation pange on left. &lt;/p&gt;
&lt;p&gt;Then click on &lt;code&gt;New repository secret&lt;/code&gt; button on the top right. Give it any memorable name, e.g. &lt;code&gt;FIREBASE_SERVICE_ACCOUNT&lt;/code&gt; and paste the contents of the service account file that you download in previos section then click &lt;code&gt;Add secret&lt;/code&gt; to save. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Github Repository Secret" src="http://localhost:8080/images/99999992-github_repository_secret.png"&gt;&lt;/p&gt;
&lt;h2 id="4-create-the-action-to-deploy-automatically-to-firebase-hosting"&gt;4. Create the action to deploy automatically to Firebase Hosting&lt;/h2&gt;
&lt;p&gt;Now we have all the building blocks ready, except the GitHub action definition. In VSCode, create a file at the path &lt;code&gt;.github/workflows/deploy-to-firebase.yml&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Add the following content in the file&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Deploy&lt;/span&gt;

&lt;span class="nt"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;push&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;branches&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;main&lt;/span&gt;

&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;build_and_deploy&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;runs-on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="nt"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/checkout@v2&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;rehanhaider/pelican-build-action@v0.1.11&lt;/span&gt;
      &lt;span class="nt"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nt"&gt;PELICAN_CONFIG_FILE&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;app/publishconf.py&lt;/span&gt;
        &lt;span class="nt"&gt;PELICAN_CONTENT_FOLDER&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;app/content&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;FirebaseExtended/action-hosting-deploy@v0&lt;/span&gt;
      &lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nt"&gt;repoToken&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;${{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;secrets.GITHUB_TOKEN&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;}}&amp;#39;&lt;/span&gt;
        &lt;span class="nt"&gt;firebaseServiceAccount&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;${{&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;secrets.FIREBASE_SERVICE_ACCOUNT}}&amp;#39;&lt;/span&gt;
        &lt;span class="nt"&gt;channelId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;live&lt;/span&gt;
        &lt;span class="nt"&gt;projectId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;&amp;lt;enter your project id&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;YAML is a declarative syntax where it is easy to understand what is going on. 
In the first part above, we define that the action will work &lt;code&gt;on&lt;/code&gt; &lt;code&gt;push&lt;/code&gt; into the &lt;code&gt;main&lt;/code&gt; &lt;code&gt;branch&lt;/code&gt; of your GitHub repository. &lt;/p&gt;
&lt;p&gt;Then we created a &lt;code&gt;job&lt;/code&gt;, and named it &lt;code&gt;build_and_deploy&lt;/code&gt; that will run on &lt;code&gt;ubuntu-latest&lt;/code&gt; version of operating system. &lt;/p&gt;
&lt;p&gt;After that we defined the &lt;code&gt;steps&lt;/code&gt; that need to be followed which are, &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Use &lt;code&gt;actions/checkout@v2&lt;/code&gt; to access the branch of your repository which contains your code&lt;/li&gt;
&lt;li&gt;Use another action that I built named &lt;code&gt;rehanhaider/pelican-build-action@v0.1.11&lt;/code&gt; that will install all of your dependencies stored in &lt;code&gt;requirements.txt&lt;/code&gt; and execute the &lt;code&gt;pelican content&lt;/code&gt; command to generate the output in a folder named &lt;code&gt;output&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The above action is performed using the environmental variables under &lt;code&gt;env&lt;/code&gt; that contains the path to the config file and the content folder where the markdown content is stored. &lt;/li&gt;
&lt;li&gt;Finally, we use official Firebase action to deploy the contents of &lt;code&gt;output&lt;/code&gt; folder that the action will create into Firebase hosting &lt;/li&gt;
&lt;li&gt;The above action will be performed with a &lt;code&gt;repoToken&lt;/code&gt; that is provided by GitHub automatically, the &lt;code&gt;FIREBASE_SERVICE_ACCOUNT&lt;/code&gt; credentials that we stored in previous section, into the &lt;code&gt;live&lt;/code&gt; channel and finally the &lt;code&gt;projectId&lt;/code&gt; that you should change to the name of the project you had created on Firebase&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="5-push-the-code-to-github-and-watch-the-fun-unfold"&gt;5. Push the Code to GitHub and watch the fun unfold&lt;/h2&gt;
&lt;p&gt;Open the VSCode terminal and run the below command to add all your files to your GitHub repository tracking&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git add .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Commit your changes to the repository by running&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git commit -m &lt;span class="s2"&gt;&amp;quot;My cool comment&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then push your code to the GitHub by running&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;git push
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now go to GitHub.com and browse to your repository page, click on &lt;code&gt;Actions&lt;/code&gt; tab you will see the action being executed. Click on the action to see more details. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Github action success results" src="http://localhost:8080/images/99999992-github_action_results.png"&gt;&lt;/p&gt;
&lt;p&gt;Now your Pelican Blog is setup for auto deployment to firebase, everytime you push your code.&lt;/p&gt;</content><category term="Snippets"></category><category term="firebase"></category><category term="python"></category><category term="pelican"></category></entry><entry><title>Beginner's guide to installing Pelican in a Container</title><link href="http://localhost:8080/snippets/beginners-guide-to-installing-pelican-in-a-container" rel="alternate"></link><published>2021-07-13T00:00:00+00:00</published><updated>2021-07-13T00:00:00+00:00</updated><author><name>Rehan Haider</name></author><id>tag:localhost,2021-07-13:/snippets/beginners-guide-to-installing-pelican-in-a-container</id><summary type="html">&lt;p&gt;Step by step guide on how to install and configure Pelican in a Docker Container for development for developement os static websites following Jamstack architecture&lt;/p&gt;</summary><content type="html">&lt;p&gt;Pelican is a type of Static Site Generator (SSG) written in Python that follows the Jamstack architecture pattern. It is easily the most popular Python based SSG with Nikola and Lektor coming in a distant second and third. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pelican's popularity is largely due to the fact that&lt;/strong&gt;&lt;br&gt;
a. It is written in Python&lt;br&gt;
b. It has a rich ecosystem of plugins and themes&lt;br&gt;
c. It uses Jinja2 as templating language, making it extremely easy to build your own theme&lt;br&gt;
d. It is extremely stable, having been around for almost a decade and well documented&lt;br&gt;
e. It is actively maintained by close to 400 contributors&lt;/p&gt;
&lt;p&gt;&lt;img alt="Pelican active maintained github" src="http://localhost:8080/images/99999993-pelican_github_activity.png"&gt;&lt;/p&gt;
&lt;h2 id="getting-started"&gt;Getting Started&lt;/h2&gt;
&lt;p&gt;First create your GitHub repository that will host the codebase. Then&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Fire up VSCode and press &lt;code&gt;Shift+Ctrl+P&lt;/code&gt; to bring up the command palette. &lt;br&gt;&lt;/li&gt;
&lt;li&gt;Search for &lt;em&gt;"Clone Repository in Container Volume"&lt;/em&gt;, then follow the steps to select the repository you want to clone. &lt;br&gt;&lt;/li&gt;
&lt;li&gt;When asked to choose a container configuration, select &lt;em&gt;"Show all definition"&lt;/em&gt; and search for Python 3, &lt;br&gt;&lt;/li&gt;
&lt;li&gt;then select Python 3.9 from the dropdown. &lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[OPTIONAL]&lt;/code&gt; Also, choose to install NodeJS as well by selecting the checkbox when promtpted. &lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;While we don't need NodeJS for Pelican, you will need NPM (which gets installed together as a bundle) in future to work directly with Firebase. However, this is an optional step and not required for this tutorial. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If the container was created you would see a folder named &lt;code&gt;.devcontainer&lt;/code&gt; created in VSCode explorer pane. This folder contains two files, a &lt;code&gt;Dockerfile&lt;/code&gt; that contains the configuration of your docker and a &lt;code&gt;.devcontainer.json&lt;/code&gt; that stores the preferences for the VSCode workspace you're in currently. &lt;/p&gt;
&lt;p&gt;You should now have a devcontainer configured. &lt;/p&gt;
&lt;p&gt;Open the VSCode terminal, you will notice you're inside a Linux machine. To verify, run&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;cat /etc/*-release
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will display something similar to the below&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;PRETTY_NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Debian GNU/Linux 10 (buster)&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;NAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Debian GNU/Linux&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;VERSION_ID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;10&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;VERSION&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;10 (buster)&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;VERSION_CODENAME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;buster
&lt;span class="nv"&gt;ID&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;debian
&lt;span class="nv"&gt;HOME_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://www.debian.org/&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;SUPPORT_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://www.debian.org/support&amp;quot;&lt;/span&gt;
&lt;span class="nv"&gt;BUG_REPORT_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://bugs.debian.org/&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="installing-pelican-in-the-devcontainer"&gt;Installing Pelican in the devcontainer&lt;/h2&gt;
&lt;p&gt;In VSCode, bring up your terminal and then install Pelican by running&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip install &lt;span class="s2"&gt;&amp;quot;pelican[markdown]&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will install pelican and all its dependencies including support for markdown&lt;/p&gt;
&lt;h3 id="step-3-setup-pelican"&gt;Step 3: Setup Pelican&lt;/h3&gt;
&lt;p&gt;In the terminal type the below to trigger Pelican setup&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pelican-quickstart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This starts the interactive setup where you are asked a series of question, choose as per below 👇🏽 (blank means leave the default by pressing Enter)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Where&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;you&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;want&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;create&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;your&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;web&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="vm"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;.&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;What&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;will&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;be&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;web&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="vm"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MyPelicanWebsite&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Who&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;will&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;be&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;web&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="vm"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Me&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;What&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;will&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;be&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;language&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;web&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="vm"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;en&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;you&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;want&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;specify&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;prefix&lt;/span&gt;&lt;span class="vm"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;.,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;you&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;want&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;enable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pagination&lt;/span&gt;&lt;span class="vm"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;How&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;many&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;articles&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;per&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;you&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;want&lt;/span&gt;&lt;span class="vm"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;10&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;What&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;your&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;time&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;zone&lt;/span&gt;&lt;span class="vm"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Europe/Paris&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;you&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;want&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;generate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Makefile&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;automate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;generation&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;publishing&lt;/span&gt;&lt;span class="vm"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;you&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;want&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;upload&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;your&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;website&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;FTP&lt;/span&gt;&lt;span class="vm"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;you&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;want&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;upload&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;your&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;website&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SSH&lt;/span&gt;&lt;span class="vm"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;you&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;want&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;upload&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;your&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;website&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Dropbox&lt;/span&gt;&lt;span class="vm"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;you&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;want&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;upload&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;your&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;website&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;S3&lt;/span&gt;&lt;span class="vm"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;you&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;want&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;upload&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;your&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;website&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Rackspace&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Cloud&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Files&lt;/span&gt;&lt;span class="vm"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;you&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;want&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;upload&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;your&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;website&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;GitHub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Pages&lt;/span&gt;&lt;span class="vm"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="n"&gt;Done&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Your&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;available&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;at&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;workspaces&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;myWorkingFolder&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We haven't used the default GitHub Pages setting because it only publishes the output but doesn't automate the process of building.&lt;/p&gt;
&lt;p&gt;You content is stored in the "content" folder, create a file named &lt;code&gt;my-first-post.md&lt;/code&gt; in that folder with the below contents&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Title: My First automated blog post
Date: 2021-07-10
Category: Snippets
Tags: github, python, pelican
Author: Me
Summary: A guide to configuring automated Continuous Deployment (CD) of \
static site generated by Pelican SSG from GitHub repository to GitHub pages using GitHub Actions

&lt;span class="gu"&gt;## This is my first blog post&lt;/span&gt;
And it looks wonderful!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="test-your-pelican-website"&gt;Test your Pelican website&lt;/h2&gt;
&lt;p&gt;To generate and serve your Pelican Website, run the below command&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;make devserver
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will build your blog in the &lt;code&gt;output&lt;/code&gt; folder and start serving it on &lt;code&gt;localhost:8000&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Start your browser and open the URL &lt;code&gt;localhost:8000&lt;/code&gt;, and congrats 🎉🙌🏽🎇🎊🎈 you blog is up and running.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Pelican blog default theme" src="http://localhost:8080/images/99999995-pelican-blog.png"&gt;&lt;/p&gt;</content><category term="Snippets"></category><category term="python"></category><category term="pelican"></category><category term="vscode"></category></entry><entry><title>Configure Firebase hosting emulator</title><link href="http://localhost:8080/snippets/configure-firebase-hosting-emulator" rel="alternate"></link><published>2021-07-11T00:00:00+00:00</published><updated>2021-07-11T00:00:00+00:00</updated><author><name>Rehan Haider</name></author><id>tag:localhost,2021-07-11:/snippets/configure-firebase-hosting-emulator</id><summary type="html">&lt;p&gt;Use Firebase hosting emulator to locally test your static website generated by Hugo, Gatsby, Pelican and other SSGs&lt;/p&gt;</summary><content type="html">&lt;p&gt;If you're hosting your static website or  &lt;a href="http://localhost:8080/snippets/what-is-jamstack-and-why-should-you-be-using-it"&gt;Jamstack&lt;/a&gt; webapp on firebase, you don't need to wait to deploy it to see how it will behave. You can do that while developing by installing &lt;a href="https://firebase.google.com/docs/emulator-suite"&gt;Firebase Emulators&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Firebase offers local emulators for almost all of its services ranging from Auth, Hosting to even Realtime Database. You can use these emulators to develop features even before deploying them to Firebase. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Firebase emulator" src="http://localhost:8080/images/99999994-firebase_emulator.png"&gt;&lt;/p&gt;
&lt;p&gt;Let's learn how to test your static website or a Jamstack website you have created using tools such as Pelican, Gatsby, etc. &lt;/p&gt;
&lt;h2 id="setting-up-the-environment"&gt;Setting up the environment&lt;/h2&gt;
&lt;p&gt;Assuming you have your source code stored in a GitHub repository, fire up VSCode and press &lt;code&gt;Shift+Ctrl+P&lt;/code&gt; to bring up the command palette. Then type/search for &lt;code&gt;Remote-Containers: Clone Repository in Container Volume&lt;/code&gt; and press enter.  Then choose the repository you want to clone, followed by the branch you want to clone. &lt;/p&gt;
&lt;p&gt;If your devcontainer configuration is not already defined, it will as you to &lt;em&gt;Select a container configuration definition&lt;/em&gt;, choose one based on the SSG you're using and its dependencies, e.g. in case of Pelican, choose Python 3, then choose the version as 3.9, and opt to install NodeJS as well since that is a requirement for Firebase CLI. &lt;/p&gt;
&lt;p&gt;If you're not using devcontainers for some absurd reason, install NPM from the below link. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;https://nodejs.org/en/download/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="setup-firebase-cli"&gt;Setup Firebase CLI&lt;/h2&gt;
&lt;p&gt;To install the latest version of Firebase CLI, run the below in your VSCode Terminal&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;curl -sL firebase.tools &lt;span class="p"&gt;|&lt;/span&gt; bash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will automatically download and run a installation script that will detect your version of OS, and install the appropriate CLI version. &lt;/p&gt;
&lt;h3 id="login-into-firebase-cli"&gt;Login into Firebase CLI&lt;/h3&gt;
&lt;p&gt;To login, run the below command&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;firebase login
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will start the login process and open a link in your browser. After logging in using our firebase credentials you will be routed back and should see the below (redacted confidential data)&lt;/p&gt;
&lt;p&gt;&lt;img alt="Firebase login successful message" src="http://localhost:8080/images/99999994-firebase-cli-login.png"&gt;&lt;/p&gt;
&lt;h3 id="firebase-cli-initial-setup"&gt;Firebase CLI Initial Setup&lt;/h3&gt;
&lt;p&gt;The firebase project is not yet setup. Let's first check the projects that you have already created by running&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;firebase projects:list
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Assuming you already have some projects created you will see a list similar to below&lt;/p&gt;
&lt;p&gt;&lt;img alt="Firebase list all projects" src="http://localhost:8080/images/99999994-firebase_project_list.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt;: Then let's setup your projects locally, to begin that run&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;firebase init 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step 2&lt;/strong&gt;: This will bring up a list of options to initialise, use the arrow keys to navigate to Emulators and press Space to select it, then press enter. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 3&lt;/strong&gt;: Next it will ask for the project you want to use, choose the one you need. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 4&lt;/strong&gt;: Then it will ask to choose the Firebase emulators you want to setup, navigate to Hosting Emulator using arrow keys, press Space to select and then press Enter.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 5&lt;/strong&gt;: Select the port you want the emulator to use, I chose 8080, since I already use the default port 5000 for some other apps. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 6&lt;/strong&gt;: It will next ask if you want to enable the Emulator UI, choose the default (Yes), then leave the next question about Emulator port to default and press enter&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 7&lt;/strong&gt;: Finally, when prompted if you want to download the emulators now, Type 'Y' and then press Enter.&lt;/p&gt;
&lt;p&gt;Now your Firebase CLI is configured to use the Hosting Emulator. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Firebase emulator setup" src="http://localhost:8080/images/99999994-firebase_emulator_setup.png"&gt;&lt;/p&gt;
&lt;h2 id="review-the-firebase-cli-configuration"&gt;Review the Firebase CLI configuration&lt;/h2&gt;
&lt;p&gt;The above configuration would have created two files&lt;/p&gt;
&lt;p&gt;&lt;code&gt;.firebaserc&lt;/code&gt;: Contains the project list and aliases. If you open it you would see something like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;projects&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;default&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;cloudbytes-prod&amp;quot;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Instead of "cloudbytes-prod" you should see the project you chose during the configuration.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;firebase.json&lt;/code&gt;: Contains the configuration of your services, &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;hosting&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;public&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;output&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;ignore&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;firebase.json&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;**/.*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;**/node_modules/**&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;emulators&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;hosting&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;port&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;8080&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;ui&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;quot;enabled&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The above file stores configuration for&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;hosting&lt;/strong&gt;: with "public" key holding the name of the folder that contains all the files you want to host. Make sure this path points to the correct folder.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;emulators&lt;/strong&gt;: the configuration of our emulator that states, "Hosting Emulator" is enabled at port "8080" and UI is enabled&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="run-firebase-hosting-emulator"&gt;Run Firebase Hosting Emulator&lt;/h2&gt;
&lt;p&gt;To start your hosting emulator run &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;firebase emulators:start --only hosting
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will start your emulator using the "default" project select in &lt;code&gt;.firebaserc&lt;/code&gt; and the "public" folder selected in &lt;code&gt;firebase.json&lt;/code&gt; at port 8080. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Firebae hosting emulator start" src="http://localhost:8080/images/99999994-firebase_hosting_emulator_start.png"&gt;&lt;/p&gt;
&lt;p&gt;To view the served website, open the URL &lt;code&gt;localhost:8080&lt;/code&gt; in your browser. &lt;/p&gt;</content><category term="Snippets"></category><category term="firebase"></category><category term="github"></category><category term="python"></category></entry><entry><title>Automate deployment of Pelican Website to GitHub Pages</title><link href="http://localhost:8080/snippets/automate-deployment-of-pelican-website-to-github-pages" rel="alternate"></link><published>2021-07-10T00:00:00+00:00</published><updated>2021-07-10T00:00:00+00:00</updated><author><name>Rehan Haider</name></author><id>tag:localhost,2021-07-10:/snippets/automate-deployment-of-pelican-website-to-github-pages</id><summary type="html">&lt;p&gt;A guide to configuring automated Continuous Deployment (CD) of static site generated by Pelican SSG from GitHub repository to GitHub pages using GitHub Actions&lt;/p&gt;</summary><content type="html">&lt;p&gt;Before moving forward, let's just accept that all of us use GitHub as our code repository. 
There are good reasons why? From free public and private repositories, to free GitHub Actions and free static hosting in form of &lt;a href="https://pages.github.com/"&gt;GitHub Pages&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="what-is-github-pages"&gt;What is GitHub Pages&lt;/h2&gt;
&lt;p&gt;If you haven't heard of GitHub Pages, it is a service from GitHub that allows you to host a website or documentation directly from your repository. 
All you need to do is edit your changes, and push to the repository and your changes will be live in seconds.&lt;/p&gt;
&lt;p&gt;This becomes specially relevant with the increased adoption of &lt;a href="http://localhost:8080/snippets/what-is-jamstack-and-why-should-you-be-using-it"&gt;Jamstack&lt;/a&gt; tools such as Pelican, Hugo, etc. &lt;/p&gt;
&lt;p&gt;But here's the problem. GitHub pages works only on three folders&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;main&lt;/strong&gt; branch: The root of default main branch. Inconvenient since root folder will typically contain all of your code&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;main/docs&lt;/strong&gt; directory: The doc folder in main branch. This could be possible but this would mean generating the content manually and then pushing it to repository&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gh-pages&lt;/strong&gt; branch: This could work but you need to copy only the output folder so that the full code is not copied&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="how-to-automate-deployment"&gt;How to automate deployment&lt;/h2&gt;
&lt;p&gt;Here's what we will do, we will setup a VSCode &lt;em&gt;devcontainer&lt;/em&gt;, install Pelican, and then publish the website to GitHub pages. &lt;/p&gt;
&lt;h3 id="step-1-prepare-the-development-environment"&gt;Step 1: Prepare the development environment&lt;/h3&gt;
&lt;p&gt;To begin, create a new repository on GitHub. &lt;/p&gt;
&lt;p&gt;Then fire up VSCode, press &lt;code&gt;Shift + Ctrl + P&lt;/code&gt; to bring up the command pallette, then type &lt;em&gt;"Clone repository in Container Volume"&lt;/em&gt; to clone your repository in a container. &lt;/p&gt;
&lt;p&gt;This will ask if you want to clone a repository from GitHub, select the option, followed by the repository you have created. After that, choose the main as the branch you want to clone. &lt;/p&gt;
&lt;p&gt;After that you will be asked to choose a container configuration, select "Show all definitions", search for Python 3, and choose Python 3.9 from the dropdowns, when asked, choose to install NodeJS as well. &lt;/p&gt;
&lt;p&gt;We now have a &lt;a href="http://localhost:8080/snippets/use-vscode-devcontainers-instead-of-python-venv"&gt;devcontainer&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="step-2-install-pelican-and-dependencies"&gt;Step 2: Install Pelican and dependencies&lt;/h3&gt;
&lt;p&gt;In VSCode, bring up your terminal and then install Pelican by running&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip install &lt;span class="s2"&gt;&amp;quot;pelican[markdown]&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="step-3-setup-pelican"&gt;Step 3: Setup Pelican&lt;/h3&gt;
&lt;p&gt;In the terminal type the below to trigger Pelican setup&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pelican-quickstart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This starts the interactive setup where you are asked a series of question, choose as per below&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;Where&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;you&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;want&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;create&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;your&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;web&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="vm"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;.&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;What&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;will&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;be&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;web&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="vm"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MyPelicanWebsite&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Who&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;will&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;be&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;web&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="vm"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Me&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;What&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;will&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;be&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;the&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;language&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;web&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="vm"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;en&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;you&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;want&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;specify&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;URL&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;prefix&lt;/span&gt;&lt;span class="vm"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;.,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;you&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;want&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;enable&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;pagination&lt;/span&gt;&lt;span class="vm"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;How&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;many&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;articles&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;per&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;you&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;want&lt;/span&gt;&lt;span class="vm"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;10&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;What&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;your&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;time&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;zone&lt;/span&gt;&lt;span class="vm"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Europe/Paris&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;you&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;want&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;generate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;tasks&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;Makefile&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;automate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;generation&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;and&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;publishing&lt;/span&gt;&lt;span class="vm"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;you&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;want&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;upload&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;your&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;website&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;FTP&lt;/span&gt;&lt;span class="vm"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;you&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;want&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;upload&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;your&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;website&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SSH&lt;/span&gt;&lt;span class="vm"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;you&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;want&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;upload&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;your&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;website&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Dropbox&lt;/span&gt;&lt;span class="vm"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;you&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;want&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;upload&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;your&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;website&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;S3&lt;/span&gt;&lt;span class="vm"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;you&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;want&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;upload&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;your&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;website&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Rackspace&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Cloud&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Files&lt;/span&gt;&lt;span class="vm"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;you&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;want&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;upload&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;your&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;website&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;using&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;GitHub&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Pages&lt;/span&gt;&lt;span class="vm"&gt;?&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="n"&gt;Done&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Your&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;project&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;is&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;available&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;at&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;workspaces&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pelican&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We haven't used the default GitHub Pages setting because it only publishes the output but doesn't automate the process of building.&lt;/p&gt;
&lt;p&gt;You content is stored in the "content" folder, create a file named &lt;code&gt;my-first-post.md&lt;/code&gt; in that folder with the below contents&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Title: My First automated blog post
Date: 2021-07-10
Category: Snippets
Tags: github, python, pelican
Author: Me
Summary: A guide to configuring automated Continuous Deployment (CD) of static site \
generated by Pelican SSG from GitHub repository to GitHub pages using GitHub Actions

&lt;span class="gu"&gt;## This is my first blog post&lt;/span&gt;
And it looks wonderful!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="step-4-test-your-pelican-website"&gt;Step 4: Test your Pelican website&lt;/h3&gt;
&lt;p&gt;To generate and serve your Pelican Website, run the below command&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;make devserver
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will build your blog in the &lt;code&gt;output&lt;/code&gt; folder and start serving it on &lt;code&gt;localhost:8000&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Start your browser and open the URL &lt;code&gt;localhost:8000&lt;/code&gt;, and congrats 🎉🙌🏽🎇🎊🎈 you blog is up and running.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Pelican blog default theme" src="http://localhost:8080/images/99999995-pelican-blog.png"&gt;&lt;/p&gt;
&lt;h2 id="configuring-github-action-for-automated-deployment"&gt;Configuring GitHub action for automated deployment&lt;/h2&gt;
&lt;p&gt;Create a file at the path &lt;code&gt;.github/workflows/pelican.yml&lt;/code&gt;, with the following contents&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;Deploy&lt;/span&gt;

&lt;span class="nt"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="c1"&gt;# Trigger the workflow on push on main branch,&lt;/span&gt;
  &lt;span class="nt"&gt;push&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;branches&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;main&lt;/span&gt;

&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;build&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nt"&gt;runs-on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;ubuntu-latest&lt;/span&gt;
    &lt;span class="nt"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/checkout@v2&lt;/span&gt;
    &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;justgoodin/pelican-to-github-pages@v1.0.2&lt;/span&gt;
      &lt;span class="nt"&gt;env&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nt"&gt;GITHUB_TOKEN&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{secrets.GITHUB_TOKEN}}&lt;/span&gt;
        &lt;span class="nt"&gt;GH_PAGES_CNAME&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{secrets.DOMAIN_CNAME}}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This action uses a GitHub Marketplace action published by me &lt;code&gt;justgoodin/pelican-to-github-pages@v1.0.1&lt;/code&gt; to build your website and copy the output folder contents to &lt;code&gt;gh-pages&lt;/code&gt; branch. &lt;/p&gt;
&lt;h3 id="configuring-secrets"&gt;Configuring Secrets&lt;/h3&gt;
&lt;p&gt;GITHUB_TOKEN is a default action and you don't need to configure it, however, you will need to configure the DOMAIN_CNAME secret if you want to use a custom domain. In this example we will not configure since we will use a github.io subdomain. &lt;/p&gt;
&lt;p&gt;You can read more about the action at the &lt;a href="https://github.com/marketplace/actions/pelican-to-github-pages"&gt;GitHub Marketplace&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="deploying-the-pelican"&gt;Deploying the Pelican&lt;/h2&gt;
&lt;p&gt;Go back to your VSCode terminal and run the below commands to push your repository to GitHub. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip freeze &amp;gt; requirements.txt
git add .
git commit -m &lt;span class="s2"&gt;&amp;quot;My first Pelican blog&amp;quot;&lt;/span&gt;
git push
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will automatically create and run an action in GitHub &amp;gt; Actions tab of you repository&lt;/p&gt;
&lt;p&gt;If everything went alright, you should see&lt;/p&gt;
&lt;p&gt;&lt;img alt="Github action success" src="http://localhost:8080/images/99999995-github-action-success.png"&gt;&lt;/p&gt;
&lt;h2 id="publishing-the-website-for-the-first-and-only-time"&gt;Publishing the website for the first and only time&lt;/h2&gt;
&lt;p&gt;Go to your repository on GitHub, on the repository navigation go to "Settings", then scroll down and click on Pages, under Source, choose &lt;code&gt;gh-pages&lt;/code&gt; branch, and click on save. Shown below&lt;/p&gt;
&lt;p&gt;&lt;img alt="Github pages settings" src="http://localhost:8080/images/99999995-github-pages-settings.png"&gt;&lt;/p&gt;
&lt;p&gt;If you go to the URL listed above source, your website is published. Hurray!! 👏🏽🥳&lt;/p&gt;</content><category term="Snippets"></category><category term="github"></category><category term="python"></category><category term="pelican"></category></entry><entry><title>What is Jamstack and why should you be using it?</title><link href="http://localhost:8080/snippets/what-is-jamstack-and-why-should-you-be-using-it" rel="alternate"></link><published>2021-07-08T00:00:00+00:00</published><updated>2021-07-08T00:00:00+00:00</updated><author><name>Rehan Haider</name></author><id>tag:localhost,2021-07-08:/snippets/what-is-jamstack-and-why-should-you-be-using-it</id><summary type="html">&lt;p&gt;An introduction to Jamstack concepts and why should you be using it instead of wordpress.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Jamstack is a serverless web-app design concept which derives its JAM from JavaScript, API, and Markup. Even though it contains the work "-stack" it's not a framework instead it specifies a architecture pattern for designing websites that does not require a server at the backend resulting in massive performance improvements and lower cost. &lt;/p&gt;
&lt;p&gt;This architectural pattern can be implemented by a combination of technologies for each one of JavaScript, API, and Markup. &lt;/p&gt;
&lt;p&gt;&lt;img src="http://localhost:8080/images/99999996-JAM.png" alt="jamstack architecture" width="75%" caption="Fig. 1: Jamstack frameworks / tools combination"&gt;&lt;/p&gt;
&lt;h2 id="so-what-makes-a-jamstack"&gt;So what makes a Jamstack?&lt;/h2&gt;
&lt;p&gt;This is achieved by &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Markup / Frontend&lt;/strong&gt;: Uses a static website generator (SSG)  such as &lt;a href="https://docs.getpelican.com/en/latest/"&gt;Pelican&lt;/a&gt;, &lt;a href="https://gohugo.io/"&gt;Hugo&lt;/a&gt;, &lt;a href="https://www.gatsbyjs.com/"&gt;Gatsby&lt;/a&gt;, or &lt;a href="https://nextjs.org/"&gt;Next.js&lt;/a&gt;, etc. to convert a frontend template designed using &lt;a href="https://angular.io/"&gt;Angular&lt;/a&gt;, &lt;a href="https://svelte.dev/"&gt;Svelte&lt;/a&gt;, &lt;a href="https://jinja.palletsprojects.com/en/3.0.x/"&gt;Jinja2&lt;/a&gt;, or other templating languages into simple static HTML which can be served by using static website hosting such as &lt;a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/WebsiteHosting.html"&gt;Amazon S3&lt;/a&gt;, &lt;a href="https://www.netlify.com/"&gt;Netlify&lt;/a&gt;, or &lt;a href="https://firebase.google.com/"&gt;Firebase&lt;/a&gt;, etc, eliminating the need for server based hosting which is considerably more expensive. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;API / Backend &lt;/strong&gt;: Instead of using a server for processing business logic, e.g. authentication, Jamstack specifies using APIs such as that provided by Firebase, &lt;a href="https://www.okta.com/"&gt;Okta&lt;/a&gt;, etc. to handle user management. Similarly, more complex business logic that be coded in any language of one's choice using &lt;a href="https://aws.amazon.com/lambda/"&gt;AWS Lambda&lt;/a&gt;, &lt;a href="https://cloud.google.com/functions"&gt;Google Cloud Functions&lt;/a&gt;, etc. and used as as API by the frontend using, wait for it, &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JavaScript / Event Handling&lt;/strong&gt;: JavaScript is used to handle user interaction and trigger events accordingly. Similarly, when an API response is received, JavaScript is used to render the output to the users and make the website dynamic. &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Alternatively, there are headless CMS such as Ghost, Strapi, etc. that can do a combination of above together. &lt;/p&gt;
&lt;h2 id="what-makes-jamstack-different"&gt;What makes Jamstack different?&lt;/h2&gt;
&lt;p&gt;One can argue there is nothing new in "Jamstack", and older technology stacks used to function in the early days where every page was static and there was no server side rendering. &lt;/p&gt;
&lt;p&gt;As websites became more complex and technology matured we saw solutions like WordPress, Joomla, etc. coming into picture which would remove many repetitive tasks and function as a full Content Management System (CMS). &lt;/p&gt;
&lt;p&gt;But as these solutions become more powerful, it's compute requirements increased as well. A typical blog with reasonable audience running on WordPress would require 2 vCPU and 1 GB RAM minimum, which will cost between $5 - $10. Although not a big number, the correlation of cost to the scalability will largely be linear due to the server side rendering requirements. &lt;/p&gt;
&lt;p&gt;Compare that with a blog built using Jamstack architecture, the blog can run on the free GitHub pages upto more than 5,000 concurrent users before even considering more serious alternatives. &lt;/p&gt;
&lt;p&gt;Additionally, because of the lack of moving parts, testing becomes a lot easier and along with that building a CI/CD pipeline too. &lt;/p&gt;
&lt;p&gt;Finally, because you're using a bunch of static pages, you can use Content Delivery Network such as CloudFlare, AWS CloudFront, etc. to deliver your pages from close to where the users are resulting in sub-second page load times. &lt;/p&gt;
&lt;p&gt;&lt;img src="http://localhost:8080/images/99999996-cdn.png" alt="jamstack content delivery network" width="75%" caption="Fig. 2: Jamstack frameworks content delivery network"&gt;&lt;/p&gt;
&lt;h2 id="when-to-use-jamstack"&gt;When to use Jamstack?&lt;/h2&gt;
&lt;p&gt;Theoretically, you can build almost anything using Jamstack architecture by utilising services such as &lt;a href="https://firebase.google.com/"&gt;Firebase&lt;/a&gt;, &lt;a href="https://aws.amazon.com/amplify/"&gt;AWS Amplify&lt;/a&gt;, &lt;a href="https://supabase.io/"&gt;Supabase&lt;/a&gt;, etc. &lt;/p&gt;
&lt;p&gt;E.g., you can replace a WordPress blog completely with Jamstack and still get 100 Rating on &lt;a href="https://developers.google.com/speed/pagespeed/insights/"&gt;Google PageSpeed Insights&lt;/a&gt; without breaking a sweat, since, the webpages are generated ahead of time, there is 0 lag due to server side rendering (SSR). &lt;/p&gt;
&lt;p&gt;&lt;img src="http://localhost:8080/images/99999996-pagespeed.png" alt="UberPython pagespeed results" caption="Fig. 3: UberPython pagespeed results"&gt;&lt;/p&gt;
&lt;p&gt;Static Site Generators (SSGs) Such as Hugo, &lt;a href="https://docs.getpelican.com/en/latest/"&gt;Pelican&lt;/a&gt;, &lt;a href="https://www.gatsbyjs.com/"&gt;Gatsby&lt;/a&gt;, &lt;a href="https://www.11ty.dev/"&gt;11ty&lt;/a&gt;, etc. provide a rich plugin and theme ecosystem which can get your started with less technical knowledge than what is required for implementing WordPress. &lt;/p&gt;
&lt;p&gt;But that is not all, more complex use cases such as websites that offer courses, or other SaaS services can also be implemented easily. &lt;/p&gt;
&lt;h2 id="which-combination-to-choose"&gt;Which combination to choose?&lt;/h2&gt;
&lt;p&gt;That depends on several factors and one usually ends up doing some trial and error before finalising on one. But you can follow some guidelines below that we used to arrive at the stack for &lt;a href="https://cloudbytes.dev/"&gt;CloudBytes&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Speed&lt;/strong&gt;: If your website has thousands of pages, use Hugo which is written in Go and designed to be really fast but has a steep learning curve. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Familiar with React&lt;/strong&gt;: Use &lt;a href="https://nextjs.org/"&gt;Next.js&lt;/a&gt; is a full React based framework that comes with kitchen sink. The alternative is &lt;a href="https://www.gatsbyjs.com/"&gt;Gatsby&lt;/a&gt; which is equally popular and is a lot more customisable. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Familiar with Ruby&lt;/strong&gt;: &lt;a href="https://jekyllrb.com/"&gt;Jekyll&lt;/a&gt; is that you should be using. It is a fantastic SSG that is used by GitHub to serve static Github.io pages. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Familiar with Python&lt;/strong&gt;: &lt;a href="https://blog.getpelican.com/"&gt;Pelican&lt;/a&gt; and &lt;a href="http://www.getnikola.com/"&gt;Nikola&lt;/a&gt; are the frontrunners that are based on Python&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Familiar with JavaScript&lt;/strong&gt;: Most of the options above are based on JavaScript frameworks, but if you want a bit more freedom, &lt;a href="https://11ty.dev/"&gt;Eleventy&lt;/a&gt; is your best choice with excellent templating support for almost any language (Nunjucks, Haml, Pug, Liquid, etc.) and plugin ecosystem.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Designed for Blog&lt;/strong&gt;: &lt;a href="https://hexo.io/"&gt;Hexo&lt;/a&gt;, &lt;a href="https://jekyllrb.com/"&gt;Jekyll&lt;/a&gt;, and &lt;a href="https://blog.getpelican.com/"&gt;Pelican&lt;/a&gt; are best suited for use as blogging platform for it's support of Markdown and Liquid tags and flexibility. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Documentation&lt;/strong&gt;: &lt;a href="http://www.mkdocs.org/"&gt;MkDocs&lt;/a&gt; and &lt;a href="https://docsify.js.org/"&gt;Docsify&lt;/a&gt; are best suited for documentation websites &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of the options above are excellent in themselves with pros and cons in choosing one. &lt;/p&gt;
&lt;p&gt;This can be then combined with APIs for other functions such as authentication, email, messaging, queuing, payments, etc. &lt;/p&gt;</content><category term="Snippets"></category><category term="python"></category><category term="javascript"></category><category term="pelican"></category><category term="netlify"></category></entry><entry><title>Use VSCode Devcontainers instead of Python venv</title><link href="http://localhost:8080/snippets/use-vscode-devcontainers-instead-of-python-venv" rel="alternate"></link><published>2021-07-07T00:00:00+00:00</published><updated>2021-07-07T00:00:00+00:00</updated><author><name>Rehan Haider</name></author><id>tag:localhost,2021-07-07:/snippets/use-vscode-devcontainers-instead-of-python-venv</id><summary type="html">&lt;p&gt;VSCode Devcontainers are game changers that makes Python dependency management much easier.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I wrote about &lt;a href="http://localhost:8080/snippets/create-a-python-virtual-environment-using-venv"&gt;why you need Python virtual environments&lt;/a&gt; and how to &lt;a href="http://localhost:8080/snippets/create-a-python-virtual-environment-using-venv"&gt;create them&lt;/a&gt;. 
All Python developers end up using some kind of environment manager like &lt;code&gt;venv&lt;/code&gt; for any meaningful development effort. &lt;/p&gt;
&lt;p&gt;VSCode, a few years ago, released a concept called &lt;strong&gt;devcontainers&lt;/strong&gt; that takes away the pain of managing many virtual environments for Python and other languages such as NodeJS, etc.&lt;/p&gt;
&lt;h2 id="vscodes-venv-killer"&gt;VSCode's venv killer&lt;/h2&gt;
&lt;p&gt;Devcontainers or remote containers, work by opening you project folder inside a Docker Container giving you the flexibility of both Keeping the files on your system, and working in a secluded container with its own libraries and packages sanboxed from your other projects. &lt;/p&gt;
&lt;p&gt;This allows developers to use these Docker containers as a full-featured development environment with workspace files mounted from the local file system. &lt;/p&gt;
&lt;p&gt;&lt;img alt="VSCode devcontainer architecture" src="http://localhost:8080/images/99999997-architecture-containers.png"&gt;&lt;/p&gt;
&lt;p&gt;Each such devcontainer also acts like a workspace and can have its own set of extensions, and preferences configured.&lt;/p&gt;
&lt;h2 id="how-to-use-devcontainers"&gt;How to use devcontainers&lt;/h2&gt;
&lt;p&gt;First, the appropriate version of &lt;a href="https://www.docker.com/products/docker-desktop"&gt;Docker Desktop&lt;/a&gt;, If you're using a Windows system, you need to &lt;a href="http://localhost:8080/snippets/how-to-install-wsl2-on-windows-1011"&gt;install WSL2&lt;/a&gt; and enable &lt;a href="https://aka.ms/vscode-remote/containers/docker-wsl2"&gt;Docker WSL2 backend&lt;/a&gt; is recommended. &lt;/p&gt;
&lt;p&gt;Once you have these setup, open VSCode and from Getting started page, click on "Open Folder" to open the folder where your project is stored.&lt;/p&gt;
&lt;p&gt;After that either click on the "Open Remote Window" button on bottom left (two overlapping arroheads) or press &lt;code&gt;Ctrl + Shift + P&lt;/code&gt; to open the command palette and choose "Reopen in Container" &lt;/p&gt;
&lt;p&gt;&lt;img alt="VSCode remote container" src="http://localhost:8080/images/99999997-remote-container.png"&gt;&lt;/p&gt;
&lt;p&gt;It will then ask you to choose one from ready-to-use configurations. Let's choose Python3 &amp;amp; PostgreSQL. This will trigger two actions&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a folder named &lt;code&gt;.devcontainer&lt;/code&gt; in your project root directory that with a &lt;code&gt;Dockerfile&lt;/code&gt; and a &lt;code&gt;.devcontainer.json&lt;/code&gt; that contains your user configuration&lt;/li&gt;
&lt;li&gt;Start building the Docker container for you to use&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Once the build process is complete, at the bottom left, you will see &lt;code&gt;Dev Container: Python3 &amp;amp; PostgreSQL&lt;/code&gt; and you files will be still present.&lt;/p&gt;
&lt;h2 id="preparing-the-environment"&gt;Preparing the environment&lt;/h2&gt;
&lt;p&gt;Now you have access to a functional actual Docker container running Debian Linux with Python and PostgreSQL already installed. &lt;/p&gt;
&lt;p&gt;If you are using &lt;code&gt;requirements.txt&lt;/code&gt; to keep the list of dependencies, you will need to install your dependencies for the first time by opening the Terminal within VSCode and running&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip install requirements.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Or you can install them one by one and run the below to create a &lt;code&gt;requirements.txt&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip freeze &amp;gt; requirements.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id="enabling-automatic-installation"&gt;Enabling automatic installation&lt;/h2&gt;
&lt;p&gt;To enable VScode Remote Containers to install your dependencies, you should choose to rebuild the container, browse to the &lt;code&gt;.devcontainer&lt;/code&gt; folder and open the &lt;code&gt;Dockerfile&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You need to uncomment the below block as shown below 👇🏽&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c"&gt;# [Optional] If your requirements rarely change, uncomment this section to add them to the image.&lt;/span&gt;
&lt;span class="k"&gt;COPY&lt;/span&gt; requirements.txt /tmp/pip-tmp/
&lt;span class="k"&gt;RUN&lt;/span&gt; pip3 --disable-pip-version-check --no-cache-dir install -r /tmp/pip-tmp/requirements.txt &lt;span class="se"&gt;\&lt;/span&gt;
   &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; rm -rf /tmp/pip-tmp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will reinstall any dependencies that you may have noted under &lt;code&gt;requirements.txt&lt;/code&gt;. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Make sure you have requirements.txt file present before doing the above, attempt to rebuild the container without the file present will result in failure&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="pro-tip"&gt;Pro-tip&lt;/h3&gt;
&lt;p&gt;If you use your GitHub profile to login into VSCode, you can push your changes back to you Github account without entering your credentials or any additional configuration&lt;/p&gt;</content><category term="Snippets"></category><category term="python"></category><category term="vscode"></category><category term="github"></category></entry><entry><title>Configure &amp; Fix Pelican Sitemap Error on Google Search Console</title><link href="http://localhost:8080/snippets/configure-fix-pelican-sitemap-error-on-google-search-console" rel="alternate"></link><published>2021-07-04T00:00:00+00:00</published><updated>2021-07-04T00:00:00+00:00</updated><author><name>Rehan Haider</name></author><id>tag:localhost,2021-07-04:/snippets/configure-fix-pelican-sitemap-error-on-google-search-console</id><summary type="html">&lt;p&gt;A quick guide to correctly configurating sitemaps in Pelican &amp;amp; fixing URL errors thrown up by Google Search Console&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt; - Set the SITEURL variable in &lt;code&gt;publishconf.py&lt;/code&gt; and use &lt;code&gt;publishconf.py&lt;/code&gt; to generate your website instead of the default &lt;code&gt;pelicanconf.py&lt;/code&gt;. This will fix your Google Search Console sitemap error. &lt;/p&gt;
&lt;p&gt;If you have have recently started using Pelican and have struggled with it comprehensive but incoherent documentation. One of the problems you might encounter is handing the SITEURL errors both while working on your local system and on the deployed webserver. &lt;/p&gt;
&lt;h2 id="what-is-siteurl"&gt;What is SITEURL?&lt;/h2&gt;
&lt;p&gt;Pelican's SITEURL refers to the URL of your website, e.g. example.com, or blog.example.com. In our website's case the SITEURL is "https://cloudbytes.dev". &lt;/p&gt;
&lt;p&gt;Pelican needs the SITEURL to define the &lt;code&gt;href&lt;/code&gt; links in  your website correctly while publishing the website. &lt;/p&gt;
&lt;h2 id="how-to-define-siteurl"&gt;How to define SITEURL?&lt;/h2&gt;
&lt;p&gt;Make sure it is configured correctly in two places&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;pelicanconf.py&lt;/code&gt; : This file is typically used for local development. Running &lt;code&gt;pelican content&lt;/code&gt; or &lt;code&gt;make html&lt;/code&gt; or &lt;code&gt;invoke livereload&lt;/code&gt; uses this file by &lt;strong&gt;default&lt;/strong&gt;. &lt;/li&gt;
&lt;li&gt;&lt;code&gt;publishconf.py&lt;/code&gt;: The setting in this file overrides the ones in &lt;code&gt;pelicanconf.py&lt;/code&gt; and is meant for generating the static website for deployment. But Pelican doesn't use this by default. You need to run either &lt;code&gt;pelican content -s publishconf.py&lt;/code&gt; or &lt;code&gt;make publish&lt;/code&gt; to use this file as your settings. &lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="errors-that-you-may-encounter"&gt;Errors that you may encounter&lt;/h2&gt;
&lt;p&gt;If you don't configure SITEURL correctly the website will work on your system but not on the hosting provider you are using for your final website. &lt;/p&gt;
&lt;p&gt;Typically you may encounter the below error&lt;/p&gt;
&lt;p&gt;&lt;img alt="Pelican sitemap error on Google Search Console" src="http://localhost:8080/images/99999998-google-search-console-error.png"&gt;&lt;/p&gt;
&lt;p&gt;This is due to malformed URLs, and the typical reason is incorrect SITEURL configuration. &lt;/p&gt;</content><category term="Snippets"></category><category term="python"></category><category term="pelican"></category></entry><entry><title>Create a Python virtual environment using venv</title><link href="http://localhost:8080/snippets/create-a-python-virtual-environment-using-venv" rel="alternate"></link><published>2021-07-04T00:00:00+00:00</published><updated>2021-07-04T00:00:00+00:00</updated><author><name>Rehan Haider</name></author><id>tag:localhost,2021-07-04:/snippets/create-a-python-virtual-environment-using-venv</id><summary type="html">&lt;p&gt;A quick guide to why you need a virtual environment, how to create, activate and manage&lt;/p&gt;</summary><content type="html">&lt;p&gt;Python is the most popular programming language in the world. It Developers love it due to its versatility and the flexibility of using it in diverse ways. This is possible due to a plethora of Python packages published on &lt;a href="https://pypi.org/"&gt;PyPi&lt;/a&gt; and many others. There are so many Python packages that you almost can find a package to do something, as illustrated by my favourite web-comic, &lt;a href="https://xkcd.com/353/"&gt;xkcd&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="XKCD - Python" src="https://imgs.xkcd.com/comics/python.png"&gt;&lt;/p&gt;
&lt;p&gt;These packages or libraries can also depend on other packages, e.g. a very popular library used by data science professionals, &lt;a href="https://pandas.pydata.org/"&gt;Pandas&lt;/a&gt;, uses and builds on top of 3 other packages, Numpy, python-dateutil, and pytz. &lt;/p&gt;
&lt;h2 id="the-problem"&gt;The problem&lt;/h2&gt;
&lt;p&gt;But this diversity could also create problems for developers due to conflicts in the dependencies of multiple libraries, e.g. installing Pandas ends up installing 10+ other packages due. This could also cause conflicts between versions of dependencies. &lt;/p&gt;
&lt;h2 id="python-virtual-environment"&gt;Python Virtual Environment&lt;/h2&gt;
&lt;p&gt;This is where virtual environments can help. You can create different instances of Python specific for the application you're building without them conflicting with each other. &lt;/p&gt;
&lt;p&gt;&lt;img alt="Python virtual environments" src="http://localhost:8080/images/99999999-python-virtual-environment.webp"&gt; &lt;/p&gt;
&lt;h3 id="create-a-virtual-environment"&gt;Create a virtual environment&lt;/h3&gt;
&lt;p&gt;Navigate to the folder that you want to place the virtual environment in and run &lt;code&gt;venv&lt;/code&gt; module as shown below 👇🏽&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python3 -m venv new-env
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;venv&lt;/code&gt; is the recommended module for managing virtual environments now and &lt;code&gt;virtualenv&lt;/code&gt; has been deprecated by Python &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This will create folder named &lt;code&gt;new-env&lt;/code&gt; and place the virtual environment inside it including the Python interpreter, the standard library along with other supporting files. &lt;/p&gt;
&lt;h3 id="activate-the-virtual-environment"&gt;Activate the virtual environment&lt;/h3&gt;
&lt;p&gt;After creating the virtual environment, you will need to activate it to be able to use it&lt;/p&gt;
&lt;p&gt;On Windows, run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;new-env&lt;/span&gt;&lt;span class="p"&gt;\&lt;/span&gt;&lt;span class="n"&gt;Scripts&lt;/span&gt;&lt;span class="p"&gt;\&lt;/span&gt;&lt;span class="n"&gt;activate&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;On Unix or MacOS, run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;source&lt;/span&gt; new-env/bin/activate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="use-the-virtual-environment"&gt;Use the virtual environment&lt;/h3&gt;
&lt;p&gt;After creating the virtual environment, you will notice &lt;code&gt;(new-env)&lt;/code&gt; in the terminal prompt you are using. &lt;/p&gt;
&lt;p&gt;You can install any package using&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;python3 -m pip install &amp;lt;package-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you have added the Python directory to path, you also use the below &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pip install &amp;lt;package-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id="deactivate-the-virtual-environment"&gt;Deactivate the virtual environment&lt;/h3&gt;
&lt;p&gt;To deactivate, simply run&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;deactivate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Snippets"></category><category term="python"></category></entry></feed>